#!/usr/bin/env python

import os
import sys
import errno

# A script to create the files generated by the configured extensions
# Configured extensions come from the EXTENSIONS environment variable

# Create the ecmdExtInterpreter.C
# This is a combo of generated code from this script and code snippets
# stored with the extension

# Get the list of extensions from the env and turn it into python
extlist = os.environ["EXTENSIONS"].split(" ")
extlist.sort()

# -----------------------
# cmd files
# -----------------------
if (sys.argv[1] == "cmd"):
  # Go thru the full extlist and create a reduced list of extensions
  # with no cmd component
  extcmdlist = list()
  for ext in extlist:
    if (os.path.exists(os.environ["ECMD_ROOT"] + "/ecmd-core/ext/" + ext + "/cmd/snippet")):
      extcmdlist.append(ext)

  # Open our file and start writing
  extfile = open(os.environ["SRCPATH"] + "/ecmdExtInterpreter.C", 'w')

  # Write out all the static stuff
  extfile.write("//This file was autogenerated by makeext.py\n\n")
  extfile.write("#include <inttypes.h>\n")
  extfile.write("#include <dlfcn.h>\n")
  extfile.write("#include <stdio.h>\n")
  extfile.write("#include <string.h>\n")
  extfile.write("\n")
  extfile.write("#include <ecmdClientCapi.H>\n")
  extfile.write("#include <ecmdExtInterpreter.H>\n")
  extfile.write("#include <ecmdReturnCodes.H>\n")
  extfile.write("#include <ecmdCommandUtils.H>\n")
  extfile.write("#include <ecmdSharedUtils.H>\n\n")

  # Now loop through all the extensions and write out their defines and includes
  for ext in extcmdlist:
    extfile.write("#ifdef ECMD_" + ext.upper() + "_EXTENSION_SUPPORT\n")
    extfile.write("#include <" + ext + "ClientCapi.H>\n")
    extfile.write("#include <" + ext + "Interpreter.H>\n")
    extfile.write("#endif\n\n")

  # Write the function definition
  extfile.write("uint32_t ecmdCallExtInterpreters(int argc, char* argv[], uint32_t & io_rc) {\n")
  extfile.write("  uint32_t rc = ECMD_SUCCESS;\n\n")

  # Now go through and suck in all the extension init code snippets
  # Once read in, place it in the new output file
  for ext in extcmdlist:
    snippetfile = open(os.environ["ECMD_ROOT"] + "/ecmd-core/ext/" + ext + "/cmd/snippet/callInterpreter.C", 'r')
    for line in snippetfile.readlines():
      extfile.write(line)
    extfile.write("\n")
    snippetfile.close()	

  # Write the end of the function and close the file
  extfile.write("  return rc;\n")
  extfile.write("}\n")
  extfile.close()

# -----------------------
# Doxygen files
# -----------------------
if (sys.argv[1] == "doxygen"):

  # arg1 is doxygen
  # arg2 is the api
  # arg3 is where to write the file

  # We're going to write out a header file to be used by doxygen to get the extensions

  # Open our file and start writing
  extfile = open(sys.argv[3] + "/ecmdExt" + sys.argv[2].title() + ".H", 'w')

  # Write out all the static stuff
  extfile.write("/**\n\n")
  extfile.write(" @file ecmdExt" + sys.argv[2].title() + ".H\n")
  extfile.write(" @brief eCMD Extension Information\n\n")
  extfile.write(" @section ext eCMD Extensions\n")
  extfile.write(" These are extensions to the core eCMD interface, not all eCMD Plugins support these extensions.<br>\n")
  extfile.write(" To use an eCMD extension you will need to link in the appropriate library, see the example Makefiles under 'Use eCMD' for help.<br>\n\n")
  extfile.write("<ul>\n")

  # Now loop through all the extensions and write out their includes
  for ext in extlist:
    extfile.write("<li> " + ext + "Client" + sys.argv[2].title() + ".H\n")

  # Write the end of the file
  extfile.write("</ul>\n\n")
  extfile.write("*/")
  extfile.close()

# -----------------------
# Python files
# -----------------------
if (sys.argv[1] == "pyapi"):
  
  # Open our file and start writing
  extfile = open(os.environ["SRCPATH"] + "/ecmdExtPyIncludes.i", 'w')

  extfile.write("/*********** Start Files to swigify ***********/\n")
  extfile.write("// The extensions\n")
  extfile.write("%include \"ecmdPluginExtensionSupport.H\"\n")
  
  # Now auto generate the rest based on the list
  for ext in extlist:
    extfile.write("#ifdef ECMD_" + ext.upper() + "_EXTENSION_SUPPORT\n")
    extfile.write("  %include " + ext + "ClientPyapi.i\n")
    extfile.write("#endif\n")

  extfile.write("/*********** End Files to swigify ***********/\n")
  extfile.close()

  # Open our file and start writing
  extfile = open(os.environ["SRCPATH"] + "/ecmdExtPyInserts.i", 'w')

  extfile.write("/*********** Start Insert Code ***********/\n")
  extfile.write("// Insert C code into the file swig generates\n")
  extfile.write("%{\n")
  extfile.write("#include \"ecmdPluginExtensionSupport.H\"\n")
  
  # Now auto generate the rest based on the list
  for ext in extlist:
    snippetfile = open(os.environ["ECMD_ROOT"] + "/ecmd-core/ext/" + ext + "/pyapi/snippet/extInsert.i", 'r')
    for line in snippetfile.readlines():
      extfile.write(line)
    snippetfile.close()	

  extfile.write("\%}\n")
  extfile.close()


# -----------------------
# Perl files
# -----------------------
if (sys.argv[1] == "perlapi"):
  
  # Open our file and start writing
  extfile = open(os.environ["SRCPATH"] + "/ecmdExtPerlIncludes.i", 'w')

  extfile.write("/*********** Start Files to swigify ***********/\n")
  extfile.write("// The extensions\n")
  extfile.write("%include \"ecmdPluginExtensionSupport.H\"\n")
  
  # Now auto generate the rest based on the list
  for ext in extlist:
    extfile.write("#ifdef ECMD_" + ext.upper() + "_EXTENSION_SUPPORT\n")
    extfile.write("  %include " + ext + "ClientPerlapi.i\n")
    extfile.write("#endif\n")

  extfile.write("/*********** End Files to swigify ***********/\n")
  extfile.close()

  # Open our file and start writing
  extfile = open(os.environ["SRCPATH"] + "/ecmdExtPerlInserts.i", 'w')

  extfile.write("/*********** Start Insert Code ***********/\n")
  extfile.write("// Insert C code into the file swig generates\n")
  extfile.write("%{\n")
  extfile.write("#include \"ecmdPluginExtensionSupport.H\"\n")
  
  # Now auto generate the rest based on the list
  for ext in extlist:
    snippetfile = open(os.environ["ECMD_ROOT"] + "/ecmd-core/ext/" + ext + "/perlapi/snippet/extInsert.i", 'r')
    for line in snippetfile.readlines():
      extfile.write(line)
    snippetfile.close()	

  extfile.write("\%}\n")
  extfile.close()
