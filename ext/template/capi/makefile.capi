# Makefile for the ecmd Extensions
# Written by Chris Engel

# $Header$

ECMD_ROOT       := ${PWD}/../../../
# The default build rules
include ${ECMD_ROOT}/makefile.rules

EXTENSION_NAME_u := $(shell echo ${EXTENSION_NAME} | tr 'a-z' 'A-Z')
EXTENSION_NAME_u1 := $(shell perl -e 'printf(ucfirst(${EXTENSION_NAME}))')

CAPI_SOURCE  := ${CAPI_SOURCE} ${EXTENSION_NAME}ClientCapi.C
INCLUDES     := ${INCLUDES} ${EXTENSION_NAME}ClientCapi.H ${EXTENSION_NAME}Structs.H
INT_INCLUDES := ${INT_INCLUDES} ecmdClientCapi.H  ecmdDataBuffer.H  ecmdReturnCodes.H ecmdStructs.H ecmdUtils.H ecmdClientEnums.H

ifeq ($(strip $(DISABLE_AUTOGEN)),)
  # These are the files that will be autogenerated from the template
  TEMPLATE_SOURCE := ${EXTENSION_NAME}ClientCapi.C ${EXTENSION_NAME}DllCapi.C

  # These are the files that are auto-gened with makedll.pl
  CAPI_SOURCE  := ${CAPI_SOURCE} ${EXTENSION_NAME}ClientCapiFunc.C
  INCLUDES     := ${INCLUDES} ${EXTENSION_NAME}DllCapi.H ${EXTENSION_NAME}ClientEnums.H
endif

CFLAGS       := ${CFLAGS} -I../../../capi/export

# This is the source generated by makedll.pl
GENERATED_SOURCE := ${EXTENSION_NAME}ClientCapiFunc.C
GENERATED_INCLUDES := ${EXTENSION_NAME}DllCapi.H ${EXTENSION_NAME}ClientEnums.H


# *****************************************************************************
# The x86 Linux Setup stuff
# *****************************************************************************
ifeq (${OS},Linux_x86)
  TARGET = ${EXTENSION_NAME}ClientCapi_x86.a
  CFLAGS := ${CFLAGS} -ftemplate-depth-30 -Wall
  ifneq (${SLIB_SOURCE},)
    SLIB    := lib${EXTENSION_NAME}_x86.so
  endif
endif

# *****************************************************************************
# The ppc Linux Setup stuff
# *****************************************************************************
ifeq (${OS},Linux_ppc)
  TARGET = ${EXTENSION_NAME}ClientCapi_ppc.a
  CFLAGS := ${CFLAGS} -ftemplate-depth-30 -Wall
  ifneq (${SLIB_SOURCE},)
    SLIB    := lib${EXTENSION_NAME}_ppc.so
  endif
endif


# *****************************************************************************
# The Aix Setup stuff
# *****************************************************************************
ifeq (${OS},AIX)
  TARGET = ${EXTENSION_NAME}ClientCapi_aix.a 
  CFLAGS  := ${CFLAGS} -+ -qstaticinline -qnoinline
  ifneq (${SLIB_SOURCE},)
    SLIB    := lib${EXTENSION_NAME}_aix.so
  endif
endif

VPATH := ${VPATH}${SUBDIR}:../../../capi/export:../../template/capi


# *****************************************************************************
# The Main Targets
# *****************************************************************************
all: dir ${TARGET} ${SLIB} ${EXTENSION_NAME}DllCapi.C
	@echo "Exporting ${EXTENSION_NAME_u} eCMD Client Extension Api to export/ ..."
	@cp -p ${SUBDIR}${TARGET} export/
        ifneq (${SLIB_SOURCE},)
		@cp -p ${SUBDIR}${SLIB} export/
        endif
	@cp -p ${INCLUDES} export/

clean: objclean exportclean
	rm -f $(GENERATED_SOURCE)
	rm -f $(GENERATED_INCLUDES)
      ifeq ($(strip $(DISABLE_AUTOGEN)),)
	rm -f $(TEMPLATE_SOURCE)
      endif

objclean:
	rm -rf ${SUBDIR}

exportclean:
	rm -rf export/

install:
	@echo "Installing ${EXTENSION_NAME_u} eCMD Client Extension Api to ${INSTALL_PATH}/ext/${EXTENSION_NAME}/capi/ ..."
	@mkdir -p ${INSTALL_PATH}/ext/${EXTENSION_NAME}/capi/
	cp export/* ${INSTALL_PATH}/ext/${EXTENSION_NAME}/capi/.

dir:
	@mkdir -p ${SUBDIR}
	@mkdir -p export


# *****************************************************************************
# Object Build Targets
# *****************************************************************************
CAPI_SOURCE_OBJS  = $(basename $(CAPI_SOURCE))
CAPI_SOURCE_OBJS := $(addprefix ${SUBDIR}, $(CAPI_SOURCE_OBJS))
CAPI_SOURCE_OBJS := $(addsuffix .o, $(CAPI_SOURCE_OBJS))
SLIB_SOURCE_OBJS  = $(basename $(SLIB_SOURCE))
SLIB_SOURCE_OBJS := $(addprefix ${SUBDIR}, $(SLIB_SOURCE_OBJS))
SLIB_SOURCE_OBJS := $(addsuffix .o, $(SLIB_SOURCE_OBJS))

# *****************************************************************************
# Compile code for the common C++ objects if their respective
# code has been changed.  Or, compile everything if a header
# file has changed.
# *****************************************************************************
$(CAPI_SOURCE_OBJS): ${SUBDIR}%.o : %.C ${INCLUDES} ${INT_INCLUDES}
	$(CC) -c $(CFLAGS) $< -o $@ $(DEFINES)
$(SLIB_SOURCE_OBJS): ${SUBDIR}%.o : %.C ${INCLUDES} ${INT_INCLUDES}
	$(CC) -c $(CFLAGS) $(SLIBCFLAGS) $< -o $@ $(DEFINES)


# *****************************************************************************
# Create the Client Archive
# *****************************************************************************
${TARGET}: ${CAPI_SOURCE_OBJS} ${LINK_OBJS}
	${AR} r ${SUBDIR}$@ $^

# *****************************************************************************
# Create the Shared Library
# *****************************************************************************
${SLIB}: ${SLIB_SOURCE_OBJS}
	@echo "Linking Shared Library ..."
	$(LD) ${SLDFLAGS} -o ${SUBDIR}$@ $^ 

# *****************************************************************************
# Autogenerate the Client side of the Dll
# *****************************************************************************
ifeq ($(strip $(DISABLE_AUTOGEN)),)
  $(GENERATED_SOURCE) $(GENERATED_INCLUDES): ${EXTENSION_NAME}ClientCapi.H makedll.pl
	@echo "==== Auto Generating $@"
	@chmod 777 makedll.pl
	@./makedll.pl ${EXTENSION_NAME} $@
endif


# *****************************************************************************
# Template source files
# *****************************************************************************
ifeq ($(strip $(DISABLE_AUTOGEN)),)
  ${TEMPLATE_SOURCE}: ${EXTENSION_NAME}% : template%
	@echo "==== Auto Generating $@"
	@sed "s/template/${EXTENSION_NAME}/g" $< | sed "s/TEMPLATE/${EXTENSION_NAME_u}/g" | sed "s/Template/${EXTENSION_NAME_u1}/g" > $@
else
  ${EXTENSION_NAME}DllCapi.C:
	@echo "This is a phony, don't need this if we are not auto-genning" > /dev/null
	@touch ${EXTENSION_NAME}DllCapi.C
endif
