// attribute_ids.H
// This file is generated by perl script parseAttributeInfo.pl

#ifndef ATTRIBUTEIDS_H_
#define ATTRIBUTEIDS_H_

#include <target_types.H>

namespace fapi2
{

/**
 * @brief Enumeration of attribute IDs
 */
enum AttributeId
{
    ATTR_CHIP_ID = 0xca771ad,
    ATTR_NAME = 0xb91b1b8,
    ATTR_EC = 0x76cb47d,
    ATTR_FSI_GP_REG_SCOM_ACCESS = 0x2171f23,
    ATTR_FABRIC_NODE_ID = 0xe75987b,
    ATTR_FABRIC_CHIP_ID = 0xa631e7e,
    ATTR_CHIP_HAS_SBE = 0x520b948,
    ATTR_PROC_DCM_INSTALLED = 0xce9d606,
    ATTR_CHIP_REGIONS_TO_ENABLE = 0x94a3736,
    ATTR_EX_L2_SINGLE_MEMBER_ENABLE = 0xd9c3cf7,
    ATTR_PROC_BOOT_VOLTAGE_VID = 0xe34b343,
    ATTR_PCI_OSCSWITCH_CONFIG = 0xa85e131,
    ATTR_OSCSWITCH_CTL0 = 0x2647699,
    ATTR_OSCSWITCH_CTL1 = 0xa3aa8c5,
    ATTR_OSCSWITCH_CTL2 = 0x1c5b238,
    ATTR_I2C_SLAVE_ADDRESS = 0x4e9285d,
    ATTR_TARGET_SCOMABLE = 0x2b33d5a,
    ATTR_SIGNED_TEST_8 = 0x3cf6243,
    ATTR_SIGNED_TEST_32 = 0xb20510b,
    ATTR_SIGNED_TEST_64 = 0x758251d,
    ATTR_FUNCTIONAL = 0xcaa52ad,
    ATTR_POS = 0x0962a16,
    ATTR_SCRATCH_UINT8_1 = 0xd16a035,
    ATTR_SCRATCH_UINT8_2 = 0xd53bc45,
    ATTR_SCRATCH_UINT16_1 = 0xab94c04,
    ATTR_SCRATCH_UINT16_2 = 0xe8d4de7,
    ATTR_SCRATCH_UINT32_1 = 0x6e35711,
    ATTR_SCRATCH_UINT32_2 = 0xb6b04cf,
    ATTR_SCRATCH_UINT64_1 = 0x97c0c12,
    ATTR_SCRATCH_UINT64_2 = 0xa09fac0,
    ATTR_SCRATCH_UINT8_ARRAY_1 = 0x4b2b986,
    ATTR_SCRATCH_UINT8_ARRAY_2 = 0x466dcc2,
    ATTR_SCRATCH_UINT16_ARRAY_1 = 0x8a5735b,
    ATTR_SCRATCH_UINT16_ARRAY_2 = 0x4983f95,
    ATTR_SCRATCH_UINT32_ARRAY_1 = 0x330cac1,
    ATTR_SCRATCH_UINT32_ARRAY_2 = 0x9c880f8,
    ATTR_SCRATCH_UINT64_ARRAY_1 = 0x14d36df,
    ATTR_SCRATCH_UINT64_ARRAY_2 = 0x065e855,
    ATTR_SCRATCH_INT8_1 = 0x8d69f35,
    ATTR_SCRATCH_INT8_2 = 0xd0a271b,
    ATTR_SCRATCH_INT16_1 = 0xd43da62,
    ATTR_SCRATCH_INT16_2 = 0xd03c109,
    ATTR_SCRATCH_INT32_1 = 0xb5d67e7,
    ATTR_SCRATCH_INT32_2 = 0xedc4c34,
    ATTR_SCRATCH_INT64_1 = 0x439b62e,
    ATTR_SCRATCH_INT64_2 = 0x1201173,
    ATTR_SCRATCH_INT8_ARRAY_1 = 0x0ec9885,
    ATTR_SCRATCH_INT8_ARRAY_2 = 0xe1dc9a4,
    ATTR_SCRATCH_INT16_ARRAY_1 = 0x82f8643,
    ATTR_SCRATCH_INT16_ARRAY_2 = 0x9c5c56f,
    ATTR_SCRATCH_INT32_ARRAY_1 = 0x8a67e1b,
    ATTR_SCRATCH_INT32_ARRAY_2 = 0xfd6895b,
    ATTR_SCRATCH_INT64_ARRAY_1 = 0xf7388dd,
    ATTR_SCRATCH_INT64_ARRAY_2 = 0x6589cb7,
    ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8 = 0x2588335,
    ATTR_EXECUTION_PLATFORM = 0x8aa85d5,
    ATTR_IS_SIMULATION = 0x5e8e617,
    ATTR_MNFG_FLAGS = 0x22cdd45,
    ATTR_IS_MPIPL = 0x32ab761,
    ATTR_PROC_EPS_TABLE_TYPE = 0x132602b,
    ATTR_PROC_FABRIC_PUMP_MODE = 0x138ee84,
    ATTR_PROC_X_BUS_WIDTH = 0x7a48d6f,
    ATTR_ALL_MCS_IN_INTERLEAVING_GROUP = 0x1f8d4c1,
    ATTR_NEST_FREQ_MHZ = 0x403f570,
    ATTR_BOOT_FREQ_MHZ = 0x7c49cfc,
    ATTR_EX_GARD_BITS = 0x7fe3369,
    ATTR_DISABLE_I2C_ACCESS = 0x1ba20f5,
    ATTR_PIB_I2C_REFCLOCK = 0xbc375a8,
    ATTR_PIB_I2C_NEST_PLL = 0x2ea0b98,
    ATTR_SBE_IMAGE_OFFSET = 0xc6122e2,
    ATTR_BOOT_VOLTAGE = 0xf651d57,
    ATTR_RISK_LEVEL = 0x6c6a7b8,
    ATTR_PROC_REFCLOCK_RCVR_TERM = 0x4252e3d,
    ATTR_PCI_REFCLOCK_RCVR_TERM = 0xd6b0bb7,
    ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM = 0x4cf88f9,
    ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM = 0xaf4f6a6,
    ATTR_MEM_FILTER_PLL_SOURCE = 0x292e834,
    ATTR_MULTI_SCOM_BUFFER_MAX_SIZE = 0x3a1cbd8,
    ATTR_RECONFIGURE_LOOP = 0xb04d39a,
    ATTR_PM_HWP_ATTR_VERSION = 0x2c5d134,
    ATTR_REDUNDANT_CLOCKS = 0x36784e2,
    ATTR_MFG_TRACE_ENABLE = 0xbad56c6,
    ATTR_CHIP_UNIT_POS = 0x07f067a,
};

/**
 * @brief Attribute Information
 */
/* ATTR_CHIP_ID */
typedef uint32_t ATTR_CHIP_ID_Type;
const bool ATTR_CHIP_ID_Privileged = false;
const bool ATTR_CHIP_ID_InitToZero = false;
const fapi2::TargetType ATTR_CHIP_ID_TargetType = fapi2::TARGET_TYPE_PROC_CHIP | fapi2::TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CHIP_ID_PlatInit = true;
#define ATTR_CHIP_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_NAME */
typedef uint8_t ATTR_NAME_Type;
const bool ATTR_NAME_Privileged = true;
const bool ATTR_NAME_InitToZero = false;
const fapi2::TargetType ATTR_NAME_TargetType = fapi2::TARGET_TYPE_PROC_CHIP | fapi2::TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_NAME_PlatInit = true;
enum ATTR_NAME_Enum
{
    ENUM_ATTR_NAME_NONE = 0,
    ENUM_ATTR_NAME_NIMBUS = 1,
    ENUM_ATTR_NAME_CUMULUS = 2,
    ENUM_ATTR_NAME_CENTAUR = 3,
};
#define ATTR_NAME_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_EC */
typedef uint8_t ATTR_EC_Type;
const bool ATTR_EC_Privileged = true;
const bool ATTR_EC_InitToZero = false;
const fapi2::TargetType ATTR_EC_TargetType = fapi2::TARGET_TYPE_PROC_CHIP | fapi2::TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_EC_PlatInit = true;
#define ATTR_EC_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FSI_GP_REG_SCOM_ACCESS */
typedef uint8_t ATTR_FSI_GP_REG_SCOM_ACCESS_Type;
const bool ATTR_FSI_GP_REG_SCOM_ACCESS_Privileged = false;
const bool ATTR_FSI_GP_REG_SCOM_ACCESS_InitToZero = false;
const fapi2::TargetType ATTR_FSI_GP_REG_SCOM_ACCESS_TargetType = fapi2::TARGET_TYPE_PROC_CHIP | fapi2::TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_FSI_GP_REG_SCOM_ACCESS_PlatInit = true;
enum ATTR_FSI_GP_REG_SCOM_ACCESS_Enum
{
    ENUM_ATTR_FSI_GP_REG_SCOM_ACCESS_false = 0,
    ENUM_ATTR_FSI_GP_REG_SCOM_ACCESS_true = 1,
};
#define ATTR_FSI_GP_REG_SCOM_ACCESS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FABRIC_NODE_ID */
typedef uint8_t ATTR_FABRIC_NODE_ID_Type;
const bool ATTR_FABRIC_NODE_ID_Privileged = false;
const bool ATTR_FABRIC_NODE_ID_InitToZero = false;
const fapi2::TargetType ATTR_FABRIC_NODE_ID_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_FABRIC_NODE_ID_PlatInit = true;
#define ATTR_FABRIC_NODE_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FABRIC_CHIP_ID */
typedef uint8_t ATTR_FABRIC_CHIP_ID_Type;
const bool ATTR_FABRIC_CHIP_ID_Privileged = false;
const bool ATTR_FABRIC_CHIP_ID_InitToZero = false;
const fapi2::TargetType ATTR_FABRIC_CHIP_ID_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_FABRIC_CHIP_ID_PlatInit = true;
#define ATTR_FABRIC_CHIP_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_HAS_SBE */
typedef uint8_t ATTR_CHIP_HAS_SBE_Type;
const bool ATTR_CHIP_HAS_SBE_Privileged = false;
const bool ATTR_CHIP_HAS_SBE_InitToZero = false;
const fapi2::TargetType ATTR_CHIP_HAS_SBE_TargetType = fapi2::TARGET_TYPE_PROC_CHIP | fapi2::TARGET_TYPE_MEMBUF_CHIP;
const bool ATTR_CHIP_HAS_SBE_PlatInit = true;
enum ATTR_CHIP_HAS_SBE_Enum
{
    ENUM_ATTR_CHIP_HAS_SBE_false = 0,
    ENUM_ATTR_CHIP_HAS_SBE_true = 1,
};
#define ATTR_CHIP_HAS_SBE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_DCM_INSTALLED */
typedef uint8_t ATTR_PROC_DCM_INSTALLED_Type;
const bool ATTR_PROC_DCM_INSTALLED_Privileged = false;
const bool ATTR_PROC_DCM_INSTALLED_InitToZero = false;
const fapi2::TargetType ATTR_PROC_DCM_INSTALLED_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_DCM_INSTALLED_PlatInit = true;
enum ATTR_PROC_DCM_INSTALLED_Enum
{
    ENUM_ATTR_PROC_DCM_INSTALLED_false = 0,
    ENUM_ATTR_PROC_DCM_INSTALLED_true = 1,
};
#define ATTR_PROC_DCM_INSTALLED_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_REGIONS_TO_ENABLE */
typedef uint64_t ATTR_CHIP_REGIONS_TO_ENABLE_Type[32];
const bool ATTR_CHIP_REGIONS_TO_ENABLE_Privileged = false;
const bool ATTR_CHIP_REGIONS_TO_ENABLE_InitToZero = false;
const fapi2::TargetType ATTR_CHIP_REGIONS_TO_ENABLE_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_CHIP_REGIONS_TO_ENABLE_PlatInit = true;
#define ATTR_CHIP_REGIONS_TO_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_EX_L2_SINGLE_MEMBER_ENABLE */
typedef uint32_t ATTR_EX_L2_SINGLE_MEMBER_ENABLE_Type;
const bool ATTR_EX_L2_SINGLE_MEMBER_ENABLE_Privileged = false;
const bool ATTR_EX_L2_SINGLE_MEMBER_ENABLE_InitToZero = false;
const fapi2::TargetType ATTR_EX_L2_SINGLE_MEMBER_ENABLE_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_EX_L2_SINGLE_MEMBER_ENABLE_PlatInit = true;
#define ATTR_EX_L2_SINGLE_MEMBER_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_BOOT_VOLTAGE_VID */
typedef uint32_t ATTR_PROC_BOOT_VOLTAGE_VID_Type;
const bool ATTR_PROC_BOOT_VOLTAGE_VID_Privileged = false;
const bool ATTR_PROC_BOOT_VOLTAGE_VID_InitToZero = false;
const fapi2::TargetType ATTR_PROC_BOOT_VOLTAGE_VID_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_PROC_BOOT_VOLTAGE_VID_PlatInit = true;

/* ATTR_PCI_OSCSWITCH_CONFIG */
typedef uint8_t ATTR_PCI_OSCSWITCH_CONFIG_Type;
const bool ATTR_PCI_OSCSWITCH_CONFIG_Privileged = false;
const bool ATTR_PCI_OSCSWITCH_CONFIG_InitToZero = false;
const fapi2::TargetType ATTR_PCI_OSCSWITCH_CONFIG_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_PCI_OSCSWITCH_CONFIG_PlatInit = true;
#define ATTR_PCI_OSCSWITCH_CONFIG_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_OSCSWITCH_CTL0 */
typedef uint32_t ATTR_OSCSWITCH_CTL0_Type;
const bool ATTR_OSCSWITCH_CTL0_Privileged = false;
const bool ATTR_OSCSWITCH_CTL0_InitToZero = false;
const fapi2::TargetType ATTR_OSCSWITCH_CTL0_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_OSCSWITCH_CTL0_PlatInit = true;
#define ATTR_OSCSWITCH_CTL0_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_OSCSWITCH_CTL1 */
typedef uint8_t ATTR_OSCSWITCH_CTL1_Type;
const bool ATTR_OSCSWITCH_CTL1_Privileged = false;
const bool ATTR_OSCSWITCH_CTL1_InitToZero = false;
const fapi2::TargetType ATTR_OSCSWITCH_CTL1_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_OSCSWITCH_CTL1_PlatInit = true;
#define ATTR_OSCSWITCH_CTL1_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_OSCSWITCH_CTL2 */
typedef uint32_t ATTR_OSCSWITCH_CTL2_Type;
const bool ATTR_OSCSWITCH_CTL2_Privileged = false;
const bool ATTR_OSCSWITCH_CTL2_InitToZero = false;
const fapi2::TargetType ATTR_OSCSWITCH_CTL2_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_OSCSWITCH_CTL2_PlatInit = true;
#define ATTR_OSCSWITCH_CTL2_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_I2C_SLAVE_ADDRESS */
typedef uint8_t ATTR_I2C_SLAVE_ADDRESS_Type;
const bool ATTR_I2C_SLAVE_ADDRESS_Privileged = false;
const bool ATTR_I2C_SLAVE_ADDRESS_InitToZero = false;
const fapi2::TargetType ATTR_I2C_SLAVE_ADDRESS_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_I2C_SLAVE_ADDRESS_PlatInit = true;
#define ATTR_I2C_SLAVE_ADDRESS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_TARGET_SCOMABLE */
typedef uint8_t ATTR_TARGET_SCOMABLE_Type;
const bool ATTR_TARGET_SCOMABLE_Privileged = false;
const bool ATTR_TARGET_SCOMABLE_InitToZero = false;
const fapi2::TargetType ATTR_TARGET_SCOMABLE_TargetType = fapi2::TARGET_TYPE_PROC_CHIP | fapi2::TARGET_TYPE_MEMBUF_CHIP | fapi2::TARGET_TYPE_EX | fapi2::TARGET_TYPE_MCS | fapi2::TARGET_TYPE_XBUS | fapi2::TARGET_TYPE_ABUS | fapi2::TARGET_TYPE_MBA;
const bool ATTR_TARGET_SCOMABLE_PlatInit = true;
enum ATTR_TARGET_SCOMABLE_Enum
{
    ENUM_ATTR_TARGET_SCOMABLE_FALSE = 0,
    ENUM_ATTR_TARGET_SCOMABLE_TRUE = 1,
};

/* ATTR_SIGNED_TEST_8 */
typedef int8_t ATTR_SIGNED_TEST_8_Type;
const bool ATTR_SIGNED_TEST_8_Privileged = false;
const bool ATTR_SIGNED_TEST_8_InitToZero = false;
const fapi2::TargetType ATTR_SIGNED_TEST_8_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_SIGNED_TEST_8_PlatInit = false;
#define ATTR_SIGNED_TEST_8_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SIGNED_TEST_32 */
typedef int32_t ATTR_SIGNED_TEST_32_Type;
const bool ATTR_SIGNED_TEST_32_Privileged = false;
const bool ATTR_SIGNED_TEST_32_InitToZero = false;
const fapi2::TargetType ATTR_SIGNED_TEST_32_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_SIGNED_TEST_32_PlatInit = false;
#define ATTR_SIGNED_TEST_32_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SIGNED_TEST_64 */
typedef int64_t ATTR_SIGNED_TEST_64_Type;
const bool ATTR_SIGNED_TEST_64_Privileged = false;
const bool ATTR_SIGNED_TEST_64_InitToZero = false;
const fapi2::TargetType ATTR_SIGNED_TEST_64_TargetType = fapi2::TARGET_TYPE_PROC_CHIP;
const bool ATTR_SIGNED_TEST_64_PlatInit = false;
#define ATTR_SIGNED_TEST_64_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FUNCTIONAL */
typedef uint8_t ATTR_FUNCTIONAL_Type;
const bool ATTR_FUNCTIONAL_Privileged = false;
const bool ATTR_FUNCTIONAL_InitToZero = false;
const fapi2::TargetType ATTR_FUNCTIONAL_TargetType = fapi2::TARGET_TYPE_DIMM | fapi2::TARGET_TYPE_PROC_CHIP | fapi2::TARGET_TYPE_MEMBUF_CHIP | fapi2::TARGET_TYPE_EX | fapi2::TARGET_TYPE_CORE | fapi2::TARGET_TYPE_EQ | fapi2::TARGET_TYPE_MBA | fapi2::TARGET_TYPE_MCS | fapi2::TARGET_TYPE_XBUS | fapi2::TARGET_TYPE_ABUS;
const bool ATTR_FUNCTIONAL_PlatInit = true;
enum ATTR_FUNCTIONAL_Enum
{
    ENUM_ATTR_FUNCTIONAL_NON_FUNCTIONAL = 0,
    ENUM_ATTR_FUNCTIONAL_FUNCTIONAL = 1,
};
#define ATTR_FUNCTIONAL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_POS */
typedef uint32_t ATTR_POS_Type;
const bool ATTR_POS_Privileged = false;
const bool ATTR_POS_InitToZero = false;
const fapi2::TargetType ATTR_POS_TargetType = fapi2::TARGET_TYPE_PROC_CHIP | fapi2::TARGET_TYPE_MEMBUF_CHIP | fapi2::TARGET_TYPE_DIMM;
const bool ATTR_POS_PlatInit = true;
#define ATTR_POS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SCRATCH_UINT8_1 */
typedef uint8_t ATTR_SCRATCH_UINT8_1_Type;
const bool ATTR_SCRATCH_UINT8_1_Privileged = false;
const bool ATTR_SCRATCH_UINT8_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT8_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT8_1_PlatInit = false;

/* ATTR_SCRATCH_UINT8_2 */
typedef uint8_t ATTR_SCRATCH_UINT8_2_Type;
const bool ATTR_SCRATCH_UINT8_2_Privileged = false;
const bool ATTR_SCRATCH_UINT8_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT8_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT8_2_PlatInit = false;

/* ATTR_SCRATCH_UINT16_1 */
typedef uint16_t ATTR_SCRATCH_UINT16_1_Type;
const bool ATTR_SCRATCH_UINT16_1_Privileged = false;
const bool ATTR_SCRATCH_UINT16_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT16_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT16_1_PlatInit = false;

/* ATTR_SCRATCH_UINT16_2 */
typedef uint16_t ATTR_SCRATCH_UINT16_2_Type;
const bool ATTR_SCRATCH_UINT16_2_Privileged = false;
const bool ATTR_SCRATCH_UINT16_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT16_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT16_2_PlatInit = false;

/* ATTR_SCRATCH_UINT32_1 */
typedef uint32_t ATTR_SCRATCH_UINT32_1_Type;
const bool ATTR_SCRATCH_UINT32_1_Privileged = false;
const bool ATTR_SCRATCH_UINT32_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT32_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT32_1_PlatInit = false;

/* ATTR_SCRATCH_UINT32_2 */
typedef uint32_t ATTR_SCRATCH_UINT32_2_Type;
const bool ATTR_SCRATCH_UINT32_2_Privileged = false;
const bool ATTR_SCRATCH_UINT32_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT32_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT32_2_PlatInit = false;

/* ATTR_SCRATCH_UINT64_1 */
typedef uint64_t ATTR_SCRATCH_UINT64_1_Type;
const bool ATTR_SCRATCH_UINT64_1_Privileged = false;
const bool ATTR_SCRATCH_UINT64_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT64_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT64_1_PlatInit = false;

/* ATTR_SCRATCH_UINT64_2 */
typedef uint64_t ATTR_SCRATCH_UINT64_2_Type;
const bool ATTR_SCRATCH_UINT64_2_Privileged = false;
const bool ATTR_SCRATCH_UINT64_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT64_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT64_2_PlatInit = false;
enum ATTR_SCRATCH_UINT64_2_Enum
{
    ENUM_ATTR_SCRATCH_UINT64_2_VAL_A = 0ULL,
    ENUM_ATTR_SCRATCH_UINT64_2_VAL_B = 5ULL,
    ENUM_ATTR_SCRATCH_UINT64_2_VAL_C = 0xffffffffffffffffULL,
};

/* ATTR_SCRATCH_UINT8_ARRAY_1 */
typedef uint8_t ATTR_SCRATCH_UINT8_ARRAY_1_Type[32];
const bool ATTR_SCRATCH_UINT8_ARRAY_1_Privileged = false;
const bool ATTR_SCRATCH_UINT8_ARRAY_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT8_ARRAY_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT8_ARRAY_1_PlatInit = false;

/* ATTR_SCRATCH_UINT8_ARRAY_2 */
typedef uint8_t ATTR_SCRATCH_UINT8_ARRAY_2_Type[2][3][4];
const bool ATTR_SCRATCH_UINT8_ARRAY_2_Privileged = false;
const bool ATTR_SCRATCH_UINT8_ARRAY_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT8_ARRAY_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT8_ARRAY_2_PlatInit = false;

/* ATTR_SCRATCH_UINT16_ARRAY_1 */
typedef uint16_t ATTR_SCRATCH_UINT16_ARRAY_1_Type[16];
const bool ATTR_SCRATCH_UINT16_ARRAY_1_Privileged = false;
const bool ATTR_SCRATCH_UINT16_ARRAY_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT16_ARRAY_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT16_ARRAY_1_PlatInit = false;

/* ATTR_SCRATCH_UINT16_ARRAY_2 */
typedef uint16_t ATTR_SCRATCH_UINT16_ARRAY_2_Type[2][3][2];
const bool ATTR_SCRATCH_UINT16_ARRAY_2_Privileged = false;
const bool ATTR_SCRATCH_UINT16_ARRAY_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT16_ARRAY_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT16_ARRAY_2_PlatInit = false;

/* ATTR_SCRATCH_UINT32_ARRAY_1 */
typedef uint32_t ATTR_SCRATCH_UINT32_ARRAY_1_Type[8];
const bool ATTR_SCRATCH_UINT32_ARRAY_1_Privileged = false;
const bool ATTR_SCRATCH_UINT32_ARRAY_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT32_ARRAY_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT32_ARRAY_1_PlatInit = false;

/* ATTR_SCRATCH_UINT32_ARRAY_2 */
typedef uint32_t ATTR_SCRATCH_UINT32_ARRAY_2_Type[2][3];
const bool ATTR_SCRATCH_UINT32_ARRAY_2_Privileged = false;
const bool ATTR_SCRATCH_UINT32_ARRAY_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT32_ARRAY_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT32_ARRAY_2_PlatInit = false;

/* ATTR_SCRATCH_UINT64_ARRAY_1 */
typedef uint64_t ATTR_SCRATCH_UINT64_ARRAY_1_Type[4];
const bool ATTR_SCRATCH_UINT64_ARRAY_1_Privileged = false;
const bool ATTR_SCRATCH_UINT64_ARRAY_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT64_ARRAY_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT64_ARRAY_1_PlatInit = false;

/* ATTR_SCRATCH_UINT64_ARRAY_2 */
typedef uint64_t ATTR_SCRATCH_UINT64_ARRAY_2_Type[2][2];
const bool ATTR_SCRATCH_UINT64_ARRAY_2_Privileged = false;
const bool ATTR_SCRATCH_UINT64_ARRAY_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_UINT64_ARRAY_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_UINT64_ARRAY_2_PlatInit = false;
enum ATTR_SCRATCH_UINT64_ARRAY_2_Enum
{
    ENUM_ATTR_SCRATCH_UINT64_ARRAY_2_VAL_A = 0x0123456789abcdefULL,
    ENUM_ATTR_SCRATCH_UINT64_ARRAY_2_VAL_B = 0ULL,
    ENUM_ATTR_SCRATCH_UINT64_ARRAY_2_VAL_C = 0xffffffffffffffffULL,
};

/* ATTR_SCRATCH_INT8_1 */
typedef int8_t ATTR_SCRATCH_INT8_1_Type;
const bool ATTR_SCRATCH_INT8_1_Privileged = false;
const bool ATTR_SCRATCH_INT8_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT8_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT8_1_PlatInit = false;

/* ATTR_SCRATCH_INT8_2 */
typedef int8_t ATTR_SCRATCH_INT8_2_Type;
const bool ATTR_SCRATCH_INT8_2_Privileged = false;
const bool ATTR_SCRATCH_INT8_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT8_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT8_2_PlatInit = false;

/* ATTR_SCRATCH_INT16_1 */
typedef int16_t ATTR_SCRATCH_INT16_1_Type;
const bool ATTR_SCRATCH_INT16_1_Privileged = false;
const bool ATTR_SCRATCH_INT16_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT16_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT16_1_PlatInit = false;

/* ATTR_SCRATCH_INT16_2 */
typedef int16_t ATTR_SCRATCH_INT16_2_Type;
const bool ATTR_SCRATCH_INT16_2_Privileged = false;
const bool ATTR_SCRATCH_INT16_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT16_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT16_2_PlatInit = false;

/* ATTR_SCRATCH_INT32_1 */
typedef int32_t ATTR_SCRATCH_INT32_1_Type;
const bool ATTR_SCRATCH_INT32_1_Privileged = false;
const bool ATTR_SCRATCH_INT32_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT32_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT32_1_PlatInit = false;

/* ATTR_SCRATCH_INT32_2 */
typedef int32_t ATTR_SCRATCH_INT32_2_Type;
const bool ATTR_SCRATCH_INT32_2_Privileged = false;
const bool ATTR_SCRATCH_INT32_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT32_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT32_2_PlatInit = false;

/* ATTR_SCRATCH_INT64_1 */
typedef int64_t ATTR_SCRATCH_INT64_1_Type;
const bool ATTR_SCRATCH_INT64_1_Privileged = false;
const bool ATTR_SCRATCH_INT64_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT64_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT64_1_PlatInit = false;

/* ATTR_SCRATCH_INT64_2 */
typedef int64_t ATTR_SCRATCH_INT64_2_Type;
const bool ATTR_SCRATCH_INT64_2_Privileged = false;
const bool ATTR_SCRATCH_INT64_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT64_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT64_2_PlatInit = false;
enum ATTR_SCRATCH_INT64_2_Enum
{
    ENUM_ATTR_SCRATCH_INT64_2_VAL_A = 0LL,
    ENUM_ATTR_SCRATCH_INT64_2_VAL_B = 5LL,
    ENUM_ATTR_SCRATCH_INT64_2_VAL_C = 0xffffffffffffffffLL,
};

/* ATTR_SCRATCH_INT8_ARRAY_1 */
typedef int8_t ATTR_SCRATCH_INT8_ARRAY_1_Type[32];
const bool ATTR_SCRATCH_INT8_ARRAY_1_Privileged = false;
const bool ATTR_SCRATCH_INT8_ARRAY_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT8_ARRAY_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT8_ARRAY_1_PlatInit = false;

/* ATTR_SCRATCH_INT8_ARRAY_2 */
typedef int8_t ATTR_SCRATCH_INT8_ARRAY_2_Type[2][3][4];
const bool ATTR_SCRATCH_INT8_ARRAY_2_Privileged = false;
const bool ATTR_SCRATCH_INT8_ARRAY_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT8_ARRAY_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT8_ARRAY_2_PlatInit = false;

/* ATTR_SCRATCH_INT16_ARRAY_1 */
typedef int16_t ATTR_SCRATCH_INT16_ARRAY_1_Type[16];
const bool ATTR_SCRATCH_INT16_ARRAY_1_Privileged = false;
const bool ATTR_SCRATCH_INT16_ARRAY_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT16_ARRAY_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT16_ARRAY_1_PlatInit = false;

/* ATTR_SCRATCH_INT16_ARRAY_2 */
typedef int16_t ATTR_SCRATCH_INT16_ARRAY_2_Type[2][3][2];
const bool ATTR_SCRATCH_INT16_ARRAY_2_Privileged = false;
const bool ATTR_SCRATCH_INT16_ARRAY_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT16_ARRAY_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT16_ARRAY_2_PlatInit = false;

/* ATTR_SCRATCH_INT32_ARRAY_1 */
typedef int32_t ATTR_SCRATCH_INT32_ARRAY_1_Type[8];
const bool ATTR_SCRATCH_INT32_ARRAY_1_Privileged = false;
const bool ATTR_SCRATCH_INT32_ARRAY_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT32_ARRAY_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT32_ARRAY_1_PlatInit = false;

/* ATTR_SCRATCH_INT32_ARRAY_2 */
typedef int32_t ATTR_SCRATCH_INT32_ARRAY_2_Type[2][3];
const bool ATTR_SCRATCH_INT32_ARRAY_2_Privileged = false;
const bool ATTR_SCRATCH_INT32_ARRAY_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT32_ARRAY_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT32_ARRAY_2_PlatInit = false;

/* ATTR_SCRATCH_INT64_ARRAY_1 */
typedef int64_t ATTR_SCRATCH_INT64_ARRAY_1_Type[4];
const bool ATTR_SCRATCH_INT64_ARRAY_1_Privileged = false;
const bool ATTR_SCRATCH_INT64_ARRAY_1_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT64_ARRAY_1_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT64_ARRAY_1_PlatInit = false;

/* ATTR_SCRATCH_INT64_ARRAY_2 */
typedef int64_t ATTR_SCRATCH_INT64_ARRAY_2_Type[2][2];
const bool ATTR_SCRATCH_INT64_ARRAY_2_Privileged = false;
const bool ATTR_SCRATCH_INT64_ARRAY_2_InitToZero = false;
const fapi2::TargetType ATTR_SCRATCH_INT64_ARRAY_2_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SCRATCH_INT64_ARRAY_2_PlatInit = false;
enum ATTR_SCRATCH_INT64_ARRAY_2_Enum
{
    ENUM_ATTR_SCRATCH_INT64_ARRAY_2_VAL_A = 0x0123456789abcdefLL,
    ENUM_ATTR_SCRATCH_INT64_ARRAY_2_VAL_B = 0LL,
    ENUM_ATTR_SCRATCH_INT64_ARRAY_2_VAL_C = 0xffffffffffffffffLL,
};

/* ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8 */
typedef uint8_t ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8_Type[1][3][5];
const bool ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8_Privileged = false;
const bool ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8_InitToZero = false;
const fapi2::TargetType ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8_PlatInit = true;

/* ATTR_EXECUTION_PLATFORM */
typedef uint8_t ATTR_EXECUTION_PLATFORM_Type;
const bool ATTR_EXECUTION_PLATFORM_Privileged = false;
const bool ATTR_EXECUTION_PLATFORM_InitToZero = false;
const fapi2::TargetType ATTR_EXECUTION_PLATFORM_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_EXECUTION_PLATFORM_PlatInit = true;
enum ATTR_EXECUTION_PLATFORM_Enum
{
    ENUM_ATTR_EXECUTION_PLATFORM_HOST = 0x01,
    ENUM_ATTR_EXECUTION_PLATFORM_FSP = 0x02,
    ENUM_ATTR_EXECUTION_PLATFORM_OCC = 0x03,
};
#define ATTR_EXECUTION_PLATFORM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_IS_SIMULATION */
typedef uint8_t ATTR_IS_SIMULATION_Type;
const bool ATTR_IS_SIMULATION_Privileged = false;
const bool ATTR_IS_SIMULATION_InitToZero = false;
const fapi2::TargetType ATTR_IS_SIMULATION_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_IS_SIMULATION_PlatInit = true;
#define ATTR_IS_SIMULATION_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MNFG_FLAGS */
typedef uint64_t ATTR_MNFG_FLAGS_Type;
const bool ATTR_MNFG_FLAGS_Privileged = false;
const bool ATTR_MNFG_FLAGS_InitToZero = false;
const fapi2::TargetType ATTR_MNFG_FLAGS_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_MNFG_FLAGS_PlatInit = true;
enum ATTR_MNFG_FLAGS_Enum
{
    ENUM_ATTR_MNFG_FLAGS_MNFG_NO_FLAG                        = 0x0000000000000000ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_THRESHOLDS                     = 0x0000000000000001ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_AVP_ENABLE                     = 0x0000000000000002ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_HDAT_AVP_ENABLE                = 0x0000000000000004ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_SRC_TERM                       = 0x0000000000000008ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_IPL_MEMORY_CE_CHECKING         = 0x0000000000000010ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_FAST_BACKGROUND_SCRUB          = 0x0000000000000020ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_TEST_DRAM_REPAIRS              = 0x0000000000000040ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_DISABLE_DRAM_REPAIRS           = 0x0000000000000080ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_ENABLE_EXHAUSTIVE_PATTERN_TEST = 0x0000000000000100ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_ENABLE_STANDARD_PATTERN_TEST   = 0x0000000000000200ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_ENABLE_MINIMUM_PATTERN_TEST    = 0x0000000000000400ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_DISABLE_FABRIC_eREPAIR         = 0x0000000000000800ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_DISABLE_MEMORY_eREPAIR         = 0x0000000000001000ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_FABRIC_DEPLOY_LANE_SPARES      = 0x0000000000002000ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_DMI_DEPLOY_LANE_SPARES         = 0x0000000000004000ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_PSI_DIAGNOSTIC                 = 0x0000000000008000ULL,
    ENUM_ATTR_MNFG_FLAGS_MNFG_BRAZOS_WRAP_CONFIG             = 0x0000000000010000ULL,
};
#define ATTR_MNFG_FLAGS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_IS_MPIPL */
typedef uint8_t ATTR_IS_MPIPL_Type;
const bool ATTR_IS_MPIPL_Privileged = false;
const bool ATTR_IS_MPIPL_InitToZero = false;
const fapi2::TargetType ATTR_IS_MPIPL_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_IS_MPIPL_PlatInit = true;

/* ATTR_PROC_EPS_TABLE_TYPE */
typedef uint8_t ATTR_PROC_EPS_TABLE_TYPE_Type;
const bool ATTR_PROC_EPS_TABLE_TYPE_Privileged = false;
const bool ATTR_PROC_EPS_TABLE_TYPE_InitToZero = false;
const fapi2::TargetType ATTR_PROC_EPS_TABLE_TYPE_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_PROC_EPS_TABLE_TYPE_PlatInit = true;
enum ATTR_PROC_EPS_TABLE_TYPE_Enum
{
    ENUM_ATTR_PROC_EPS_TABLE_TYPE_EPS_TYPE_LE = 0x01,
    ENUM_ATTR_PROC_EPS_TABLE_TYPE_EPS_TYPE_HE = 0x02,
    ENUM_ATTR_PROC_EPS_TABLE_TYPE_EPS_TYPE_1S = 0x03,
};
#define ATTR_PROC_EPS_TABLE_TYPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FABRIC_PUMP_MODE */
typedef uint8_t ATTR_PROC_FABRIC_PUMP_MODE_Type;
const bool ATTR_PROC_FABRIC_PUMP_MODE_Privileged = false;
const bool ATTR_PROC_FABRIC_PUMP_MODE_InitToZero = false;
const fapi2::TargetType ATTR_PROC_FABRIC_PUMP_MODE_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_PROC_FABRIC_PUMP_MODE_PlatInit = true;
enum ATTR_PROC_FABRIC_PUMP_MODE_Enum
{
    ENUM_ATTR_PROC_FABRIC_PUMP_MODE_MODE1 = 0x01,
    ENUM_ATTR_PROC_FABRIC_PUMP_MODE_MODE2 = 0x02,
};
#define ATTR_PROC_FABRIC_PUMP_MODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_X_BUS_WIDTH */
typedef uint8_t ATTR_PROC_X_BUS_WIDTH_Type;
const bool ATTR_PROC_X_BUS_WIDTH_Privileged = false;
const bool ATTR_PROC_X_BUS_WIDTH_InitToZero = false;
const fapi2::TargetType ATTR_PROC_X_BUS_WIDTH_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_PROC_X_BUS_WIDTH_PlatInit = true;
enum ATTR_PROC_X_BUS_WIDTH_Enum
{
    ENUM_ATTR_PROC_X_BUS_WIDTH_W4BYTE = 0x01,
    ENUM_ATTR_PROC_X_BUS_WIDTH_W8BYTE = 0x02,
};
#define ATTR_PROC_X_BUS_WIDTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_ALL_MCS_IN_INTERLEAVING_GROUP */
typedef uint8_t ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_Type;
const bool ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_Privileged = false;
const bool ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_InitToZero = false;
const fapi2::TargetType ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_PlatInit = true;
#define ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_NEST_FREQ_MHZ */
typedef uint32_t ATTR_NEST_FREQ_MHZ_Type;
const bool ATTR_NEST_FREQ_MHZ_Privileged = false;
const bool ATTR_NEST_FREQ_MHZ_InitToZero = false;
const fapi2::TargetType ATTR_NEST_FREQ_MHZ_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_NEST_FREQ_MHZ_PlatInit = true;

/* ATTR_BOOT_FREQ_MHZ */
typedef uint32_t ATTR_BOOT_FREQ_MHZ_Type;
const bool ATTR_BOOT_FREQ_MHZ_Privileged = false;
const bool ATTR_BOOT_FREQ_MHZ_InitToZero = false;
const fapi2::TargetType ATTR_BOOT_FREQ_MHZ_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_BOOT_FREQ_MHZ_PlatInit = true;

/* ATTR_EX_GARD_BITS */
typedef uint32_t ATTR_EX_GARD_BITS_Type;
const bool ATTR_EX_GARD_BITS_Privileged = false;
const bool ATTR_EX_GARD_BITS_InitToZero = false;
const fapi2::TargetType ATTR_EX_GARD_BITS_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_EX_GARD_BITS_PlatInit = true;

/* ATTR_DISABLE_I2C_ACCESS */
typedef uint8_t ATTR_DISABLE_I2C_ACCESS_Type;
const bool ATTR_DISABLE_I2C_ACCESS_Privileged = false;
const bool ATTR_DISABLE_I2C_ACCESS_InitToZero = false;
const fapi2::TargetType ATTR_DISABLE_I2C_ACCESS_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_DISABLE_I2C_ACCESS_PlatInit = true;
#define ATTR_DISABLE_I2C_ACCESS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PIB_I2C_REFCLOCK */
typedef uint32_t ATTR_PIB_I2C_REFCLOCK_Type;
const bool ATTR_PIB_I2C_REFCLOCK_Privileged = false;
const bool ATTR_PIB_I2C_REFCLOCK_InitToZero = false;
const fapi2::TargetType ATTR_PIB_I2C_REFCLOCK_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_PIB_I2C_REFCLOCK_PlatInit = true;

/* ATTR_PIB_I2C_NEST_PLL */
typedef uint32_t ATTR_PIB_I2C_NEST_PLL_Type;
const bool ATTR_PIB_I2C_NEST_PLL_Privileged = false;
const bool ATTR_PIB_I2C_NEST_PLL_InitToZero = false;
const fapi2::TargetType ATTR_PIB_I2C_NEST_PLL_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_PIB_I2C_NEST_PLL_PlatInit = true;

/* ATTR_SBE_IMAGE_OFFSET */
typedef uint32_t ATTR_SBE_IMAGE_OFFSET_Type;
const bool ATTR_SBE_IMAGE_OFFSET_Privileged = false;
const bool ATTR_SBE_IMAGE_OFFSET_InitToZero = false;
const fapi2::TargetType ATTR_SBE_IMAGE_OFFSET_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_SBE_IMAGE_OFFSET_PlatInit = true;

/* ATTR_BOOT_VOLTAGE */
typedef uint32_t ATTR_BOOT_VOLTAGE_Type;
const bool ATTR_BOOT_VOLTAGE_Privileged = false;
const bool ATTR_BOOT_VOLTAGE_InitToZero = false;
const fapi2::TargetType ATTR_BOOT_VOLTAGE_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_BOOT_VOLTAGE_PlatInit = true;

/* ATTR_RISK_LEVEL */
typedef uint32_t ATTR_RISK_LEVEL_Type;
const bool ATTR_RISK_LEVEL_Privileged = false;
const bool ATTR_RISK_LEVEL_InitToZero = false;
const fapi2::TargetType ATTR_RISK_LEVEL_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_RISK_LEVEL_PlatInit = true;
enum ATTR_RISK_LEVEL_Enum
{
    ENUM_ATTR_RISK_LEVEL_RL0 = 0x000,
    ENUM_ATTR_RISK_LEVEL_RL100 = 0x100,
};
#define ATTR_RISK_LEVEL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_REFCLOCK_RCVR_TERM */
typedef uint8_t ATTR_PROC_REFCLOCK_RCVR_TERM_Type;
const bool ATTR_PROC_REFCLOCK_RCVR_TERM_Privileged = false;
const bool ATTR_PROC_REFCLOCK_RCVR_TERM_InitToZero = false;
const fapi2::TargetType ATTR_PROC_REFCLOCK_RCVR_TERM_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_PROC_REFCLOCK_RCVR_TERM_PlatInit = true;
#define ATTR_PROC_REFCLOCK_RCVR_TERM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PCI_REFCLOCK_RCVR_TERM */
typedef uint8_t ATTR_PCI_REFCLOCK_RCVR_TERM_Type;
const bool ATTR_PCI_REFCLOCK_RCVR_TERM_Privileged = false;
const bool ATTR_PCI_REFCLOCK_RCVR_TERM_InitToZero = false;
const fapi2::TargetType ATTR_PCI_REFCLOCK_RCVR_TERM_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_PCI_REFCLOCK_RCVR_TERM_PlatInit = true;
#define ATTR_PCI_REFCLOCK_RCVR_TERM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM */
typedef uint8_t ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM_Type;
const bool ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM_Privileged = false;
const bool ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM_InitToZero = false;
const fapi2::TargetType ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM_PlatInit = true;
#define ATTR_MEMB_DMI_REFCLOCK_RCVR_TERM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM */
typedef uint8_t ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM_Type;
const bool ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM_Privileged = false;
const bool ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM_InitToZero = false;
const fapi2::TargetType ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM_PlatInit = true;
#define ATTR_MEMB_DDR_REFCLOCK_RCVR_TERM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MEM_FILTER_PLL_SOURCE */
typedef uint8_t ATTR_MEM_FILTER_PLL_SOURCE_Type;
const bool ATTR_MEM_FILTER_PLL_SOURCE_Privileged = false;
const bool ATTR_MEM_FILTER_PLL_SOURCE_InitToZero = false;
const fapi2::TargetType ATTR_MEM_FILTER_PLL_SOURCE_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_MEM_FILTER_PLL_SOURCE_PlatInit = true;
enum ATTR_MEM_FILTER_PLL_SOURCE_Enum
{
    ENUM_ATTR_MEM_FILTER_PLL_SOURCE_PROC_REFCLK = 0x0,
    ENUM_ATTR_MEM_FILTER_PLL_SOURCE_PCI_REFCLK = 0x1,
};
#define ATTR_MEM_FILTER_PLL_SOURCE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MULTI_SCOM_BUFFER_MAX_SIZE */
typedef uint64_t ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_Type;
const bool ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_Privileged = false;
const bool ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_InitToZero = false;
const fapi2::TargetType ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_PlatInit = true;
enum ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_Enum
{
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_1KB   = 0x0000000000000400ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_2KB   = 0x0000000000000800ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_4KB   = 0x0000000000001000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_8KB   = 0x0000000000002000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_16KB  = 0x0000000000004000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_32KB  = 0x0000000000008000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_64KB  = 0x0000000000010000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_128KB = 0x0000000000020000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_256KB = 0x0000000000040000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_512KB = 0x0000000000080000ULL,
    ENUM_ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_MULTI_SCOM_BUFFER_SIZE_1MB   = 0x0000000000100000ULL,
};
#define ATTR_MULTI_SCOM_BUFFER_MAX_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_RECONFIGURE_LOOP */
typedef uint8_t ATTR_RECONFIGURE_LOOP_Type;
const bool ATTR_RECONFIGURE_LOOP_Privileged = false;
const bool ATTR_RECONFIGURE_LOOP_InitToZero = false;
const fapi2::TargetType ATTR_RECONFIGURE_LOOP_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_RECONFIGURE_LOOP_PlatInit = false;
enum ATTR_RECONFIGURE_LOOP_Enum
{
    ENUM_ATTR_RECONFIGURE_LOOP_DECONFIGURE      = 0x1,
    ENUM_ATTR_RECONFIGURE_LOOP_BAD_DQ_BIT_SET   = 0x2,
};

/* ATTR_PM_HWP_ATTR_VERSION */
typedef uint32_t ATTR_PM_HWP_ATTR_VERSION_Type;
const bool ATTR_PM_HWP_ATTR_VERSION_Privileged = false;
const bool ATTR_PM_HWP_ATTR_VERSION_InitToZero = false;
const fapi2::TargetType ATTR_PM_HWP_ATTR_VERSION_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_PM_HWP_ATTR_VERSION_PlatInit = true;

/* ATTR_REDUNDANT_CLOCKS */
typedef uint8_t ATTR_REDUNDANT_CLOCKS_Type;
const bool ATTR_REDUNDANT_CLOCKS_Privileged = false;
const bool ATTR_REDUNDANT_CLOCKS_InitToZero = false;
const fapi2::TargetType ATTR_REDUNDANT_CLOCKS_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_REDUNDANT_CLOCKS_PlatInit = true;
#define ATTR_REDUNDANT_CLOCKS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MFG_TRACE_ENABLE */
typedef uint8_t ATTR_MFG_TRACE_ENABLE_Type;
const bool ATTR_MFG_TRACE_ENABLE_Privileged = false;
const bool ATTR_MFG_TRACE_ENABLE_InitToZero = false;
const fapi2::TargetType ATTR_MFG_TRACE_ENABLE_TargetType = fapi2::TARGET_TYPE_SYSTEM;
const bool ATTR_MFG_TRACE_ENABLE_PlatInit = true;
#define ATTR_MFG_TRACE_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_UNIT_POS */
typedef uint8_t ATTR_CHIP_UNIT_POS_Type;
const bool ATTR_CHIP_UNIT_POS_Privileged = false;
const bool ATTR_CHIP_UNIT_POS_InitToZero = false;
const fapi2::TargetType ATTR_CHIP_UNIT_POS_TargetType = fapi2::TARGET_TYPE_CORE | fapi2::TARGET_TYPE_EQ | fapi2::TARGET_TYPE_MBA | fapi2::TARGET_TYPE_MCS | fapi2::TARGET_TYPE_MCA | fapi2::TARGET_TYPE_MCBIST | fapi2::TARGET_TYPE_MI | fapi2::TARGET_TYPE_DMI | fapi2::TARGET_TYPE_NV | fapi2::TARGET_TYPE_SBE | fapi2::TARGET_TYPE_PPE | fapi2::TARGET_TYPE_PEC | fapi2::TARGET_TYPE_PHB | fapi2::TARGET_TYPE_PERV | fapi2::TARGET_TYPE_EX;
const bool ATTR_CHIP_UNIT_POS_PlatInit = true;
#define ATTR_CHIP_UNIT_POS_SETMACRO ATTRIBUTE_NOT_WRITABLE

}

#endif
