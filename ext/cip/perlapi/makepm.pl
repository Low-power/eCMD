#!/usr/bin/perl
# File makepm.pl created by Chris Engel
# $Header$


my $curdir = ".";

#functions to ignore in parsing <ext>ClientPerlapi.H because they are hand generated in ecmdClientPerlApi.C
my @ignores = qw( initDll cleanup ecmdConfigLooperNext InitExtension ecmdCommandArgs ecmdEnablePerlSafeMode ecmdDisablePerlSafeMode );
my $ignore_re = join '|', @ignores;

my $printout;
my $DllFnTable;
my @enumtable;

if ($ARGV[0] ne "ecmd") {
  open IN, "${curdir}/../ext/$ARGV[0]/perlapi/$ARGV[0]ClientPerlapi.H" or die "Could not find $ARGV[0]ClientPerlapi.H: $!\n";
} else {
  open IN, "${curdir}/$ARGV[0]ClientPerlapi.H" or die "Could not find $ARGV[0]ClientPerlapi.H: $!\n";
}
open OUT, ">${curdir}/$ARGV[0]ClientPerlapiFunc.C" or die $!;


print OUT "/* The following has been auto-generated by makepm.pl */\n\n";

print OUT "#include <string.h>\n";
print OUT "#include <stdio.h>\n";
print OUT "#include <ctype.h>\n";
print OUT "\n";

print OUT "#include <ecmdClientCapi.H>\n";
print OUT "#include <ecmdReturnCodes.H>\n";
print OUT "#include <ecmdUtils.H>\n";
print OUT "#include <ecmdSharedUtils.H>\n";
print OUT "#include <ecmdClientPerlapi.H>\n";
if ($ARGV[0] ne "ecmd") {
  print OUT "#include <$ARGV[0]ClientPerlapi.H>\n";
  print OUT "#include <$ARGV[0]ClientCapi.H>\n";
}
print OUT "\n";


#parse file spec'd by $ARGV[0]
while (<IN>) {
    if (/^\s+(uint32_t|std::string|void|bool|int)/) {
	
	next if (/$ignore_re/o);

	chomp; chop;  
	my ($func, $args) = split /\(|\)/ , $_;

	my ($space, $type, $funcname) = split /\s+/, $func;
	my @argnames = split /,/ , $args;

        #remove the default initializations
        foreach my $i (0..$#argnames) {
            if ($argnames[$i] =~ /=/) {
              $argnames[$i] =~ s/=.*//;
            }
        }
        $" = ",";

	my $argstring;
	my $typestring;
        my $tmptypestring;
	foreach my $curarg (@argnames) {

	    my @argsplit = split /\s+/, $curarg;

	    my @typeargs = @argsplit[0..$#argsplit-1];
	    $tmptypestring = "@typeargs";

	    my $tmparg = $argsplit[-1];
	    if ($tmparg =~ /\[\]$/) {
		chop $tmparg; chop $tmparg;
		$tmptypestring .= "[]";
	    }

	    $typestring .= $tmptypestring . ", ";
	    $argstring .= $tmparg . ", ";
	}

	chop ($typestring, $argstring);
	chop ($typestring, $argstring);


        if ($type eq "void") {
          print OUT "$type $ARGV[0]ClientPerlapi::$funcname(@argnames) { \n";
          print OUT "  ::$funcname($argstring);\n";
          print OUT "}\n\n";
        } elsif (($type eq "uint32_t") || ($type eq "int")) {
          print OUT "$type $ARGV[0]ClientPerlapi::$funcname(@argnames) { \n";
          print OUT "  $type rc = ::$funcname($argstring);\n";
          print OUT "  ecmdPerlInterfaceErrorCheck(rc);\n";
          print OUT "  return rc;\n";
          print OUT "}\n\n";
        } else {
          print OUT "$type $ARGV[0]ClientPerlapi::$funcname(@argnames) { \n";
          print OUT "  return ::$funcname($argstring);\n";
          print OUT "}\n\n";
        }


    }

}
close IN;

print OUT "/* The previous has been auto-generated by makepm.pl */\n";

close OUT;  #<ext>ClientPerlapiFunc.C

