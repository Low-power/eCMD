// fapiAttributeIds.H
// This file is generated by perl script fapiParseAttributeInfo.pl

#ifndef FAPIATTRIBUTEIDS_H_
#define FAPIATTRIBUTEIDS_H_

namespace fapi
{

/**
 * @brief Enumeration of attribute IDs
 */
enum AttributeId
{
    ATTR_L2_R_T0_EPS = 0x04fbe20,
    ATTR_L2_R_T1_EPS = 0x5e93be1,
    ATTR_L2_R_T2_EPS = 0x4b97680,
    ATTR_L2_FORCE_R_T2_EPS = 0xa14bbb4,
    ATTR_L2_W_EPS = 0x250d7d8,
    ATTR_L3_R_T0_EPS = 0x1867bfc,
    ATTR_L3_R_T1_EPS = 0x397b2f6,
    ATTR_L3_R_T2_EPS = 0x421f4dc,
    ATTR_L3_FORCE_R_T2_EPS = 0x518c8ed,
    ATTR_L3_W_EPS = 0xaa22424,
    ATTR_CHIP_ID = 0xca771ad,
    ATTR_NAME = 0xb91b1b8,
    ATTR_EC = 0x76cb47d,
    ATTR_FSI_GP_REG_SCOM_ACCESS = 0x2171f23,
    ATTR_FABRIC_NODE_ID = 0xe75987b,
    ATTR_FABRIC_CHIP_ID = 0xa631e7e,
    ATTR_CHIP_HAS_SBE = 0x520b948,
    ATTR_PROC_DCM_INSTALLED = 0xce9d606,
    ATTR_CHIP_EC_FEATURE_TEST1 = 0x17874c2,
    ATTR_CHIP_EC_FEATURE_TEST2 = 0x45c55e0,
    ATTR_CEN_DQ_TO_DIMM_CONN_DQ = 0x7814503,
    ATTR_MBA_PORT = 0xe91fb12,
    ATTR_MBA_DIMM = 0x4f5f0b0,
    ATTR_FREQ_PROC_REFCLOCK = 0x9d1850e,
    ATTR_FREQ_MEM_REFCLOCK = 0x24d5979,
    ATTR_FREQ_CORE_FLOOR = 0x932ad70,
    ATTR_FREQ_PB = 0x76c06c3,
    ATTR_FREQ_A = 0x244778d,
    ATTR_FREQ_X = 0x3908b77,
    ATTR_MVPD_IVRM_CALIBRATION = 0x467109f,
    ATTR_MVPD_CPM_CALIBRATION = 0x73d5768,
    ATTR_PM_POWER_PROXY_TRACE_TIMER = 0x4afbe91,
    ATTR_PM_PPT_TIMER_MATCH_VALUE = 0xe6115ed,
    ATTR_PM_PPT_TIMER_TICK = 0x1abf241,
    ATTR_PM_AISS_TIMEOUT = 0xfb08279,
    ATTR_PM_PSTATE_STEPSIZE = 0x067383f,
    ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE = 0x62d0b43,
    ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE = 0x9f45c20,
    ATTR_PM_PMC_HANGPULSE_DIVIDER = 0xe990f9e,
    ATTR_PM_PVSAFE_PSTATE = 0x88bb957,
    ATTR_PM_SPIVID_FRAME_SIZE = 0x9664cfa,
    ATTR_PM_SPIVID_IN_DELAY_FRAME1 = 0xbf66b13,
    ATTR_PM_SPIVID_IN_DELAY_FRAME2 = 0xe33f64d,
    ATTR_PM_SPIVID_CLOCK_POLARITY = 0x8c1049e,
    ATTR_PM_SPIVID_CLOCK_PHASE = 0x4d446f0,
    ATTR_PM_SPIVID_CLOCK_DIVIDER = 0xd98ec14,
    ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS = 0xec24d74,
    ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE = 0xe2d10c2,
    ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE = 0xd26494a,
    ATTR_PM_SPIVID_INTER_RETRY_DELAY = 0x205484c,
    ATTR_PM_SPIVID_CRC_GEN_ENABLE = 0x03a0b7c,
    ATTR_PM_SPIVID_CRC_CHECK_ENABLE = 0x5aeedf6,
    ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE = 0xcd05499,
    ATTR_PM_SPIVID_MAX_RETRIES = 0xc66fa35,
    ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES = 0xacd7bfc,
    ATTR_PM_OCC_HEARTBEAT_TIME = 0x8798284,
    ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT = 0x4a4a339,
    ATTR_PM_SLEEP_ENTRY = 0xddda241,
    ATTR_PM_SLEEP_EXIT = 0x8afeedb,
    ATTR_PM_SLEEP_TYPE = 0x893f5f8,
    ATTR_PM_WINKLE_TYPE = 0xb5692a7,
    ATTR_PM_PFET_POWERUP_CORE_DELAY0 = 0x76b51f4,
    ATTR_PM_PFET_POWERUP_CORE_DELAY1 = 0x6e20290,
    ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE = 0x47ecf0d,
    ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE = 0x8f922bf,
    ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT = 0x372ba4c,
    ATTR_PM_PFET_POWERDOWN_CORE_DELAY0 = 0x37f1308,
    ATTR_PM_PFET_POWERDOWN_CORE_DELAY1 = 0xb2fd6b6,
    ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE = 0xe58b1a8,
    ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE = 0x0a5e1e6,
    ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT = 0xd29c3a0,
    ATTR_PM_PFET_POWERUP_ECO_DELAY0 = 0x2d642da,
    ATTR_PM_PFET_POWERUP_ECO_DELAY1 = 0x659f781,
    ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE = 0x150659a,
    ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE = 0xa4cd70d,
    ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT = 0x86f288f,
    ATTR_PM_PFET_POWERDOWN_ECO_DELAY0 = 0xf9b7b7f,
    ATTR_PM_PFET_POWERDOWN_ECO_DELAY1 = 0xbabe6fb,
    ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE = 0xd441e4d,
    ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE = 0xe9c0d5e,
    ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT = 0x2bfb3d4,
    ATTR_PM_PSTATE0_FREQUENCY = 0xec1474c,
    ATTR_PM_IVRMS_ENABLED = 0xf78935d,
    ATTR_PM_SAFE_PSTATE = 0xb9d303a,
    ATTR_PM_RESONANT_CLOCK_ENABLE = 0x95f176b,
    ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE = 0x08ab787,
    ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE = 0x060a42d,
    ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE = 0xf9bf608,
    ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE = 0xe4e4353,
    ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE = 0xd25870a,
    ATTR_PM_SPIPSS_FRAME_SIZE = 0x097f45d,
    ATTR_PM_SPIPSS_OUT_COUNT = 0x77c1636,
    ATTR_PM_SPIPSS_IN_DELAY = 0x7da6bbe,
    ATTR_PM_SPIPSS_IN_COUNT = 0x895b645,
    ATTR_PM_SPIPSS_CLOCK_POLARITY = 0x3f0a8e0,
    ATTR_PM_SPIPSS_CLOCK_PHASE = 0x5e21a9f,
    ATTR_PM_SPIPSS_CLOCK_DIVIDER = 0xd2fed1a,
    ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING = 0xf684924,
    ATTR_PM_SPIPSS_INTER_FRAME_DELAY = 0x8dfc09e,
    ATTR_PM_PBAX_RCV_RESERV_TIMEOUT = 0x603d1f5,
    ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE = 0x6348b8d,
    ATTR_PM_PBAX_SND_RETRY_THRESHOLD = 0x534ec4c,
    ATTR_PM_PBAX_SND_RESERV_TIMEOUT = 0x6908d32,
    ATTR_PM_SPWUP_FSP = 0x8ece29b,
    ATTR_PM_SPWUP_OCC = 0xba10908,
    ATTR_PM_SPWUP_PHYP = 0xdf86041,
    ATTR_PM_EXTERNAL_VRM_STEPSIZE = 0x912a82e,
    ATTR_PM_EXTERNAL_VRM_STEPDELAY = 0x842449e,
    ATTR_PM_PSTATE_UNDERVOLTING_MINIMUM = 0xe751858,
    ATTR_PM_PSTATE_UNDERVOLTING_MAXIMUM = 0xdae6fdf,
    ATTR_PM_SPIVID_FREQUENCY = 0xd987528,
    ATTR_PM_SPIVID_PORT_ENABLE = 0xec163bf,
    ATTR_PM_SAFE_FREQUENCY = 0x87bf0e4,
    ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY = 0x328d622,
    ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY = 0xcd2a836,
    ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY = 0xd933142,
    ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY = 0xd4c48bf,
    ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY = 0xf850a54,
    ATTR_PM_SPIPSS_FREQUENCY = 0xe82d64a,
    ATTR_PM_APSS_CHIP_SELECT = 0x13fd1b6,
    ATTR_PM_PBAX_NODEID = 0xcef178c,
    ATTR_PM_PBAX_CHIPID = 0x83d6f07,
    ATTR_PM_PBAX_BRDCST_ID_VECTOR = 0x1de28ed,
    ATTR_PROC_R_LOADLINE = 0xe78a4fc,
    ATTR_PROC_R_DISTLOSS = 0xec87660,
    ATTR_PROC_VRM_VOFFSET = 0x51b80da,
    ATTR_FREQ_CORE_MAX = 0xf3a2378,
    ATTR_MVPD_FREQ_CORE_NOMINAL = 0xe39cffa,
    ATTR_SCRATCH_UINT8_1 = 0xd16a035,
    ATTR_SCRATCH_UINT8_2 = 0xd53bc45,
    ATTR_SCRATCH_UINT32_1 = 0x6e35711,
    ATTR_SCRATCH_UINT32_2 = 0xb6b04cf,
    ATTR_SCRATCH_UINT64_1 = 0x97c0c12,
    ATTR_SCRATCH_UINT64_2 = 0xa09fac0,
    ATTR_SCRATCH_UINT8_ARRAY_1 = 0x4b2b986,
    ATTR_SCRATCH_UINT8_ARRAY_2 = 0x466dcc2,
    ATTR_SCRATCH_UINT32_ARRAY_1 = 0x330cac1,
    ATTR_SCRATCH_UINT32_ARRAY_2 = 0x9c880f8,
    ATTR_SCRATCH_UINT64_ARRAY_1 = 0x14d36df,
    ATTR_SCRATCH_UINT64_ARRAY_2 = 0x065e855,
    ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8 = 0x2588335,
    ATTR_EXECUTION_PLATFORM = 0x8aa85d5,
    ATTR_IS_SIMULATION = 0x5e8e617,
    ATTR_PROC_EPS_TABLE_TYPE = 0x132602b,
    ATTR_PROC_FABRIC_PUMP_MODE = 0x138ee84,
    ATTR_PROC_X_BUS_WIDTH = 0x7a48d6f,
    ATTR_ALL_MCS_IN_INTERLEAVING_GROUP = 0x1f8d4c1,
    ATTR_CHIP_UNIT_POS = 0x07f067a,
    ATTR_EI_BUS_RX_MSB_LSB_SWAP = 0x3e4ccbc,
    ATTR_EI_BUS_TX_MSB_LSB_SWAP = 0x524628a,
    ATTR_SPD_DRAM_DEVICE_TYPE = 0xdbe36bd,
    ATTR_SPD_MODULE_TYPE = 0xd4e4240,
    ATTR_SPD_SDRAM_BANKS = 0x7ffe67a,
    ATTR_SPD_SDRAM_DENSITY = 0x37a6e4c,
    ATTR_SPD_SDRAM_ROWS = 0x12caefe,
    ATTR_SPD_SDRAM_COLUMNS = 0x74faa45,
    ATTR_SPD_MODULE_NOMINAL_VOLTAGE = 0x73f1064,
    ATTR_SPD_NUM_RANKS = 0x7dbc67a,
    ATTR_SPD_DRAM_WIDTH = 0x18080bc,
    ATTR_SPD_MODULE_MEMORY_BUS_WIDTH = 0x0e50e1e,
    ATTR_SPD_FTB_DIVIDEND = 0xa130eef,
    ATTR_SPD_FTB_DIVISOR = 0x9fb7509,
    ATTR_SPD_MTB_DIVIDEND = 0xc20ff51,
    ATTR_SPD_MTB_DIVISOR = 0x9e26625,
    ATTR_SPD_TCKMIN = 0x896919f,
    ATTR_SPD_CAS_LATENCIES_SUPPORTED = 0x88189b9,
    ATTR_SPD_TAAMIN = 0x0e03b4b,
    ATTR_SPD_TWRMIN = 0x56daf14,
    ATTR_SPD_TRCDMIN = 0x34144b7,
    ATTR_SPD_TRRDMIN = 0xd0aa657,
    ATTR_SPD_TRPMIN = 0x1884230,
    ATTR_SPD_TRASMIN = 0x2ce2f7c,
    ATTR_SPD_TRCMIN = 0x830e82e,
    ATTR_SPD_TRFCMIN = 0x4114c71,
    ATTR_SPD_TWTRMIN = 0x67f96e5,
    ATTR_SPD_TRTPMIN = 0xde22d98,
    ATTR_SPD_TFAWMIN = 0x5e01ec7,
    ATTR_SPD_SDRAM_OPTIONAL_FEATURES = 0x431c54b,
    ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS = 0x4f8a5c4,
    ATTR_SPD_MODULE_THERMAL_SENSOR = 0x1b699f8,
    ATTR_SPD_SDRAM_DEVICE_TYPE = 0xb60bcfe,
    ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING = 0x335c15a,
    ATTR_SPD_SDRAM_DIE_COUNT = 0x1fbf83f,
    ATTR_SPD_FINE_OFFSET_TCKMIN = 0xc53b45a,
    ATTR_SPD_FINE_OFFSET_TAAMIN = 0xdfcb8b0,
    ATTR_SPD_FINE_OFFSET_TRCDMIN = 0xf5ac3d6,
    ATTR_SPD_FINE_OFFSET_TRPMIN = 0x8c09870,
    ATTR_SPD_FINE_OFFSET_TRCMIN = 0xd06543f,
    ATTR_SPD_NUM_OF_REGISTERS_USED_ON_RDIMM = 0x39fa001,
    ATTR_SPD_MODULE_SPECIFIC_SECTION = 0x5eb47a9,
    ATTR_SPD_MODULE_ID_MODULE_MANUFACTURERS_JEDEC_ID_CODE = 0x3398112,
    ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_LOCATION = 0xa5f3615,
    ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_DATE = 0x343bbe2,
    ATTR_SPD_MODULE_ID_MODULE_SERIAL_NUMBER = 0x82f1f13,
    ATTR_SPD_CYCLICAL_REDUNDANCY_CODE = 0x467287b,
    ATTR_SPD_MODULE_PART_NUMBER = 0x552cdb1,
    ATTR_SPD_MODULE_REVISION_CODE = 0x1d93652,
    ATTR_SPD_DRAM_MANUFACTURER_JEDEC_ID_CODE = 0x44a6f7c,
    ATTR_SPD_BAD_DQ_DATA = 0x64cb9e3,
    ATTR_MSS_VOLT = 0xca0aeab,
    ATTR_MSS_FREQ = 0x5409a94,
    ATTR_MSS_DIMM_MFG_ID_CODE = 0xa9d4450,
    ATTR_MSS_BAD_BIT_MASK = 0x3b4e972,
    ATTR_EFF_DIMM_RANKS_CONFIGED = 0x92db64b,
    ATTR_EFF_NUM_RANKS_PER_DIMM = 0x3d83337,
    ATTR_EFF_DIMM_TYPE = 0xd9a7095,
    ATTR_EFF_DRAM_WIDTH = 0xe0d4e79,
    ATTR_EFF_DRAM_GEN = 0x7a9dc85,
    ATTR_EFF_PRIMARY_RANK_GROUP0 = 0x89a0ee8,
    ATTR_EFF_PRIMARY_RANK_GROUP1 = 0x8548560,
    ATTR_EFF_PRIMARY_RANK_GROUP2 = 0xa256fc3,
    ATTR_EFF_PRIMARY_RANK_GROUP3 = 0xda4a70c,
    ATTR_EFF_SECONDARY_RANK_GROUP0 = 0x7b6886f,
    ATTR_EFF_SECONDARY_RANK_GROUP1 = 0xe9225e8,
    ATTR_EFF_SECONDARY_RANK_GROUP2 = 0x4c40d75,
    ATTR_EFF_SECONDARY_RANK_GROUP3 = 0x68337ad,
    ATTR_EFF_TERTIARY_RANK_GROUP0 = 0x29290fb,
    ATTR_EFF_TERTIARY_RANK_GROUP1 = 0x4534ff7,
    ATTR_EFF_TERTIARY_RANK_GROUP2 = 0x00741a6,
    ATTR_EFF_TERTIARY_RANK_GROUP3 = 0x3d67c81,
    ATTR_EFF_QUATERNARY_RANK_GROUP0 = 0xb2f4d0e,
    ATTR_EFF_QUATERNARY_RANK_GROUP1 = 0xa8d19de,
    ATTR_EFF_QUATERNARY_RANK_GROUP2 = 0x72f1de7,
    ATTR_EFF_QUATERNARY_RANK_GROUP3 = 0xdf5311f,
    ATTR_EFF_ODT_RD = 0x879a181,
    ATTR_EFF_ODT_WR = 0x918b433,
    ATTR_EFF_DRAM_RON = 0x196cc98,
    ATTR_EFF_DRAM_RTT_NOM = 0x5401f38,
    ATTR_EFF_DRAM_RTT_WR = 0xf8cf41a,
    ATTR_EFF_DRAM_WR_VREF = 0xe55b07b,
    ATTR_EFF_CEN_DRV_IMP_DQ_DQS = 0x7277132,
    ATTR_EFF_CEN_DRV_IMP_CMD = 0x3b66443,
    ATTR_EFF_CEN_DRV_IMP_CNTL = 0x0d3acf6,
    ATTR_EFF_CEN_RCV_IMP_DQ_DQS = 0x5bd7acb,
    ATTR_EFF_CEN_SLEW_RATE_DQ_DQS = 0x870766e,
    ATTR_EFF_CEN_SLEW_RATE_CMD = 0x93de281,
    ATTR_EFF_CEN_SLEW_RATE_CNTL = 0x0e8b2f7,
    ATTR_EFF_CEN_RD_VREF = 0x4a4c635,
    ATTR_EFF_DIMM_SIZE = 0x29d7669,
    ATTR_EFF_DRAM_BANKS = 0x1a8aed4,
    ATTR_EFF_DRAM_ROWS = 0xc1652e4,
    ATTR_EFF_DRAM_COLS = 0xf08e379,
    ATTR_EFF_DRAM_DENSITY = 0x2fa4637,
    ATTR_EFF_DRAM_TRCD = 0xce88510,
    ATTR_EFF_DRAM_TRRD = 0x8817f94,
    ATTR_EFF_DRAM_TRP = 0xfcd1269,
    ATTR_EFF_DRAM_TRAS = 0x3e1f395,
    ATTR_EFF_DRAM_TRC = 0x95eca66,
    ATTR_EFF_DRAM_TRFI = 0x9a04d90,
    ATTR_EFF_DRAM_TRFC = 0xce92930,
    ATTR_EFF_DRAM_TWTR = 0x53ad0e8,
    ATTR_EFF_DRAM_TRTP = 0xa59764c,
    ATTR_EFF_DRAM_TFAW = 0xd3f7bba,
    ATTR_EFF_DRAM_BL = 0xbc9fd3b,
    ATTR_EFF_DRAM_CL = 0x67723cd,
    ATTR_EFF_DRAM_AL = 0xc6c7925,
    ATTR_EFF_DRAM_CWL = 0x4711851,
    ATTR_EFF_DRAM_RBT = 0x3d9e0ec,
    ATTR_EFF_DRAM_TM = 0x93c13a6,
    ATTR_EFF_DRAM_DLL_RESET = 0x5e9f75e,
    ATTR_EFF_DRAM_WR = 0x24becd1,
    ATTR_EFF_DRAM_DLL_PPD = 0x808fa81,
    ATTR_EFF_DRAM_DLL_ENABLE = 0x23d2b47,
    ATTR_EFF_DRAM_TDQS = 0x0d25691,
    ATTR_EFF_DRAM_WR_LVL_ENABLE = 0x77322df,
    ATTR_EFF_DRAM_OUTPUT_BUFFER = 0x8992cb0,
    ATTR_EFF_DRAM_PASR = 0x6fdecdf,
    ATTR_EFF_DRAM_ASR = 0xee66445,
    ATTR_EFF_DRAM_SRT = 0xd1918af,
    ATTR_EFF_MPR_LOC = 0x1247eb7,
    ATTR_EFF_MPR_MODE = 0xd541f48,
    ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15 = 0xb86780f,
    ATTR_EFF_DIMM_RCD_IBT = 0x6f1259f,
    ATTR_EFF_DIMM_RCD_MIRROR_MODE = 0xd612805,
    ATTR_EFF_SCHMOO_MODE = 0x91d7136,
    ATTR_EFF_SCHMOO_TEST_VALID = 0x116cac3,
    ATTR_EFF_SCHMOO_PARAM_VALID = 0x384985b,
    ATTR_EFF_MEMCAL_INTERVAL = 0x9a89c30,
    ATTR_EFF_ZQCAL_INTERVAL = 0x6cb09a8,
    ATTR_EFF_IBM_TYPE = 0x9618454,
    ATTR_EFF_NUM_DROPS_PER_PORT = 0x8d89d40,
    ATTR_EFF_STACK_TYPE = 0x28196da,
    ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM = 0xa0ffe42,
    ATTR_EFF_NUM_PACKAGES_PER_RANK = 0x8305498,
    ATTR_EFF_NUM_DIES_PER_PACKAGE = 0xf19b41c,
    ATTR_MSS_THROTTLE_NUMERATOR = 0x6c5a1be,
    ATTR_MSS_THROTTLE_DENOMINATOR = 0x42cfe04,
    ATTR_MSS_THROTTLE_CHANNEL_NUMERATOR = 0xb321dc7,
    ATTR_MSS_THROTTLE_CHANNEL_DENOMINATOR = 0x4a55021,
    ATTR_MSS_WATT_TARGET = 0xc8b873d,
    ATTR_MSS_POWER_SLOPE = 0x99ce405,
    ATTR_MSS_POWER_INT = 0xb0a1086,
    ATTR_MSS_DIMM_MAXBANDWIDTH_GBS = 0x060e6f7,
    ATTR_MSS_DIMM_MAXBANDWIDTH_MRS = 0xc38809c,
    ATTR_MSS_CHANNEL_MAXBANDWIDTH_GBS = 0xff065bf,
    ATTR_MSS_CHANNEL_MAXBANDWIDTH_MRS = 0xd009d23,
    ATTR_MSS_DIMM_MAXPOWER = 0x59be4e0,
    ATTR_MSS_CHANNEL_MAXPOWER = 0xf78a280,
    ATTR_MSS_MEMORY_BASE = 0x9a18889,
    ATTR_MSS_MIRROR_BASE = 0xd9e34a4,
    ATTR_MSS_MEMSIZE = 0x6c49a64,
    ATTR_MSS_MEM_BASE = 0x172e5bd,
    ATTR_MSS_MEM_SIZE = 0xc49b036,
    ATTR_MSS_MEM_MIRROR_BASE = 0xac1f001,
    ATTR_MSS_MEM_MIRROR_SIZE = 0xb54fc59,
    ATTR_MSS_INTERLEAVE_ENABLE = 0xf6b86e3,
    ATTR_MSS_MEMSIZE_MBA = 0x4cc6592,
    ATTR_MSS_MCA_HASH_MODE = 0xaddcd12,
    ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT = 0x8a49e20,
    ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE = 0x9cc041f,
    ATTR_MSS_CACHE_ENABLE = 0x0d02bbb,
    ATTR_MSS_PREFETCH_ENABLE = 0x799cb05,
    ATTR_MSS_CLEANER_ENABLE = 0x6097329,
    ATTR_MSS_LAB_OVERRIDE_FOR_MEM_PLL = 0x5689d95,
    ATTR_FREQ_CORE = 0xcd23d9e,
    ATTR_PROC_PCIE_NOT_F_LINK = 0x5bfae6d,
    ATTR_PROC_L3_BAR1_REG = 0x6aa8527,
    ATTR_PROC_L3_BAR2_REG = 0x5afe609,
    ATTR_PROC_L3_BAR_GROUP_MASK_REG = 0xcb93257,
    ATTR_PROC_MEM_BASE = 0x2855dd7,
    ATTR_PROC_MEM_SIZE = 0x403f6ce,
    ATTR_PROC_MIRROR_BASE = 0x317938b,
    ATTR_PROC_MIRROR_SIZE = 0x3c23b26,
    ATTR_PROC_FOREIGN_NEAR_BASE = 0xbb3e484,
    ATTR_PROC_FOREIGN_NEAR_SIZE = 0x8026c5b,
    ATTR_PROC_FOREIGN_FAR_BASE = 0xd385149,
    ATTR_PROC_FOREIGN_FAR_SIZE = 0x76c0a28,
    ATTR_PROC_HA_BASE = 0x3e5876b,
    ATTR_PROC_HA_SIZE = 0xc9a7ddb,
    ATTR_PROC_PSI_BRIDGE_BAR_ENABLE = 0x36f669b,
    ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR = 0xd636a2c,
    ATTR_PROC_FSP_BAR_ENABLE = 0x5eb7cea,
    ATTR_PROC_FSP_BAR_BASE_ADDR = 0xd0dc091,
    ATTR_PROC_FSP_BAR_SIZE = 0x7e86af0,
    ATTR_PROC_FSP_MMIO_MASK_SIZE = 0x136e087,
    ATTR_PROC_INTP_BAR_ENABLE = 0x59a51d1,
    ATTR_PROC_INTP_BAR_BASE_ADDR = 0x4bd196e,
    ATTR_PROC_NX_MMIO_BAR_ENABLE = 0xae63781,
    ATTR_PROC_NX_MMIO_BAR_BASE_ADDR = 0x5befa2b,
    ATTR_PROC_NX_MMIO_BAR_SIZE = 0xca6ff4b,
    ATTR_PROC_PCIE_BAR_ENABLE = 0xdeb75ec,
    ATTR_PROC_PCIE_BAR_BASE_ADDR = 0x63218eb,
    ATTR_PROC_PCIE_BAR_SIZE = 0x6f31ceb,
    ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES = 0x3c6066b,
    ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS = 0x3042fd3,
    ATTR_SBE_SEEPROM_I2C_PORT = 0x4bf2261,
    ATTR_PNOR_I2C_ADDRESS_BYTES = 0x6029076,
};

/**
 * @brief Attribute Information
 */
/* ATTR_L2_R_T0_EPS */
typedef uint32_t ATTR_L2_R_T0_EPS_Type;
const bool ATTR_L2_R_T0_EPS_Privileged = false;

/* ATTR_L2_R_T1_EPS */
typedef uint32_t ATTR_L2_R_T1_EPS_Type;
const bool ATTR_L2_R_T1_EPS_Privileged = false;

/* ATTR_L2_R_T2_EPS */
typedef uint32_t ATTR_L2_R_T2_EPS_Type;
const bool ATTR_L2_R_T2_EPS_Privileged = false;

/* ATTR_L2_FORCE_R_T2_EPS */
typedef uint8_t ATTR_L2_FORCE_R_T2_EPS_Type;
const bool ATTR_L2_FORCE_R_T2_EPS_Privileged = false;
enum ATTR_L2_FORCE_R_T2_EPS_Enum
{
    ENUM_ATTR_L2_FORCE_R_T2_EPS_OFF = 0x00,
    ENUM_ATTR_L2_FORCE_R_T2_EPS_ON = 0x01,
};

/* ATTR_L2_W_EPS */
typedef uint32_t ATTR_L2_W_EPS_Type;
const bool ATTR_L2_W_EPS_Privileged = false;

/* ATTR_L3_R_T0_EPS */
typedef uint32_t ATTR_L3_R_T0_EPS_Type;
const bool ATTR_L3_R_T0_EPS_Privileged = false;

/* ATTR_L3_R_T1_EPS */
typedef uint32_t ATTR_L3_R_T1_EPS_Type;
const bool ATTR_L3_R_T1_EPS_Privileged = false;

/* ATTR_L3_R_T2_EPS */
typedef uint32_t ATTR_L3_R_T2_EPS_Type;
const bool ATTR_L3_R_T2_EPS_Privileged = false;

/* ATTR_L3_FORCE_R_T2_EPS */
typedef uint8_t ATTR_L3_FORCE_R_T2_EPS_Type;
const bool ATTR_L3_FORCE_R_T2_EPS_Privileged = false;
enum ATTR_L3_FORCE_R_T2_EPS_Enum
{
    ENUM_ATTR_L3_FORCE_R_T2_EPS_OFF = 0x00,
    ENUM_ATTR_L3_FORCE_R_T2_EPS_ON = 0x01,
};

/* ATTR_L3_W_EPS */
typedef uint32_t ATTR_L3_W_EPS_Type;
const bool ATTR_L3_W_EPS_Privileged = false;

/* ATTR_CHIP_ID */
typedef uint32_t ATTR_CHIP_ID_Type;
const bool ATTR_CHIP_ID_Privileged = false;
#define ATTR_CHIP_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_NAME */
typedef uint8_t ATTR_NAME_Type;
const bool ATTR_NAME_Privileged = true;
enum ATTR_NAME_Enum
{
    ENUM_ATTR_NAME_NONE = 0,
    ENUM_ATTR_NAME_VENICE = 1,
    ENUM_ATTR_NAME_MURANO = 2,
    ENUM_ATTR_NAME_CENTAUR = 3,
};
#define ATTR_NAME_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_EC */
typedef uint8_t ATTR_EC_Type;
const bool ATTR_EC_Privileged = true;
#define ATTR_EC_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FSI_GP_REG_SCOM_ACCESS */
typedef uint8_t ATTR_FSI_GP_REG_SCOM_ACCESS_Type;
const bool ATTR_FSI_GP_REG_SCOM_ACCESS_Privileged = false;
enum ATTR_FSI_GP_REG_SCOM_ACCESS_Enum
{
    ENUM_ATTR_FSI_GP_REG_SCOM_ACCESS_false = 0,
    ENUM_ATTR_FSI_GP_REG_SCOM_ACCESS_true = 1,
};
#define ATTR_FSI_GP_REG_SCOM_ACCESS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FABRIC_NODE_ID */
typedef uint8_t ATTR_FABRIC_NODE_ID_Type;
const bool ATTR_FABRIC_NODE_ID_Privileged = false;
#define ATTR_FABRIC_NODE_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FABRIC_CHIP_ID */
typedef uint8_t ATTR_FABRIC_CHIP_ID_Type;
const bool ATTR_FABRIC_CHIP_ID_Privileged = false;
#define ATTR_FABRIC_CHIP_ID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_HAS_SBE */
typedef uint8_t ATTR_CHIP_HAS_SBE_Type;
const bool ATTR_CHIP_HAS_SBE_Privileged = false;
enum ATTR_CHIP_HAS_SBE_Enum
{
    ENUM_ATTR_CHIP_HAS_SBE_false = 0,
    ENUM_ATTR_CHIP_HAS_SBE_true = 1,
};
#define ATTR_CHIP_HAS_SBE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_DCM_INSTALLED */
typedef uint8_t ATTR_PROC_DCM_INSTALLED_Type;
const bool ATTR_PROC_DCM_INSTALLED_Privileged = false;
enum ATTR_PROC_DCM_INSTALLED_Enum
{
    ENUM_ATTR_PROC_DCM_INSTALLED_false = 0,
    ENUM_ATTR_PROC_DCM_INSTALLED_true = 1,
};
#define ATTR_PROC_DCM_INSTALLED_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_TEST1 */
typedef uint8_t ATTR_CHIP_EC_FEATURE_TEST1_Type;
const bool ATTR_CHIP_EC_FEATURE_TEST1_Privileged = false;
#define ATTR_CHIP_EC_FEATURE_TEST1_GETMACRO(ID, PTARGET, VAL) fapi::fapiQueryChipEcFeature(ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_TEST1_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_EC_FEATURE_TEST2 */
typedef uint8_t ATTR_CHIP_EC_FEATURE_TEST2_Type;
const bool ATTR_CHIP_EC_FEATURE_TEST2_Privileged = false;
#define ATTR_CHIP_EC_FEATURE_TEST2_GETMACRO(ID, PTARGET, VAL) fapi::fapiQueryChipEcFeature(ID, PTARGET, VAL)
#define ATTR_CHIP_EC_FEATURE_TEST2_SETMACRO(ID, PTARGET, VAL) CHIP_EC_FEATURE_ATTRIBUTE_NOT_WRITABLE

/* ATTR_CEN_DQ_TO_DIMM_CONN_DQ */
typedef uint8_t ATTR_CEN_DQ_TO_DIMM_CONN_DQ_Type[80];
const bool ATTR_CEN_DQ_TO_DIMM_CONN_DQ_Privileged = false;
#define ATTR_CEN_DQ_TO_DIMM_CONN_DQ_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MBA_PORT */
typedef uint8_t ATTR_MBA_PORT_Type;
const bool ATTR_MBA_PORT_Privileged = false;
#define ATTR_MBA_PORT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MBA_DIMM */
typedef uint8_t ATTR_MBA_DIMM_Type;
const bool ATTR_MBA_DIMM_Privileged = false;
#define ATTR_MBA_DIMM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_PROC_REFCLOCK */
typedef uint32_t ATTR_FREQ_PROC_REFCLOCK_Type;
const bool ATTR_FREQ_PROC_REFCLOCK_Privileged = false;
#define ATTR_FREQ_PROC_REFCLOCK_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_MEM_REFCLOCK */
typedef uint32_t ATTR_FREQ_MEM_REFCLOCK_Type;
const bool ATTR_FREQ_MEM_REFCLOCK_Privileged = false;
#define ATTR_FREQ_MEM_REFCLOCK_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_CORE_FLOOR */
typedef uint32_t ATTR_FREQ_CORE_FLOOR_Type;
const bool ATTR_FREQ_CORE_FLOOR_Privileged = false;
#define ATTR_FREQ_CORE_FLOOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_PB */
typedef uint32_t ATTR_FREQ_PB_Type;
const bool ATTR_FREQ_PB_Privileged = false;
#define ATTR_FREQ_PB_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_A */
typedef uint32_t ATTR_FREQ_A_Type;
const bool ATTR_FREQ_A_Privileged = false;
#define ATTR_FREQ_A_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_X */
typedef uint32_t ATTR_FREQ_X_Type;
const bool ATTR_FREQ_X_Privileged = false;
#define ATTR_FREQ_X_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MVPD_IVRM_CALIBRATION */
typedef uint32_t ATTR_MVPD_IVRM_CALIBRATION_Type[32][4];
const bool ATTR_MVPD_IVRM_CALIBRATION_Privileged = false;
#define ATTR_MVPD_IVRM_CALIBRATION_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MVPD_CPM_CALIBRATION */
typedef uint8_t ATTR_MVPD_CPM_CALIBRATION_Type[1024];
const bool ATTR_MVPD_CPM_CALIBRATION_Privileged = false;
#define ATTR_MVPD_CPM_CALIBRATION_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_POWER_PROXY_TRACE_TIMER */
typedef uint32_t ATTR_PM_POWER_PROXY_TRACE_TIMER_Type;
const bool ATTR_PM_POWER_PROXY_TRACE_TIMER_Privileged = false;

/* ATTR_PM_PPT_TIMER_MATCH_VALUE */
typedef uint32_t ATTR_PM_PPT_TIMER_MATCH_VALUE_Type;
const bool ATTR_PM_PPT_TIMER_MATCH_VALUE_Privileged = false;

/* ATTR_PM_PPT_TIMER_TICK */
typedef uint32_t ATTR_PM_PPT_TIMER_TICK_Type;
const bool ATTR_PM_PPT_TIMER_TICK_Privileged = false;

/* ATTR_PM_AISS_TIMEOUT */
typedef uint8_t ATTR_PM_AISS_TIMEOUT_Type;
const bool ATTR_PM_AISS_TIMEOUT_Privileged = false;
enum ATTR_PM_AISS_TIMEOUT_Enum
{
    ENUM_ATTR_PM_AISS_TIMEOUT_1MS=0,
    ENUM_ATTR_PM_AISS_TIMEOUT_2MS=1,
    ENUM_ATTR_PM_AISS_TIMEOUT_4MS=2,
    ENUM_ATTR_PM_AISS_TIMEOUT_8MS=3,
    ENUM_ATTR_PM_AISS_TIMEOUT_16MS=4,
    ENUM_ATTR_PM_AISS_TIMEOUT_32MS=5,
    ENUM_ATTR_PM_AISS_TIMEOUT_64MS=6,
    ENUM_ATTR_PM_AISS_TIMEOUT_128MS=7,
    ENUM_ATTR_PM_AISS_TIMEOUT_256MS=8,
    ENUM_ATTR_PM_AISS_TIMEOUT_512MS=9,
};

/* ATTR_PM_PSTATE_STEPSIZE */
typedef uint8_t ATTR_PM_PSTATE_STEPSIZE_Type;
const bool ATTR_PM_PSTATE_STEPSIZE_Privileged = false;

/* ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE */
typedef uint8_t ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE_Type;
const bool ATTR_PM_EXTERNAL_VRM_STEPDELAY_RANGE_Privileged = false;

/* ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE */
typedef uint8_t ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE_Type;
const bool ATTR_PM_EXTERNAL_VRM_STEPDELAY_VALUE_Privileged = false;

/* ATTR_PM_PMC_HANGPULSE_DIVIDER */
typedef uint8_t ATTR_PM_PMC_HANGPULSE_DIVIDER_Type;
const bool ATTR_PM_PMC_HANGPULSE_DIVIDER_Privileged = false;

/* ATTR_PM_PVSAFE_PSTATE */
typedef uint8_t ATTR_PM_PVSAFE_PSTATE_Type;
const bool ATTR_PM_PVSAFE_PSTATE_Privileged = false;

/* ATTR_PM_SPIVID_FRAME_SIZE */
typedef uint8_t ATTR_PM_SPIVID_FRAME_SIZE_Type;
const bool ATTR_PM_SPIVID_FRAME_SIZE_Privileged = false;

/* ATTR_PM_SPIVID_IN_DELAY_FRAME1 */
typedef uint8_t ATTR_PM_SPIVID_IN_DELAY_FRAME1_Type;
const bool ATTR_PM_SPIVID_IN_DELAY_FRAME1_Privileged = false;

/* ATTR_PM_SPIVID_IN_DELAY_FRAME2 */
typedef uint8_t ATTR_PM_SPIVID_IN_DELAY_FRAME2_Type;
const bool ATTR_PM_SPIVID_IN_DELAY_FRAME2_Privileged = false;

/* ATTR_PM_SPIVID_CLOCK_POLARITY */
typedef uint8_t ATTR_PM_SPIVID_CLOCK_POLARITY_Type;
const bool ATTR_PM_SPIVID_CLOCK_POLARITY_Privileged = false;
enum ATTR_PM_SPIVID_CLOCK_POLARITY_Enum
{
    ENUM_ATTR_PM_SPIVID_CLOCK_POLARITY_IDLELOW=0,
    ENUM_ATTR_PM_SPIVID_CLOCK_POLARITY_IDLEHIGH = 1,
};

/* ATTR_PM_SPIVID_CLOCK_PHASE */
typedef uint8_t ATTR_PM_SPIVID_CLOCK_PHASE_Type;
const bool ATTR_PM_SPIVID_CLOCK_PHASE_Privileged = false;
enum ATTR_PM_SPIVID_CLOCK_PHASE_Enum
{
    ENUM_ATTR_PM_SPIVID_CLOCK_PHASE_FIRSTEDGE=0,
    ENUM_ATTR_PM_SPIVID_CLOCK_PHASE_SECONDEDGE=1,
};

/* ATTR_PM_SPIVID_CLOCK_DIVIDER */
typedef uint32_t ATTR_PM_SPIVID_CLOCK_DIVIDER_Type;
const bool ATTR_PM_SPIVID_CLOCK_DIVIDER_Privileged = false;

/* ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS */
typedef uint32_t ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_Type;
const bool ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_Privileged = false;

/* ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE */
typedef uint32_t ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE_Type;
const bool ATTR_PM_SPIVID_INTERFRAME_DELAY_WRITE_STATUS_VALUE_Privileged = false;

/* ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE */
typedef uint32_t ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE_Type;
const bool ATTR_PM_SPIVID_INTER_RETRY_DELAY_VALUE_Privileged = false;

/* ATTR_PM_SPIVID_INTER_RETRY_DELAY */
typedef uint32_t ATTR_PM_SPIVID_INTER_RETRY_DELAY_Type;
const bool ATTR_PM_SPIVID_INTER_RETRY_DELAY_Privileged = false;

/* ATTR_PM_SPIVID_CRC_GEN_ENABLE */
typedef uint8_t ATTR_PM_SPIVID_CRC_GEN_ENABLE_Type;
const bool ATTR_PM_SPIVID_CRC_GEN_ENABLE_Privileged = false;
enum ATTR_PM_SPIVID_CRC_GEN_ENABLE_Enum
{
    ENUM_ATTR_PM_SPIVID_CRC_GEN_ENABLE_TRUE = 1,
    ENUM_ATTR_PM_SPIVID_CRC_GEN_ENABLE_FALSE = 0,
};

/* ATTR_PM_SPIVID_CRC_CHECK_ENABLE */
typedef uint8_t ATTR_PM_SPIVID_CRC_CHECK_ENABLE_Type;
const bool ATTR_PM_SPIVID_CRC_CHECK_ENABLE_Privileged = false;
enum ATTR_PM_SPIVID_CRC_CHECK_ENABLE_Enum
{
    ENUM_ATTR_PM_SPIVID_CRC_CHECK_ENABLE_TRUE = 1,
    ENUM_ATTR_PM_SPIVID_CRC_CHECK_ENABLE_FALSE = 0,
};

/* ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE */
typedef uint8_t ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_Type;
const bool ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_Privileged = false;
enum ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_Enum
{
    ENUM_ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_TRUE = 1,
    ENUM_ATTR_PM_SPIVID_MAJORITY_VOTE_ENABLE_FALSE = 0,
};

/* ATTR_PM_SPIVID_MAX_RETRIES */
typedef uint8_t ATTR_PM_SPIVID_MAX_RETRIES_Type;
const bool ATTR_PM_SPIVID_MAX_RETRIES_Privileged = false;

/* ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES */
typedef uint8_t ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES_Type;
const bool ATTR_PM_SPIVID_CRC_POLYNOMIAL_ENABLES_Privileged = false;

/* ATTR_PM_OCC_HEARTBEAT_TIME */
typedef uint32_t ATTR_PM_OCC_HEARTBEAT_TIME_Type;
const bool ATTR_PM_OCC_HEARTBEAT_TIME_Privileged = false;
#define ATTR_PM_OCC_HEARTBEAT_TIME_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT */
typedef uint32_t ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT_Type;
const bool ATTR_PM_SLEEP_WINKLE_REQUEST_TIMEOUT_Privileged = false;

/* ATTR_PM_SLEEP_ENTRY */
typedef uint8_t ATTR_PM_SLEEP_ENTRY_Type;
const bool ATTR_PM_SLEEP_ENTRY_Privileged = false;
enum ATTR_PM_SLEEP_ENTRY_Enum
{
    ENUM_ATTR_PM_SLEEP_ENTRY_HARDWARE=0,
    ENUM_ATTR_PM_SLEEP_ENTRY_ASSISTED=1,
};

/* ATTR_PM_SLEEP_EXIT */
typedef uint8_t ATTR_PM_SLEEP_EXIT_Type;
const bool ATTR_PM_SLEEP_EXIT_Privileged = false;
enum ATTR_PM_SLEEP_EXIT_Enum
{
    ENUM_ATTR_PM_SLEEP_EXIT_HARDWARE=0,
    ENUM_ATTR_PM_SLEEP_EXIT_ASSISTED=1,
};

/* ATTR_PM_SLEEP_TYPE */
typedef uint8_t ATTR_PM_SLEEP_TYPE_Type;
const bool ATTR_PM_SLEEP_TYPE_Privileged = false;
enum ATTR_PM_SLEEP_TYPE_Enum
{
    ENUM_ATTR_PM_SLEEP_TYPE_FAST=0,
    ENUM_ATTR_PM_SLEEP_TYPE_DEEP=1,
};

/* ATTR_PM_WINKLE_TYPE */
typedef uint8_t ATTR_PM_WINKLE_TYPE_Type;
const bool ATTR_PM_WINKLE_TYPE_Privileged = false;
enum ATTR_PM_WINKLE_TYPE_Enum
{
    ENUM_ATTR_PM_WINKLE_TYPE_FAST=0,
    ENUM_ATTR_PM_WINKLE_TYPE_DEEP=1,
};

/* ATTR_PM_PFET_POWERUP_CORE_DELAY0 */
typedef uint32_t ATTR_PM_PFET_POWERUP_CORE_DELAY0_Type;
const bool ATTR_PM_PFET_POWERUP_CORE_DELAY0_Privileged = false;

/* ATTR_PM_PFET_POWERUP_CORE_DELAY1 */
typedef uint32_t ATTR_PM_PFET_POWERUP_CORE_DELAY1_Type;
const bool ATTR_PM_PFET_POWERUP_CORE_DELAY1_Privileged = false;

/* ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE_Type;
const bool ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE_Privileged = false;
#define ATTR_PM_PFET_POWERUP_CORE_DELAY0_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE_Type;
const bool ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE_Privileged = false;
#define ATTR_PM_PFET_POWERUP_CORE_DELAY1_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT */
typedef uint32_t ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT_Type;
const bool ATTR_PM_PFET_POWERUP_CORE_SEQUENCE_DELAY_SELECT_Privileged = false;

/* ATTR_PM_PFET_POWERDOWN_CORE_DELAY0 */
typedef uint32_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_Type;
const bool ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_Privileged = false;

/* ATTR_PM_PFET_POWERDOWN_CORE_DELAY1 */
typedef uint32_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_Type;
const bool ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_Privileged = false;

/* ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE_Type;
const bool ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE_Privileged = false;
#define ATTR_PM_PFET_POWERDOWN_CORE_DELAY0_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE_Type;
const bool ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE_Privileged = false;
#define ATTR_PM_PFET_POWERDOWN_CORE_DELAY1_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT */
typedef uint32_t ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT_Type;
const bool ATTR_PM_PFET_POWERDOWN_CORE_SEQUENCE_DELAY_SELECT_Privileged = false;

/* ATTR_PM_PFET_POWERUP_ECO_DELAY0 */
typedef uint32_t ATTR_PM_PFET_POWERUP_ECO_DELAY0_Type;
const bool ATTR_PM_PFET_POWERUP_ECO_DELAY0_Privileged = false;

/* ATTR_PM_PFET_POWERUP_ECO_DELAY1 */
typedef uint32_t ATTR_PM_PFET_POWERUP_ECO_DELAY1_Type;
const bool ATTR_PM_PFET_POWERUP_ECO_DELAY1_Privileged = false;

/* ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE_Type;
const bool ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE_Privileged = false;
#define ATTR_PM_PFET_POWERUP_ECO_DELAY0_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE_Type;
const bool ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE_Privileged = false;
#define ATTR_PM_PFET_POWERUP_ECO_DELAY1_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT */
typedef uint32_t ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT_Type;
const bool ATTR_PM_PFET_POWERUP_ECO_SEQUENCE_DELAY_SELECT_Privileged = false;

/* ATTR_PM_PFET_POWERDOWN_ECO_DELAY0 */
typedef uint32_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_Type;
const bool ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_Privileged = false;

/* ATTR_PM_PFET_POWERDOWN_ECO_DELAY1 */
typedef uint32_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_Type;
const bool ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_Privileged = false;

/* ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE_Type;
const bool ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE_Privileged = false;
#define ATTR_PM_PFET_POWERDOWN_ECO_DELAY0_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE */
typedef uint8_t ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE_Type;
const bool ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE_Privileged = false;
#define ATTR_PM_PFET_POWERDOWN_ECO_DELAY1_VALUE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT */
typedef uint32_t ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT_Type;
const bool ATTR_PM_PFET_POWERDOWN_ECO_SEQUENCE_DELAY_SELECT_Privileged = false;

/* ATTR_PM_PSTATE0_FREQUENCY */
typedef uint32_t ATTR_PM_PSTATE0_FREQUENCY_Type;
const bool ATTR_PM_PSTATE0_FREQUENCY_Privileged = false;
#define ATTR_PM_PSTATE0_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_IVRMS_ENABLED */
typedef uint8_t ATTR_PM_IVRMS_ENABLED_Type;
const bool ATTR_PM_IVRMS_ENABLED_Privileged = false;
enum ATTR_PM_IVRMS_ENABLED_Enum
{
    ENUM_ATTR_PM_IVRMS_ENABLED_TRUE = 1,
    ENUM_ATTR_PM_IVRMS_ENABLED_FALSE = 0,
};

/* ATTR_PM_SAFE_PSTATE */
typedef uint8_t ATTR_PM_SAFE_PSTATE_Type;
const bool ATTR_PM_SAFE_PSTATE_Privileged = false;

/* ATTR_PM_RESONANT_CLOCK_ENABLE */
typedef uint8_t ATTR_PM_RESONANT_CLOCK_ENABLE_Type;
const bool ATTR_PM_RESONANT_CLOCK_ENABLE_Privileged = false;

/* ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE */
typedef uint8_t ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE_Type;
const bool ATTR_PM_RESONANT_CLOCK_FULL_CSB_PSTATE_Privileged = false;

/* ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE */
typedef uint8_t ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE_Type;
const bool ATTR_PM_RESONANT_CLOCK_LFRLOW_PSTATE_Privileged = false;

/* ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE */
typedef uint8_t ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE_Type;
const bool ATTR_PM_RESONANT_CLOCK_LFRUPPER_PSTATE_Privileged = false;

/* ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE */
typedef uint8_t ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE_Type;
const bool ATTR_PM_RESONANT_CLOCK_HFRLOW_PSTATE_Privileged = false;

/* ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE */
typedef uint8_t ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE_Type;
const bool ATTR_PM_RESONANT_CLOCK_HFRHIGH_PSTATE_Privileged = false;

/* ATTR_PM_SPIPSS_FRAME_SIZE */
typedef uint8_t ATTR_PM_SPIPSS_FRAME_SIZE_Type;
const bool ATTR_PM_SPIPSS_FRAME_SIZE_Privileged = false;

/* ATTR_PM_SPIPSS_OUT_COUNT */
typedef uint8_t ATTR_PM_SPIPSS_OUT_COUNT_Type;
const bool ATTR_PM_SPIPSS_OUT_COUNT_Privileged = false;

/* ATTR_PM_SPIPSS_IN_DELAY */
typedef uint8_t ATTR_PM_SPIPSS_IN_DELAY_Type;
const bool ATTR_PM_SPIPSS_IN_DELAY_Privileged = false;

/* ATTR_PM_SPIPSS_IN_COUNT */
typedef uint8_t ATTR_PM_SPIPSS_IN_COUNT_Type;
const bool ATTR_PM_SPIPSS_IN_COUNT_Privileged = false;

/* ATTR_PM_SPIPSS_CLOCK_POLARITY */
typedef uint8_t ATTR_PM_SPIPSS_CLOCK_POLARITY_Type;
const bool ATTR_PM_SPIPSS_CLOCK_POLARITY_Privileged = false;
enum ATTR_PM_SPIPSS_CLOCK_POLARITY_Enum
{
    ENUM_ATTR_PM_SPIPSS_CLOCK_POLARITY_CPOL=0,
    ENUM_ATTR_PM_SPIPSS_CLOCK_POLARITY_CPOH=1,
};

/* ATTR_PM_SPIPSS_CLOCK_PHASE */
typedef uint8_t ATTR_PM_SPIPSS_CLOCK_PHASE_Type;
const bool ATTR_PM_SPIPSS_CLOCK_PHASE_Privileged = false;
enum ATTR_PM_SPIPSS_CLOCK_PHASE_Enum
{
    ENUM_ATTR_PM_SPIPSS_CLOCK_PHASE_FIRSTEDGE=0,
    ENUM_ATTR_PM_SPIPSS_CLOCK_PHASE_SECONDEDGE=1,
};

/* ATTR_PM_SPIPSS_CLOCK_DIVIDER */
typedef uint8_t ATTR_PM_SPIPSS_CLOCK_DIVIDER_Type;
const bool ATTR_PM_SPIPSS_CLOCK_DIVIDER_Privileged = false;

/* ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING */
typedef uint32_t ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING_Type;
const bool ATTR_PM_SPIPSS_INTER_FRAME_DELAY_SETTING_Privileged = false;

/* ATTR_PM_SPIPSS_INTER_FRAME_DELAY */
typedef uint32_t ATTR_PM_SPIPSS_INTER_FRAME_DELAY_Type;
const bool ATTR_PM_SPIPSS_INTER_FRAME_DELAY_Privileged = false;

/* ATTR_PM_PBAX_RCV_RESERV_TIMEOUT */
typedef uint8_t ATTR_PM_PBAX_RCV_RESERV_TIMEOUT_Type;
const bool ATTR_PM_PBAX_RCV_RESERV_TIMEOUT_Privileged = false;
#define ATTR_PM_PBAX_RCV_RESERV_TIMEOUT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE */
typedef uint8_t ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE_Type;
const bool ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE_Privileged = false;
#define ATTR_PM_PBAX_SND_RETRY_COUNT_OVERCOMMIT_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PBAX_SND_RETRY_THRESHOLD */
typedef uint8_t ATTR_PM_PBAX_SND_RETRY_THRESHOLD_Type;
const bool ATTR_PM_PBAX_SND_RETRY_THRESHOLD_Privileged = false;
#define ATTR_PM_PBAX_SND_RETRY_THRESHOLD_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PBAX_SND_RESERV_TIMEOUT */
typedef uint8_t ATTR_PM_PBAX_SND_RESERV_TIMEOUT_Type;
const bool ATTR_PM_PBAX_SND_RESERV_TIMEOUT_Privileged = false;
#define ATTR_PM_PBAX_SND_RESERV_TIMEOUT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SPWUP_FSP */
typedef uint32_t ATTR_PM_SPWUP_FSP_Type;
const bool ATTR_PM_SPWUP_FSP_Privileged = false;

/* ATTR_PM_SPWUP_OCC */
typedef uint32_t ATTR_PM_SPWUP_OCC_Type;
const bool ATTR_PM_SPWUP_OCC_Privileged = false;

/* ATTR_PM_SPWUP_PHYP */
typedef uint32_t ATTR_PM_SPWUP_PHYP_Type;
const bool ATTR_PM_SPWUP_PHYP_Privileged = false;

/* ATTR_PM_EXTERNAL_VRM_STEPSIZE */
typedef uint8_t ATTR_PM_EXTERNAL_VRM_STEPSIZE_Type;
const bool ATTR_PM_EXTERNAL_VRM_STEPSIZE_Privileged = false;
#define ATTR_PM_EXTERNAL_VRM_STEPSIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_EXTERNAL_VRM_STEPDELAY */
typedef uint32_t ATTR_PM_EXTERNAL_VRM_STEPDELAY_Type;
const bool ATTR_PM_EXTERNAL_VRM_STEPDELAY_Privileged = false;
#define ATTR_PM_EXTERNAL_VRM_STEPDELAY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PSTATE_UNDERVOLTING_MINIMUM */
typedef uint8_t ATTR_PM_PSTATE_UNDERVOLTING_MINIMUM_Type;
const bool ATTR_PM_PSTATE_UNDERVOLTING_MINIMUM_Privileged = false;
#define ATTR_PM_PSTATE_UNDERVOLTING_MINIMUM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PSTATE_UNDERVOLTING_MAXIMUM */
typedef uint8_t ATTR_PM_PSTATE_UNDERVOLTING_MAXIMUM_Type;
const bool ATTR_PM_PSTATE_UNDERVOLTING_MAXIMUM_Privileged = false;
#define ATTR_PM_PSTATE_UNDERVOLTING_MAXIMUM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SPIVID_FREQUENCY */
typedef uint32_t ATTR_PM_SPIVID_FREQUENCY_Type;
const bool ATTR_PM_SPIVID_FREQUENCY_Privileged = false;
#define ATTR_PM_SPIVID_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SPIVID_PORT_ENABLE */
typedef uint8_t ATTR_PM_SPIVID_PORT_ENABLE_Type;
const bool ATTR_PM_SPIVID_PORT_ENABLE_Privileged = false;
enum ATTR_PM_SPIVID_PORT_ENABLE_Enum
{
    ENUM_ATTR_PM_SPIVID_PORT_ENABLE_NONE = 0x00,
    ENUM_ATTR_PM_SPIVID_PORT_ENABLE_PORT0NONRED = 0x04,
    ENUM_ATTR_PM_SPIVID_PORT_ENABLE_PORT1NONRED = 0x02,
    ENUM_ATTR_PM_SPIVID_PORT_ENABLE_PORT2NONRED = 0x01,
    ENUM_ATTR_PM_SPIVID_PORT_ENABLE_REDUNDANT = 0x07,
};
#define ATTR_PM_SPIVID_PORT_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SAFE_FREQUENCY */
typedef uint8_t ATTR_PM_SAFE_FREQUENCY_Type;
const bool ATTR_PM_SAFE_FREQUENCY_Privileged = false;
#define ATTR_PM_SAFE_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY */
typedef uint32_t ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY_Type;
const bool ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY_Privileged = false;
#define ATTR_PM_RESONANT_CLOCK_FULL_CLOCK_SECTOR_BUFFER_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY */
typedef uint32_t ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY_Type;
const bool ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY_Privileged = false;
#define ATTR_PM_RESONANT_CLOCK_LOW_BAND_LOWER_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY */
typedef uint32_t ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY_Type;
const bool ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY_Privileged = false;
#define ATTR_PM_RESONANT_CLOCK_LOW_BAND_UPPER_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY */
typedef uint32_t ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY_Type;
const bool ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY_Privileged = false;
#define ATTR_PM_RESONANT_CLOCK_HIGH_BAND_LOWER_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY */
typedef uint32_t ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY_Type;
const bool ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY_Privileged = false;
#define ATTR_PM_RESONANT_CLOCK_HIGH_BAND_UPPER_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_SPIPSS_FREQUENCY */
typedef uint32_t ATTR_PM_SPIPSS_FREQUENCY_Type;
const bool ATTR_PM_SPIPSS_FREQUENCY_Privileged = false;
#define ATTR_PM_SPIPSS_FREQUENCY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_APSS_CHIP_SELECT */
typedef uint8_t ATTR_PM_APSS_CHIP_SELECT_Type;
const bool ATTR_PM_APSS_CHIP_SELECT_Privileged = false;
enum ATTR_PM_APSS_CHIP_SELECT_Enum
{
    ENUM_ATTR_PM_APSS_CHIP_SELECT_NONE = 0xFF,
    ENUM_ATTR_PM_APSS_CHIP_SELECT_CS0 = 0x00,
    ENUM_ATTR_PM_APSS_CHIP_SELECT_CS1 = 0x01,
};
#define ATTR_PM_APSS_CHIP_SELECT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PBAX_NODEID */
typedef uint8_t ATTR_PM_PBAX_NODEID_Type;
const bool ATTR_PM_PBAX_NODEID_Privileged = false;
#define ATTR_PM_PBAX_NODEID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PBAX_CHIPID */
typedef uint8_t ATTR_PM_PBAX_CHIPID_Type;
const bool ATTR_PM_PBAX_CHIPID_Privileged = false;
#define ATTR_PM_PBAX_CHIPID_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PM_PBAX_BRDCST_ID_VECTOR */
typedef uint8_t ATTR_PM_PBAX_BRDCST_ID_VECTOR_Type;
const bool ATTR_PM_PBAX_BRDCST_ID_VECTOR_Privileged = false;
#define ATTR_PM_PBAX_BRDCST_ID_VECTOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_R_LOADLINE */
typedef uint32_t ATTR_PROC_R_LOADLINE_Type;
const bool ATTR_PROC_R_LOADLINE_Privileged = false;
#define ATTR_PROC_R_LOADLINE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_R_DISTLOSS */
typedef uint32_t ATTR_PROC_R_DISTLOSS_Type;
const bool ATTR_PROC_R_DISTLOSS_Privileged = false;
#define ATTR_PROC_R_DISTLOSS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_VRM_VOFFSET */
typedef uint32_t ATTR_PROC_VRM_VOFFSET_Type;
const bool ATTR_PROC_VRM_VOFFSET_Privileged = false;
#define ATTR_PROC_VRM_VOFFSET_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_FREQ_CORE_MAX */
typedef uint32_t ATTR_FREQ_CORE_MAX_Type;
const bool ATTR_FREQ_CORE_MAX_Privileged = false;
#define ATTR_FREQ_CORE_MAX_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MVPD_FREQ_CORE_NOMINAL */
typedef uint32_t ATTR_MVPD_FREQ_CORE_NOMINAL_Type;
const bool ATTR_MVPD_FREQ_CORE_NOMINAL_Privileged = false;
#define ATTR_MVPD_FREQ_CORE_NOMINAL_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SCRATCH_UINT8_1 */
typedef uint8_t ATTR_SCRATCH_UINT8_1_Type;
const bool ATTR_SCRATCH_UINT8_1_Privileged = false;

/* ATTR_SCRATCH_UINT8_2 */
typedef uint8_t ATTR_SCRATCH_UINT8_2_Type;
const bool ATTR_SCRATCH_UINT8_2_Privileged = false;

/* ATTR_SCRATCH_UINT32_1 */
typedef uint32_t ATTR_SCRATCH_UINT32_1_Type;
const bool ATTR_SCRATCH_UINT32_1_Privileged = false;

/* ATTR_SCRATCH_UINT32_2 */
typedef uint32_t ATTR_SCRATCH_UINT32_2_Type;
const bool ATTR_SCRATCH_UINT32_2_Privileged = false;

/* ATTR_SCRATCH_UINT64_1 */
typedef uint64_t ATTR_SCRATCH_UINT64_1_Type;
const bool ATTR_SCRATCH_UINT64_1_Privileged = false;

/* ATTR_SCRATCH_UINT64_2 */
typedef uint64_t ATTR_SCRATCH_UINT64_2_Type;
const bool ATTR_SCRATCH_UINT64_2_Privileged = false;
enum ATTR_SCRATCH_UINT64_2_Enum
{
    ENUM_ATTR_SCRATCH_UINT64_2_VAL_A = 0ULL,
    ENUM_ATTR_SCRATCH_UINT64_2_VAL_B = 5ULL,
    ENUM_ATTR_SCRATCH_UINT64_2_VAL_C = 0xffffffffffffffffULL,
};

/* ATTR_SCRATCH_UINT8_ARRAY_1 */
typedef uint8_t ATTR_SCRATCH_UINT8_ARRAY_1_Type[32];
const bool ATTR_SCRATCH_UINT8_ARRAY_1_Privileged = false;

/* ATTR_SCRATCH_UINT8_ARRAY_2 */
typedef uint8_t ATTR_SCRATCH_UINT8_ARRAY_2_Type[2][3][4];
const bool ATTR_SCRATCH_UINT8_ARRAY_2_Privileged = false;

/* ATTR_SCRATCH_UINT32_ARRAY_1 */
typedef uint32_t ATTR_SCRATCH_UINT32_ARRAY_1_Type[8];
const bool ATTR_SCRATCH_UINT32_ARRAY_1_Privileged = false;

/* ATTR_SCRATCH_UINT32_ARRAY_2 */
typedef uint32_t ATTR_SCRATCH_UINT32_ARRAY_2_Type[2][3];
const bool ATTR_SCRATCH_UINT32_ARRAY_2_Privileged = false;

/* ATTR_SCRATCH_UINT64_ARRAY_1 */
typedef uint64_t ATTR_SCRATCH_UINT64_ARRAY_1_Type[4];
const bool ATTR_SCRATCH_UINT64_ARRAY_1_Privileged = false;

/* ATTR_SCRATCH_UINT64_ARRAY_2 */
typedef uint64_t ATTR_SCRATCH_UINT64_ARRAY_2_Type[2][2];
const bool ATTR_SCRATCH_UINT64_ARRAY_2_Privileged = false;
enum ATTR_SCRATCH_UINT64_ARRAY_2_Enum
{
    ENUM_ATTR_SCRATCH_UINT64_ARRAY_2_VAL_A = 0x0123456789abcdefULL,
    ENUM_ATTR_SCRATCH_UINT64_ARRAY_2_VAL_B = 0ULL,
    ENUM_ATTR_SCRATCH_UINT64_ARRAY_2_VAL_C = 0xffffffffffffffffULL,
};

/* ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8 */
typedef uint8_t ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8_Type[1][3][5];
const bool ATTR_DUMMY_SCRATCH_PLAT_INIT_UINT8_Privileged = false;

/* ATTR_EXECUTION_PLATFORM */
typedef uint8_t ATTR_EXECUTION_PLATFORM_Type;
const bool ATTR_EXECUTION_PLATFORM_Privileged = false;
enum ATTR_EXECUTION_PLATFORM_Enum
{
    ENUM_ATTR_EXECUTION_PLATFORM_HOST = 0x01,
    ENUM_ATTR_EXECUTION_PLATFORM_FSP = 0x02,
    ENUM_ATTR_EXECUTION_PLATFORM_OCC = 0x03,
};
#define ATTR_EXECUTION_PLATFORM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_IS_SIMULATION */
typedef uint8_t ATTR_IS_SIMULATION_Type;
const bool ATTR_IS_SIMULATION_Privileged = false;
#define ATTR_IS_SIMULATION_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_EPS_TABLE_TYPE */
typedef uint8_t ATTR_PROC_EPS_TABLE_TYPE_Type;
const bool ATTR_PROC_EPS_TABLE_TYPE_Privileged = false;
enum ATTR_PROC_EPS_TABLE_TYPE_Enum
{
    ENUM_ATTR_PROC_EPS_TABLE_TYPE_EPS_TYPE_LE = 0x01,
    ENUM_ATTR_PROC_EPS_TABLE_TYPE_EPS_TYPE_HE = 0x02,
};
#define ATTR_PROC_EPS_TABLE_TYPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FABRIC_PUMP_MODE */
typedef uint8_t ATTR_PROC_FABRIC_PUMP_MODE_Type;
const bool ATTR_PROC_FABRIC_PUMP_MODE_Privileged = false;
enum ATTR_PROC_FABRIC_PUMP_MODE_Enum
{
    ENUM_ATTR_PROC_FABRIC_PUMP_MODE_MODE1 = 0x01,
    ENUM_ATTR_PROC_FABRIC_PUMP_MODE_MODE2 = 0x02,
};
#define ATTR_PROC_FABRIC_PUMP_MODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_X_BUS_WIDTH */
typedef uint8_t ATTR_PROC_X_BUS_WIDTH_Type;
const bool ATTR_PROC_X_BUS_WIDTH_Privileged = false;
enum ATTR_PROC_X_BUS_WIDTH_Enum
{
    ENUM_ATTR_PROC_X_BUS_WIDTH_W4BYTE = 0x01,
    ENUM_ATTR_PROC_X_BUS_WIDTH_W8BYTE = 0x02,
};
#define ATTR_PROC_X_BUS_WIDTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_ALL_MCS_IN_INTERLEAVING_GROUP */
typedef uint8_t ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_Type;
const bool ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_Privileged = false;
#define ATTR_ALL_MCS_IN_INTERLEAVING_GROUP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_CHIP_UNIT_POS */
typedef uint8_t ATTR_CHIP_UNIT_POS_Type;
const bool ATTR_CHIP_UNIT_POS_Privileged = false;
#define ATTR_CHIP_UNIT_POS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_EI_BUS_RX_MSB_LSB_SWAP */
typedef uint8_t ATTR_EI_BUS_RX_MSB_LSB_SWAP_Type;
const bool ATTR_EI_BUS_RX_MSB_LSB_SWAP_Privileged = false;
#define ATTR_EI_BUS_RX_MSB_LSB_SWAP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_EI_BUS_TX_MSB_LSB_SWAP */
typedef uint8_t ATTR_EI_BUS_TX_MSB_LSB_SWAP_Type;
const bool ATTR_EI_BUS_TX_MSB_LSB_SWAP_Privileged = false;
#define ATTR_EI_BUS_TX_MSB_LSB_SWAP_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_DRAM_DEVICE_TYPE */
typedef uint8_t ATTR_SPD_DRAM_DEVICE_TYPE_Type;
const bool ATTR_SPD_DRAM_DEVICE_TYPE_Privileged = false;
enum ATTR_SPD_DRAM_DEVICE_TYPE_Enum
{
    ENUM_ATTR_SPD_DRAM_DEVICE_TYPE_DDR3 = 0x0b,
    ENUM_ATTR_SPD_DRAM_DEVICE_TYPE_DDR4 = 0x0c,
};
#define ATTR_SPD_DRAM_DEVICE_TYPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_TYPE */
typedef uint8_t ATTR_SPD_MODULE_TYPE_Type;
const bool ATTR_SPD_MODULE_TYPE_Privileged = false;
enum ATTR_SPD_MODULE_TYPE_Enum
{
    ENUM_ATTR_SPD_MODULE_TYPE_CDIMM = 0x00,
    ENUM_ATTR_SPD_MODULE_TYPE_RDIMM = 0x01,
    ENUM_ATTR_SPD_MODULE_TYPE_UDIMM = 0x02,
    ENUM_ATTR_SPD_MODULE_TYPE_LRDIMM = 0x0b,
};
#define ATTR_SPD_MODULE_TYPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_BANKS */
typedef uint8_t ATTR_SPD_SDRAM_BANKS_Type;
const bool ATTR_SPD_SDRAM_BANKS_Privileged = false;
enum ATTR_SPD_SDRAM_BANKS_Enum
{
    ENUM_ATTR_SPD_SDRAM_BANKS_B8 = 0x00,
    ENUM_ATTR_SPD_SDRAM_BANKS_B16 = 0x01,
    ENUM_ATTR_SPD_SDRAM_BANKS_B32 = 0x02,
    ENUM_ATTR_SPD_SDRAM_BANKS_B64 = 0x03,
};
#define ATTR_SPD_SDRAM_BANKS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_DENSITY */
typedef uint8_t ATTR_SPD_SDRAM_DENSITY_Type;
const bool ATTR_SPD_SDRAM_DENSITY_Privileged = false;
enum ATTR_SPD_SDRAM_DENSITY_Enum
{
    ENUM_ATTR_SPD_SDRAM_DENSITY_D256MB = 0x00,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D512Mb = 0x01,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D1GB = 0x02,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D2GB = 0x03,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D4GB = 0x04,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D8GB = 0x05,
    ENUM_ATTR_SPD_SDRAM_DENSITY_D16GB = 0x06,
};
#define ATTR_SPD_SDRAM_DENSITY_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_ROWS */
typedef uint8_t ATTR_SPD_SDRAM_ROWS_Type;
const bool ATTR_SPD_SDRAM_ROWS_Privileged = false;
enum ATTR_SPD_SDRAM_ROWS_Enum
{
    ENUM_ATTR_SPD_SDRAM_ROWS_R12 = 0x00,
    ENUM_ATTR_SPD_SDRAM_ROWS_R13 = 0x01,
    ENUM_ATTR_SPD_SDRAM_ROWS_R14 = 0x02,
    ENUM_ATTR_SPD_SDRAM_ROWS_R15 = 0x03,
    ENUM_ATTR_SPD_SDRAM_ROWS_R16 = 0x04,
};
#define ATTR_SPD_SDRAM_ROWS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_COLUMNS */
typedef uint8_t ATTR_SPD_SDRAM_COLUMNS_Type;
const bool ATTR_SPD_SDRAM_COLUMNS_Privileged = false;
enum ATTR_SPD_SDRAM_COLUMNS_Enum
{
    ENUM_ATTR_SPD_SDRAM_COLUMNS_C9 = 0x00,
    ENUM_ATTR_SPD_SDRAM_COLUMNS_C10 = 0x01,
    ENUM_ATTR_SPD_SDRAM_COLUMNS_C11 = 0x02,
    ENUM_ATTR_SPD_SDRAM_COLUMNS_C12 = 0x03,
};
#define ATTR_SPD_SDRAM_COLUMNS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_NOMINAL_VOLTAGE */
typedef uint8_t ATTR_SPD_MODULE_NOMINAL_VOLTAGE_Type;
const bool ATTR_SPD_MODULE_NOMINAL_VOLTAGE_Privileged = false;
enum ATTR_SPD_MODULE_NOMINAL_VOLTAGE_Enum
{
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_NOTOP1_5 = 0x01,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_OP1_35 = 0x02,
    ENUM_ATTR_SPD_MODULE_NOMINAL_VOLTAGE_OP1_2X = 0x04,
};
#define ATTR_SPD_MODULE_NOMINAL_VOLTAGE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_NUM_RANKS */
typedef uint8_t ATTR_SPD_NUM_RANKS_Type;
const bool ATTR_SPD_NUM_RANKS_Privileged = false;
enum ATTR_SPD_NUM_RANKS_Enum
{
    ENUM_ATTR_SPD_NUM_RANKS_R1 = 0x00,
    ENUM_ATTR_SPD_NUM_RANKS_R2 = 0x01,
    ENUM_ATTR_SPD_NUM_RANKS_R3 = 0x02,
    ENUM_ATTR_SPD_NUM_RANKS_R4 = 0x03,
};
#define ATTR_SPD_NUM_RANKS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_DRAM_WIDTH */
typedef uint8_t ATTR_SPD_DRAM_WIDTH_Type;
const bool ATTR_SPD_DRAM_WIDTH_Privileged = false;
enum ATTR_SPD_DRAM_WIDTH_Enum
{
    ENUM_ATTR_SPD_DRAM_WIDTH_W4 = 0x00,
    ENUM_ATTR_SPD_DRAM_WIDTH_W8 = 0x01,
    ENUM_ATTR_SPD_DRAM_WIDTH_W16 = 0x02,
    ENUM_ATTR_SPD_DRAM_WIDTH_W32 = 0x03,
};
#define ATTR_SPD_DRAM_WIDTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_MEMORY_BUS_WIDTH */
typedef uint8_t ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_Type;
const bool ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_Privileged = false;
enum ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_Enum
{
    ENUM_ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_W8 = 0x00,
    ENUM_ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_W16 = 0x01,
    ENUM_ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_W32 = 0x02,
    ENUM_ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_W64 = 0x03,
};
#define ATTR_SPD_MODULE_MEMORY_BUS_WIDTH_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FTB_DIVIDEND */
typedef uint8_t ATTR_SPD_FTB_DIVIDEND_Type;
const bool ATTR_SPD_FTB_DIVIDEND_Privileged = false;
#define ATTR_SPD_FTB_DIVIDEND_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FTB_DIVISOR */
typedef uint8_t ATTR_SPD_FTB_DIVISOR_Type;
const bool ATTR_SPD_FTB_DIVISOR_Privileged = false;
#define ATTR_SPD_FTB_DIVISOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MTB_DIVIDEND */
typedef uint8_t ATTR_SPD_MTB_DIVIDEND_Type;
const bool ATTR_SPD_MTB_DIVIDEND_Privileged = false;
#define ATTR_SPD_MTB_DIVIDEND_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MTB_DIVISOR */
typedef uint8_t ATTR_SPD_MTB_DIVISOR_Type;
const bool ATTR_SPD_MTB_DIVISOR_Privileged = false;
#define ATTR_SPD_MTB_DIVISOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TCKMIN */
typedef uint8_t ATTR_SPD_TCKMIN_Type;
const bool ATTR_SPD_TCKMIN_Privileged = false;
#define ATTR_SPD_TCKMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_CAS_LATENCIES_SUPPORTED */
typedef uint32_t ATTR_SPD_CAS_LATENCIES_SUPPORTED_Type;
const bool ATTR_SPD_CAS_LATENCIES_SUPPORTED_Privileged = false;
enum ATTR_SPD_CAS_LATENCIES_SUPPORTED_Enum
{
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_18 = 0x00004000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_17 = 0x00002000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_16 = 0x00001000,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_15 = 0x00000800,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_14 = 0x00000400,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_13 = 0x00000200,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_12 = 0x00000100,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_11 = 0x00000080,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_10 = 0x00000040,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_9  = 0x00000020,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_8  = 0x00000010,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_7  = 0x00000008,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_6  = 0x00000004,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_5  = 0x00000002,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_CL_4  = 0x00000001,
    ENUM_ATTR_SPD_CAS_LATENCIES_SUPPORTED_,
};
#define ATTR_SPD_CAS_LATENCIES_SUPPORTED_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TAAMIN */
typedef uint8_t ATTR_SPD_TAAMIN_Type;
const bool ATTR_SPD_TAAMIN_Privileged = false;
#define ATTR_SPD_TAAMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TWRMIN */
typedef uint8_t ATTR_SPD_TWRMIN_Type;
const bool ATTR_SPD_TWRMIN_Privileged = false;
#define ATTR_SPD_TWRMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRCDMIN */
typedef uint8_t ATTR_SPD_TRCDMIN_Type;
const bool ATTR_SPD_TRCDMIN_Privileged = false;
#define ATTR_SPD_TRCDMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRRDMIN */
typedef uint8_t ATTR_SPD_TRRDMIN_Type;
const bool ATTR_SPD_TRRDMIN_Privileged = false;
#define ATTR_SPD_TRRDMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRPMIN */
typedef uint8_t ATTR_SPD_TRPMIN_Type;
const bool ATTR_SPD_TRPMIN_Privileged = false;
#define ATTR_SPD_TRPMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRASMIN */
typedef uint32_t ATTR_SPD_TRASMIN_Type;
const bool ATTR_SPD_TRASMIN_Privileged = false;
#define ATTR_SPD_TRASMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRCMIN */
typedef uint32_t ATTR_SPD_TRCMIN_Type;
const bool ATTR_SPD_TRCMIN_Privileged = false;
#define ATTR_SPD_TRCMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRFCMIN */
typedef uint32_t ATTR_SPD_TRFCMIN_Type;
const bool ATTR_SPD_TRFCMIN_Privileged = false;
#define ATTR_SPD_TRFCMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TWTRMIN */
typedef uint8_t ATTR_SPD_TWTRMIN_Type;
const bool ATTR_SPD_TWTRMIN_Privileged = false;
#define ATTR_SPD_TWTRMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TRTPMIN */
typedef uint8_t ATTR_SPD_TRTPMIN_Type;
const bool ATTR_SPD_TRTPMIN_Privileged = false;
#define ATTR_SPD_TRTPMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_TFAWMIN */
typedef uint32_t ATTR_SPD_TFAWMIN_Type;
const bool ATTR_SPD_TFAWMIN_Privileged = false;
#define ATTR_SPD_TFAWMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_OPTIONAL_FEATURES */
typedef uint8_t ATTR_SPD_SDRAM_OPTIONAL_FEATURES_Type;
const bool ATTR_SPD_SDRAM_OPTIONAL_FEATURES_Privileged = false;
enum ATTR_SPD_SDRAM_OPTIONAL_FEATURES_Enum
{
    ENUM_ATTR_SPD_SDRAM_OPTIONAL_FEATURES_DLL_OFF = 0x80,
    ENUM_ATTR_SPD_SDRAM_OPTIONAL_FEATURES_RZQ7 = 0x02,
    ENUM_ATTR_SPD_SDRAM_OPTIONAL_FEATURES_RZQ6 = 0x01,
};
#define ATTR_SPD_SDRAM_OPTIONAL_FEATURES_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS */
typedef uint8_t ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_Type;
const bool ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_Privileged = false;
enum ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_Enum
{
    ENUM_ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_PASR = 0x80,
    ENUM_ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_ODTS = 0x08,
    ENUM_ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_ASR = 0x05,
    ENUM_ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_ETRR = 0x02,
    ENUM_ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_ETR = 0x01,
};
#define ATTR_SPD_SDRAM_THERMAL_AND_REFRESH_OPTIONS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_THERMAL_SENSOR */
typedef uint8_t ATTR_SPD_MODULE_THERMAL_SENSOR_Type;
const bool ATTR_SPD_MODULE_THERMAL_SENSOR_Privileged = false;
enum ATTR_SPD_MODULE_THERMAL_SENSOR_Enum
{
    ENUM_ATTR_SPD_MODULE_THERMAL_SENSOR_PRESENT = 0x80,
    ENUM_ATTR_SPD_MODULE_THERMAL_SENSOR_ACCURACY_MASK = 0x7F,
};
#define ATTR_SPD_MODULE_THERMAL_SENSOR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_DEVICE_TYPE */
typedef uint8_t ATTR_SPD_SDRAM_DEVICE_TYPE_Type;
const bool ATTR_SPD_SDRAM_DEVICE_TYPE_Privileged = false;
enum ATTR_SPD_SDRAM_DEVICE_TYPE_Enum
{
    ENUM_ATTR_SPD_SDRAM_DEVICE_TYPE_STANDARD_MONOLITHIC = 0x00,
    ENUM_ATTR_SPD_SDRAM_DEVICE_TYPE_NON_STANDARD = 0x80,
};
#define ATTR_SPD_SDRAM_DEVICE_TYPE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING */
typedef uint8_t ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_Type;
const bool ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_Privileged = false;
enum ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_Enum
{
    ENUM_ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_NOT_SPECIFIED = 0x00,
    ENUM_ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_MULTI_LOAD_STACK = 0x01,
    ENUM_ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_SINGLE_LOAD_STACK = 0x02,
};
#define ATTR_SPD_SDRAM_DEVICE_TYPE_SIGNAL_LOADING_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_SDRAM_DIE_COUNT */
typedef uint8_t ATTR_SPD_SDRAM_DIE_COUNT_Type;
const bool ATTR_SPD_SDRAM_DIE_COUNT_Privileged = false;
#define ATTR_SPD_SDRAM_DIE_COUNT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TCKMIN */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TCKMIN_Type;
const bool ATTR_SPD_FINE_OFFSET_TCKMIN_Privileged = false;
#define ATTR_SPD_FINE_OFFSET_TCKMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TAAMIN */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TAAMIN_Type;
const bool ATTR_SPD_FINE_OFFSET_TAAMIN_Privileged = false;
#define ATTR_SPD_FINE_OFFSET_TAAMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TRCDMIN */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TRCDMIN_Type;
const bool ATTR_SPD_FINE_OFFSET_TRCDMIN_Privileged = false;
#define ATTR_SPD_FINE_OFFSET_TRCDMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TRPMIN */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TRPMIN_Type;
const bool ATTR_SPD_FINE_OFFSET_TRPMIN_Privileged = false;
#define ATTR_SPD_FINE_OFFSET_TRPMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_FINE_OFFSET_TRCMIN */
typedef uint8_t ATTR_SPD_FINE_OFFSET_TRCMIN_Type;
const bool ATTR_SPD_FINE_OFFSET_TRCMIN_Privileged = false;
#define ATTR_SPD_FINE_OFFSET_TRCMIN_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_NUM_OF_REGISTERS_USED_ON_RDIMM */
typedef uint8_t ATTR_SPD_NUM_OF_REGISTERS_USED_ON_RDIMM_Type;
const bool ATTR_SPD_NUM_OF_REGISTERS_USED_ON_RDIMM_Privileged = false;
#define ATTR_SPD_NUM_OF_REGISTERS_USED_ON_RDIMM_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_SPECIFIC_SECTION */
typedef uint8_t ATTR_SPD_MODULE_SPECIFIC_SECTION_Type[57];
const bool ATTR_SPD_MODULE_SPECIFIC_SECTION_Privileged = false;
#define ATTR_SPD_MODULE_SPECIFIC_SECTION_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_ID_MODULE_MANUFACTURERS_JEDEC_ID_CODE */
typedef uint32_t ATTR_SPD_MODULE_ID_MODULE_MANUFACTURERS_JEDEC_ID_CODE_Type;
const bool ATTR_SPD_MODULE_ID_MODULE_MANUFACTURERS_JEDEC_ID_CODE_Privileged = false;
#define ATTR_SPD_MODULE_ID_MODULE_MANUFACTURERS_JEDEC_ID_CODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_LOCATION */
typedef uint8_t ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_LOCATION_Type;
const bool ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_LOCATION_Privileged = false;
#define ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_LOCATION_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_DATE */
typedef uint32_t ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_DATE_Type;
const bool ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_DATE_Privileged = false;
#define ATTR_SPD_MODULE_ID_MODULE_MANUFACTURING_DATE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_ID_MODULE_SERIAL_NUMBER */
typedef uint32_t ATTR_SPD_MODULE_ID_MODULE_SERIAL_NUMBER_Type;
const bool ATTR_SPD_MODULE_ID_MODULE_SERIAL_NUMBER_Privileged = false;
#define ATTR_SPD_MODULE_ID_MODULE_SERIAL_NUMBER_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_CYCLICAL_REDUNDANCY_CODE */
typedef uint32_t ATTR_SPD_CYCLICAL_REDUNDANCY_CODE_Type;
const bool ATTR_SPD_CYCLICAL_REDUNDANCY_CODE_Privileged = false;
#define ATTR_SPD_CYCLICAL_REDUNDANCY_CODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_PART_NUMBER */
typedef uint8_t ATTR_SPD_MODULE_PART_NUMBER_Type[18];
const bool ATTR_SPD_MODULE_PART_NUMBER_Privileged = false;
#define ATTR_SPD_MODULE_PART_NUMBER_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_MODULE_REVISION_CODE */
typedef uint32_t ATTR_SPD_MODULE_REVISION_CODE_Type;
const bool ATTR_SPD_MODULE_REVISION_CODE_Privileged = false;
#define ATTR_SPD_MODULE_REVISION_CODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_DRAM_MANUFACTURER_JEDEC_ID_CODE */
typedef uint32_t ATTR_SPD_DRAM_MANUFACTURER_JEDEC_ID_CODE_Type;
const bool ATTR_SPD_DRAM_MANUFACTURER_JEDEC_ID_CODE_Privileged = false;
#define ATTR_SPD_DRAM_MANUFACTURER_JEDEC_ID_CODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SPD_BAD_DQ_DATA */
typedef uint8_t ATTR_SPD_BAD_DQ_DATA_Type[80];
const bool ATTR_SPD_BAD_DQ_DATA_Privileged = false;

/* ATTR_MSS_VOLT */
typedef uint32_t ATTR_MSS_VOLT_Type;
const bool ATTR_MSS_VOLT_Privileged = false;

/* ATTR_MSS_FREQ */
typedef uint32_t ATTR_MSS_FREQ_Type;
const bool ATTR_MSS_FREQ_Privileged = false;

/* ATTR_MSS_DIMM_MFG_ID_CODE */
typedef uint32_t ATTR_MSS_DIMM_MFG_ID_CODE_Type[2][2];
const bool ATTR_MSS_DIMM_MFG_ID_CODE_Privileged = false;

/* ATTR_MSS_BAD_BIT_MASK */
typedef uint8_t ATTR_MSS_BAD_BIT_MASK_Type[2][2][4][10];
const bool ATTR_MSS_BAD_BIT_MASK_Privileged = false;

/* ATTR_EFF_DIMM_RANKS_CONFIGED */
typedef uint8_t ATTR_EFF_DIMM_RANKS_CONFIGED_Type[2][2];
const bool ATTR_EFF_DIMM_RANKS_CONFIGED_Privileged = false;

/* ATTR_EFF_NUM_RANKS_PER_DIMM */
typedef uint8_t ATTR_EFF_NUM_RANKS_PER_DIMM_Type[2][2];
const bool ATTR_EFF_NUM_RANKS_PER_DIMM_Privileged = false;

/* ATTR_EFF_DIMM_TYPE */
typedef uint8_t ATTR_EFF_DIMM_TYPE_Type;
const bool ATTR_EFF_DIMM_TYPE_Privileged = false;
enum ATTR_EFF_DIMM_TYPE_Enum
{
    ENUM_ATTR_EFF_DIMM_TYPE_CDIMM = 0,
    ENUM_ATTR_EFF_DIMM_TYPE_RDIMM = 1,
    ENUM_ATTR_EFF_DIMM_TYPE_UDIMM = 2,
    ENUM_ATTR_EFF_DIMM_TYPE_LRDIMM = 3,
};

/* ATTR_EFF_DRAM_WIDTH */
typedef uint8_t ATTR_EFF_DRAM_WIDTH_Type;
const bool ATTR_EFF_DRAM_WIDTH_Privileged = false;
enum ATTR_EFF_DRAM_WIDTH_Enum
{
    ENUM_ATTR_EFF_DRAM_WIDTH_X4 = 4,
    ENUM_ATTR_EFF_DRAM_WIDTH_X8 = 8,
    ENUM_ATTR_EFF_DRAM_WIDTH_X16 = 16,
    ENUM_ATTR_EFF_DRAM_WIDTH_X32 = 32,
};

/* ATTR_EFF_DRAM_GEN */
typedef uint8_t ATTR_EFF_DRAM_GEN_Type;
const bool ATTR_EFF_DRAM_GEN_Privileged = false;
enum ATTR_EFF_DRAM_GEN_Enum
{
    ENUM_ATTR_EFF_DRAM_GEN_EMPTY = 0,
    ENUM_ATTR_EFF_DRAM_GEN_DDR3 = 1,
    ENUM_ATTR_EFF_DRAM_GEN_DDR4 = 2,
};

/* ATTR_EFF_PRIMARY_RANK_GROUP0 */
typedef uint8_t ATTR_EFF_PRIMARY_RANK_GROUP0_Type[2];
const bool ATTR_EFF_PRIMARY_RANK_GROUP0_Privileged = false;
enum ATTR_EFF_PRIMARY_RANK_GROUP0_Enum
{
    ENUM_ATTR_EFF_PRIMARY_RANK_GROUP0_INVALID = 255,
};

/* ATTR_EFF_PRIMARY_RANK_GROUP1 */
typedef uint8_t ATTR_EFF_PRIMARY_RANK_GROUP1_Type[2];
const bool ATTR_EFF_PRIMARY_RANK_GROUP1_Privileged = false;
enum ATTR_EFF_PRIMARY_RANK_GROUP1_Enum
{
    ENUM_ATTR_EFF_PRIMARY_RANK_GROUP1_INVALID = 255,
};

/* ATTR_EFF_PRIMARY_RANK_GROUP2 */
typedef uint8_t ATTR_EFF_PRIMARY_RANK_GROUP2_Type[2];
const bool ATTR_EFF_PRIMARY_RANK_GROUP2_Privileged = false;
enum ATTR_EFF_PRIMARY_RANK_GROUP2_Enum
{
    ENUM_ATTR_EFF_PRIMARY_RANK_GROUP2_INVALID = 255,
};

/* ATTR_EFF_PRIMARY_RANK_GROUP3 */
typedef uint8_t ATTR_EFF_PRIMARY_RANK_GROUP3_Type[2];
const bool ATTR_EFF_PRIMARY_RANK_GROUP3_Privileged = false;
enum ATTR_EFF_PRIMARY_RANK_GROUP3_Enum
{
    ENUM_ATTR_EFF_PRIMARY_RANK_GROUP3_INVALID = 255,
};

/* ATTR_EFF_SECONDARY_RANK_GROUP0 */
typedef uint8_t ATTR_EFF_SECONDARY_RANK_GROUP0_Type[2];
const bool ATTR_EFF_SECONDARY_RANK_GROUP0_Privileged = false;
enum ATTR_EFF_SECONDARY_RANK_GROUP0_Enum
{
    ENUM_ATTR_EFF_SECONDARY_RANK_GROUP0_INVALID = 255,
};

/* ATTR_EFF_SECONDARY_RANK_GROUP1 */
typedef uint8_t ATTR_EFF_SECONDARY_RANK_GROUP1_Type[2];
const bool ATTR_EFF_SECONDARY_RANK_GROUP1_Privileged = false;
enum ATTR_EFF_SECONDARY_RANK_GROUP1_Enum
{
    ENUM_ATTR_EFF_SECONDARY_RANK_GROUP1_INVALID = 255,
};

/* ATTR_EFF_SECONDARY_RANK_GROUP2 */
typedef uint8_t ATTR_EFF_SECONDARY_RANK_GROUP2_Type[2];
const bool ATTR_EFF_SECONDARY_RANK_GROUP2_Privileged = false;
enum ATTR_EFF_SECONDARY_RANK_GROUP2_Enum
{
    ENUM_ATTR_EFF_SECONDARY_RANK_GROUP2_INVALID = 255,
};

/* ATTR_EFF_SECONDARY_RANK_GROUP3 */
typedef uint8_t ATTR_EFF_SECONDARY_RANK_GROUP3_Type[2];
const bool ATTR_EFF_SECONDARY_RANK_GROUP3_Privileged = false;
enum ATTR_EFF_SECONDARY_RANK_GROUP3_Enum
{
    ENUM_ATTR_EFF_SECONDARY_RANK_GROUP3_INVALID = 255,
};

/* ATTR_EFF_TERTIARY_RANK_GROUP0 */
typedef uint8_t ATTR_EFF_TERTIARY_RANK_GROUP0_Type[2];
const bool ATTR_EFF_TERTIARY_RANK_GROUP0_Privileged = false;
enum ATTR_EFF_TERTIARY_RANK_GROUP0_Enum
{
    ENUM_ATTR_EFF_TERTIARY_RANK_GROUP0_INVALID = 255,
};

/* ATTR_EFF_TERTIARY_RANK_GROUP1 */
typedef uint8_t ATTR_EFF_TERTIARY_RANK_GROUP1_Type[2];
const bool ATTR_EFF_TERTIARY_RANK_GROUP1_Privileged = false;
enum ATTR_EFF_TERTIARY_RANK_GROUP1_Enum
{
    ENUM_ATTR_EFF_TERTIARY_RANK_GROUP1_INVALID = 255,
};

/* ATTR_EFF_TERTIARY_RANK_GROUP2 */
typedef uint8_t ATTR_EFF_TERTIARY_RANK_GROUP2_Type[2];
const bool ATTR_EFF_TERTIARY_RANK_GROUP2_Privileged = false;
enum ATTR_EFF_TERTIARY_RANK_GROUP2_Enum
{
    ENUM_ATTR_EFF_TERTIARY_RANK_GROUP2_INVALID = 255,
};

/* ATTR_EFF_TERTIARY_RANK_GROUP3 */
typedef uint8_t ATTR_EFF_TERTIARY_RANK_GROUP3_Type[2];
const bool ATTR_EFF_TERTIARY_RANK_GROUP3_Privileged = false;
enum ATTR_EFF_TERTIARY_RANK_GROUP3_Enum
{
    ENUM_ATTR_EFF_TERTIARY_RANK_GROUP3_INVALID = 255,
};

/* ATTR_EFF_QUATERNARY_RANK_GROUP0 */
typedef uint8_t ATTR_EFF_QUATERNARY_RANK_GROUP0_Type[2];
const bool ATTR_EFF_QUATERNARY_RANK_GROUP0_Privileged = false;
enum ATTR_EFF_QUATERNARY_RANK_GROUP0_Enum
{
    ENUM_ATTR_EFF_QUATERNARY_RANK_GROUP0_INVALID = 255,
};

/* ATTR_EFF_QUATERNARY_RANK_GROUP1 */
typedef uint8_t ATTR_EFF_QUATERNARY_RANK_GROUP1_Type[2];
const bool ATTR_EFF_QUATERNARY_RANK_GROUP1_Privileged = false;
enum ATTR_EFF_QUATERNARY_RANK_GROUP1_Enum
{
    ENUM_ATTR_EFF_QUATERNARY_RANK_GROUP1_INVALID = 255,
};

/* ATTR_EFF_QUATERNARY_RANK_GROUP2 */
typedef uint8_t ATTR_EFF_QUATERNARY_RANK_GROUP2_Type[2];
const bool ATTR_EFF_QUATERNARY_RANK_GROUP2_Privileged = false;
enum ATTR_EFF_QUATERNARY_RANK_GROUP2_Enum
{
    ENUM_ATTR_EFF_QUATERNARY_RANK_GROUP2_INVALID = 255,
};

/* ATTR_EFF_QUATERNARY_RANK_GROUP3 */
typedef uint8_t ATTR_EFF_QUATERNARY_RANK_GROUP3_Type[2];
const bool ATTR_EFF_QUATERNARY_RANK_GROUP3_Privileged = false;
enum ATTR_EFF_QUATERNARY_RANK_GROUP3_Enum
{
    ENUM_ATTR_EFF_QUATERNARY_RANK_GROUP3_INVALID = 255,
};

/* ATTR_EFF_ODT_RD */
typedef uint8_t ATTR_EFF_ODT_RD_Type[2][2][4];
const bool ATTR_EFF_ODT_RD_Privileged = false;

/* ATTR_EFF_ODT_WR */
typedef uint8_t ATTR_EFF_ODT_WR_Type[2][2][4];
const bool ATTR_EFF_ODT_WR_Privileged = false;

/* ATTR_EFF_DRAM_RON */
typedef uint8_t ATTR_EFF_DRAM_RON_Type[2][2];
const bool ATTR_EFF_DRAM_RON_Privileged = false;
enum ATTR_EFF_DRAM_RON_Enum
{
    ENUM_ATTR_EFF_DRAM_RON_OHM34 = 34,
    ENUM_ATTR_EFF_DRAM_RON_OHM40 = 40,
};

/* ATTR_EFF_DRAM_RTT_NOM */
typedef uint8_t ATTR_EFF_DRAM_RTT_NOM_Type[2][2][4];
const bool ATTR_EFF_DRAM_RTT_NOM_Privileged = false;
enum ATTR_EFF_DRAM_RTT_NOM_Enum
{
    ENUM_ATTR_EFF_DRAM_RTT_NOM_DISABLE = 0,
    ENUM_ATTR_EFF_DRAM_RTT_NOM_OHM20 = 20,
    ENUM_ATTR_EFF_DRAM_RTT_NOM_OHM30 = 30,
    ENUM_ATTR_EFF_DRAM_RTT_NOM_OHM34 = 34,
    ENUM_ATTR_EFF_DRAM_RTT_NOM_OHM40 = 40,
    ENUM_ATTR_EFF_DRAM_RTT_NOM_OHM48 = 48,
    ENUM_ATTR_EFF_DRAM_RTT_NOM_OHM60 = 60,
    ENUM_ATTR_EFF_DRAM_RTT_NOM_OHM80 = 80,
    ENUM_ATTR_EFF_DRAM_RTT_NOM_OHM120 = 120,
    ENUM_ATTR_EFF_DRAM_RTT_NOM_OHM240 = 240,
};

/* ATTR_EFF_DRAM_RTT_WR */
typedef uint8_t ATTR_EFF_DRAM_RTT_WR_Type[2][2][4];
const bool ATTR_EFF_DRAM_RTT_WR_Privileged = false;
enum ATTR_EFF_DRAM_RTT_WR_Enum
{
    ENUM_ATTR_EFF_DRAM_RTT_WR_DISABLE = 0,
    ENUM_ATTR_EFF_DRAM_RTT_WR_OHM60 = 60,
    ENUM_ATTR_EFF_DRAM_RTT_WR_OHM120 = 120,
};

/* ATTR_EFF_DRAM_WR_VREF */
typedef uint32_t ATTR_EFF_DRAM_WR_VREF_Type;
const bool ATTR_EFF_DRAM_WR_VREF_Privileged = false;
enum ATTR_EFF_DRAM_WR_VREF_Enum
{
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD420 = 420,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD425 = 425,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD430 = 430,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD435 = 435,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD440 = 440,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD445 = 445,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD450 = 450,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD455 = 455,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD460 = 460,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD465 = 465,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD470 = 470,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD475 = 475,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD480 = 480,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD485 = 485,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD490 = 490,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD495 = 495,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD500 = 500,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD505 = 505,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD510 = 510,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD515 = 515,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD520 = 520,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD525 = 525,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD530 = 530,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD535 = 535,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD540 = 540,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD545 = 545,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD550 = 550,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD555 = 555,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD560 = 560,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD565 = 565,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD570 = 570,
    ENUM_ATTR_EFF_DRAM_WR_VREF_VDD575 = 575,
};

/* ATTR_EFF_CEN_DRV_IMP_DQ_DQS */
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_DQ_DQS_Type;
const bool ATTR_EFF_CEN_DRV_IMP_DQ_DQS_Privileged = false;
enum ATTR_EFF_CEN_DRV_IMP_DQ_DQS_Enum
{
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM24 = 24,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM30 = 30,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM34 = 34,
    ENUM_ATTR_EFF_CEN_DRV_IMP_DQ_DQS_OHM40 = 40,
};

/* ATTR_EFF_CEN_DRV_IMP_CMD */
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_CMD_Type;
const bool ATTR_EFF_CEN_DRV_IMP_CMD_Privileged = false;
enum ATTR_EFF_CEN_DRV_IMP_CMD_Enum
{
    ENUM_ATTR_EFF_CEN_DRV_IMP_CMD_OHM15 = 15,
    ENUM_ATTR_EFF_CEN_DRV_IMP_CMD_OHM20 = 20,
    ENUM_ATTR_EFF_CEN_DRV_IMP_CMD_OHM30 = 30,
    ENUM_ATTR_EFF_CEN_DRV_IMP_CMD_OHM40 = 40,
};

/* ATTR_EFF_CEN_DRV_IMP_CNTL */
typedef uint8_t ATTR_EFF_CEN_DRV_IMP_CNTL_Type;
const bool ATTR_EFF_CEN_DRV_IMP_CNTL_Privileged = false;
enum ATTR_EFF_CEN_DRV_IMP_CNTL_Enum
{
    ENUM_ATTR_EFF_CEN_DRV_IMP_CNTL_OHM15 = 15,
    ENUM_ATTR_EFF_CEN_DRV_IMP_CNTL_OHM20 = 20,
    ENUM_ATTR_EFF_CEN_DRV_IMP_CNTL_OHM30 = 30,
    ENUM_ATTR_EFF_CEN_DRV_IMP_CNTL_OHM40 = 40,
};

/* ATTR_EFF_CEN_RCV_IMP_DQ_DQS */
typedef uint8_t ATTR_EFF_CEN_RCV_IMP_DQ_DQS_Type;
const bool ATTR_EFF_CEN_RCV_IMP_DQ_DQS_Privileged = false;
enum ATTR_EFF_CEN_RCV_IMP_DQ_DQS_Enum
{
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM15 = 15,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM20 = 20,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM30 = 30,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM40 = 40,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM48 = 48,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM60 = 60,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM80 = 80,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM120 = 120,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM160 = 160,
    ENUM_ATTR_EFF_CEN_RCV_IMP_DQ_DQS_OHM240 = 240,
};

/* ATTR_EFF_CEN_SLEW_RATE_DQ_DQS */
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_Type;
const bool ATTR_EFF_CEN_SLEW_RATE_DQ_DQS_Privileged = false;

/* ATTR_EFF_CEN_SLEW_RATE_CMD */
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_CMD_Type;
const bool ATTR_EFF_CEN_SLEW_RATE_CMD_Privileged = false;

/* ATTR_EFF_CEN_SLEW_RATE_CNTL */
typedef uint8_t ATTR_EFF_CEN_SLEW_RATE_CNTL_Type;
const bool ATTR_EFF_CEN_SLEW_RATE_CNTL_Privileged = false;

/* ATTR_EFF_CEN_RD_VREF */
typedef uint32_t ATTR_EFF_CEN_RD_VREF_Type;
const bool ATTR_EFF_CEN_RD_VREF_Privileged = false;
enum ATTR_EFF_CEN_RD_VREF_Enum
{
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD40375 = 40375,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD41750 = 41750,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD43125 = 43125,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD44500 = 44500,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD45875 = 45875,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD47250 = 47250,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD48625 = 48625,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD50000 = 50000,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD51375 = 51375,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD52750 = 52750,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD54125 = 54125,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD55500 = 55500,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD56875 = 56875,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD58250 = 58250,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD59625 = 59625,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD61000 = 61000,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD60375 = 60375,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD61750 = 61750,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD63125 = 63125,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD64500 = 64500,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD65875 = 65875,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD67250 = 67250,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD68625 = 68625,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD70000 = 70000,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD71375 = 71375,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD72750 = 72750,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD74125 = 74125,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD75500 = 75500,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD76875 = 76875,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD78250 = 78250,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD79625 = 79625,
    ENUM_ATTR_EFF_CEN_RD_VREF_VDD81000 = 81000,
};

/* ATTR_EFF_DIMM_SIZE */
typedef uint8_t ATTR_EFF_DIMM_SIZE_Type[2][2];
const bool ATTR_EFF_DIMM_SIZE_Privileged = false;

/* ATTR_EFF_DRAM_BANKS */
typedef uint8_t ATTR_EFF_DRAM_BANKS_Type;
const bool ATTR_EFF_DRAM_BANKS_Privileged = false;

/* ATTR_EFF_DRAM_ROWS */
typedef uint8_t ATTR_EFF_DRAM_ROWS_Type;
const bool ATTR_EFF_DRAM_ROWS_Privileged = false;

/* ATTR_EFF_DRAM_COLS */
typedef uint8_t ATTR_EFF_DRAM_COLS_Type;
const bool ATTR_EFF_DRAM_COLS_Privileged = false;

/* ATTR_EFF_DRAM_DENSITY */
typedef uint8_t ATTR_EFF_DRAM_DENSITY_Type;
const bool ATTR_EFF_DRAM_DENSITY_Privileged = false;

/* ATTR_EFF_DRAM_TRCD */
typedef uint8_t ATTR_EFF_DRAM_TRCD_Type;
const bool ATTR_EFF_DRAM_TRCD_Privileged = false;

/* ATTR_EFF_DRAM_TRRD */
typedef uint8_t ATTR_EFF_DRAM_TRRD_Type;
const bool ATTR_EFF_DRAM_TRRD_Privileged = false;

/* ATTR_EFF_DRAM_TRP */
typedef uint8_t ATTR_EFF_DRAM_TRP_Type;
const bool ATTR_EFF_DRAM_TRP_Privileged = false;

/* ATTR_EFF_DRAM_TRAS */
typedef uint8_t ATTR_EFF_DRAM_TRAS_Type;
const bool ATTR_EFF_DRAM_TRAS_Privileged = false;

/* ATTR_EFF_DRAM_TRC */
typedef uint8_t ATTR_EFF_DRAM_TRC_Type;
const bool ATTR_EFF_DRAM_TRC_Privileged = false;

/* ATTR_EFF_DRAM_TRFI */
typedef uint32_t ATTR_EFF_DRAM_TRFI_Type;
const bool ATTR_EFF_DRAM_TRFI_Privileged = false;

/* ATTR_EFF_DRAM_TRFC */
typedef uint32_t ATTR_EFF_DRAM_TRFC_Type;
const bool ATTR_EFF_DRAM_TRFC_Privileged = false;

/* ATTR_EFF_DRAM_TWTR */
typedef uint8_t ATTR_EFF_DRAM_TWTR_Type;
const bool ATTR_EFF_DRAM_TWTR_Privileged = false;

/* ATTR_EFF_DRAM_TRTP */
typedef uint8_t ATTR_EFF_DRAM_TRTP_Type;
const bool ATTR_EFF_DRAM_TRTP_Privileged = false;

/* ATTR_EFF_DRAM_TFAW */
typedef uint8_t ATTR_EFF_DRAM_TFAW_Type;
const bool ATTR_EFF_DRAM_TFAW_Privileged = false;

/* ATTR_EFF_DRAM_BL */
typedef uint8_t ATTR_EFF_DRAM_BL_Type;
const bool ATTR_EFF_DRAM_BL_Privileged = false;
enum ATTR_EFF_DRAM_BL_Enum
{
    ENUM_ATTR_EFF_DRAM_BL_BL8 = 0,
    ENUM_ATTR_EFF_DRAM_BL_OTF = 1,
    ENUM_ATTR_EFF_DRAM_BL_BC4 = 2,
};

/* ATTR_EFF_DRAM_CL */
typedef uint8_t ATTR_EFF_DRAM_CL_Type;
const bool ATTR_EFF_DRAM_CL_Privileged = false;

/* ATTR_EFF_DRAM_AL */
typedef uint8_t ATTR_EFF_DRAM_AL_Type;
const bool ATTR_EFF_DRAM_AL_Privileged = false;
enum ATTR_EFF_DRAM_AL_Enum
{
    ENUM_ATTR_EFF_DRAM_AL_DISABLE = 0,
    ENUM_ATTR_EFF_DRAM_AL_CL_MINUS_1 = 1,
    ENUM_ATTR_EFF_DRAM_AL_CL_MINUS_2 = 2,
};

/* ATTR_EFF_DRAM_CWL */
typedef uint8_t ATTR_EFF_DRAM_CWL_Type;
const bool ATTR_EFF_DRAM_CWL_Privileged = false;

/* ATTR_EFF_DRAM_RBT */
typedef uint8_t ATTR_EFF_DRAM_RBT_Type;
const bool ATTR_EFF_DRAM_RBT_Privileged = false;
enum ATTR_EFF_DRAM_RBT_Enum
{
    ENUM_ATTR_EFF_DRAM_RBT_SEQUENTIAL = 0,
    ENUM_ATTR_EFF_DRAM_RBT_INTERLEAVE = 1,
};

/* ATTR_EFF_DRAM_TM */
typedef uint8_t ATTR_EFF_DRAM_TM_Type;
const bool ATTR_EFF_DRAM_TM_Privileged = false;
enum ATTR_EFF_DRAM_TM_Enum
{
    ENUM_ATTR_EFF_DRAM_TM_NORMAL= 0,
    ENUM_ATTR_EFF_DRAM_TM_TEST = 1,
};

/* ATTR_EFF_DRAM_DLL_RESET */
typedef uint8_t ATTR_EFF_DRAM_DLL_RESET_Type;
const bool ATTR_EFF_DRAM_DLL_RESET_Privileged = false;
enum ATTR_EFF_DRAM_DLL_RESET_Enum
{
    ENUM_ATTR_EFF_DRAM_DLL_RESET_NO = 0,
    ENUM_ATTR_EFF_DRAM_DLL_RESET_YES = 1,
};

/* ATTR_EFF_DRAM_WR */
typedef uint8_t ATTR_EFF_DRAM_WR_Type;
const bool ATTR_EFF_DRAM_WR_Privileged = false;

/* ATTR_EFF_DRAM_DLL_PPD */
typedef uint8_t ATTR_EFF_DRAM_DLL_PPD_Type;
const bool ATTR_EFF_DRAM_DLL_PPD_Privileged = false;
enum ATTR_EFF_DRAM_DLL_PPD_Enum
{
    ENUM_ATTR_EFF_DRAM_DLL_PPD_SLOWEXIT = 0,
    ENUM_ATTR_EFF_DRAM_DLL_PPD_FASTEXIT = 1,
};

/* ATTR_EFF_DRAM_DLL_ENABLE */
typedef uint8_t ATTR_EFF_DRAM_DLL_ENABLE_Type;
const bool ATTR_EFF_DRAM_DLL_ENABLE_Privileged = false;
enum ATTR_EFF_DRAM_DLL_ENABLE_Enum
{
    ENUM_ATTR_EFF_DRAM_DLL_ENABLE_ENABLE = 0,
    ENUM_ATTR_EFF_DRAM_DLL_ENABLE_DISABLE = 1,
};

/* ATTR_EFF_DRAM_TDQS */
typedef uint8_t ATTR_EFF_DRAM_TDQS_Type;
const bool ATTR_EFF_DRAM_TDQS_Privileged = false;
enum ATTR_EFF_DRAM_TDQS_Enum
{
    ENUM_ATTR_EFF_DRAM_TDQS_DISABLE = 0,
    ENUM_ATTR_EFF_DRAM_TDQS_ENABLE = 1,
};

/* ATTR_EFF_DRAM_WR_LVL_ENABLE */
typedef uint8_t ATTR_EFF_DRAM_WR_LVL_ENABLE_Type;
const bool ATTR_EFF_DRAM_WR_LVL_ENABLE_Privileged = false;
enum ATTR_EFF_DRAM_WR_LVL_ENABLE_Enum
{
    ENUM_ATTR_EFF_DRAM_WR_LVL_ENABLE_DISABLE = 0,
    ENUM_ATTR_EFF_DRAM_WR_LVL_ENABLE_ENABLE = 1,
};

/* ATTR_EFF_DRAM_OUTPUT_BUFFER */
typedef uint8_t ATTR_EFF_DRAM_OUTPUT_BUFFER_Type;
const bool ATTR_EFF_DRAM_OUTPUT_BUFFER_Privileged = false;
enum ATTR_EFF_DRAM_OUTPUT_BUFFER_Enum
{
    ENUM_ATTR_EFF_DRAM_OUTPUT_BUFFER_ENABLE = 0,
    ENUM_ATTR_EFF_DRAM_OUTPUT_BUFFER_DISABLE = 1,
};

/* ATTR_EFF_DRAM_PASR */
typedef uint8_t ATTR_EFF_DRAM_PASR_Type;
const bool ATTR_EFF_DRAM_PASR_Privileged = false;
enum ATTR_EFF_DRAM_PASR_Enum
{
    ENUM_ATTR_EFF_DRAM_PASR_FULL = 0,
    ENUM_ATTR_EFF_DRAM_PASR_FIRST_HALF = 1,
    ENUM_ATTR_EFF_DRAM_PASR_FIRST_QUARTER = 2,
    ENUM_ATTR_EFF_DRAM_PASR_FIRST_EIGHTH = 3,
    ENUM_ATTR_EFF_DRAM_PASR_LAST_THREE_FOURTH = 4,
    ENUM_ATTR_EFF_DRAM_PASR_LAST_HALF = 5,
    ENUM_ATTR_EFF_DRAM_PASR_LAST_QUARTER = 6,
    ENUM_ATTR_EFF_DRAM_PASR_LAST_EIGHTH = 7,
};

/* ATTR_EFF_DRAM_ASR */
typedef uint8_t ATTR_EFF_DRAM_ASR_Type;
const bool ATTR_EFF_DRAM_ASR_Privileged = false;
enum ATTR_EFF_DRAM_ASR_Enum
{
    ENUM_ATTR_EFF_DRAM_ASR_SRT = 0,
    ENUM_ATTR_EFF_DRAM_ASR_ASR = 1,
};

/* ATTR_EFF_DRAM_SRT */
typedef uint8_t ATTR_EFF_DRAM_SRT_Type;
const bool ATTR_EFF_DRAM_SRT_Privileged = false;
enum ATTR_EFF_DRAM_SRT_Enum
{
    ENUM_ATTR_EFF_DRAM_SRT_NORMAL = 0,
    ENUM_ATTR_EFF_DRAM_SRT_EXTEND = 1,
};

/* ATTR_EFF_MPR_LOC */
typedef uint8_t ATTR_EFF_MPR_LOC_Type;
const bool ATTR_EFF_MPR_LOC_Privileged = false;

/* ATTR_EFF_MPR_MODE */
typedef uint8_t ATTR_EFF_MPR_MODE_Type;
const bool ATTR_EFF_MPR_MODE_Privileged = false;
enum ATTR_EFF_MPR_MODE_Enum
{
    ENUM_ATTR_EFF_MPR_MODE_DISABLE = 0,
    ENUM_ATTR_EFF_MPR_MODE_ENABLE = 1,
};

/* ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15 */
typedef uint64_t ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15_Type[2][2];
const bool ATTR_EFF_DIMM_RCD_CNTL_WORD_0_15_Privileged = false;

/* ATTR_EFF_DIMM_RCD_IBT */
typedef uint8_t ATTR_EFF_DIMM_RCD_IBT_Type[2][2];
const bool ATTR_EFF_DIMM_RCD_IBT_Privileged = false;
enum ATTR_EFF_DIMM_RCD_IBT_Enum
{
    ENUM_ATTR_EFF_DIMM_RCD_IBT_IBT_OFF = 0,
    ENUM_ATTR_EFF_DIMM_RCD_IBT_IBT_100 = 100,
    ENUM_ATTR_EFF_DIMM_RCD_IBT_IBT_150 = 150,
    ENUM_ATTR_EFF_DIMM_RCD_IBT_IBT_200 = 200,
    ENUM_ATTR_EFF_DIMM_RCD_IBT_IBT_300 = 300,
};

/* ATTR_EFF_DIMM_RCD_MIRROR_MODE */
typedef uint8_t ATTR_EFF_DIMM_RCD_MIRROR_MODE_Type[2][2];
const bool ATTR_EFF_DIMM_RCD_MIRROR_MODE_Privileged = false;
enum ATTR_EFF_DIMM_RCD_MIRROR_MODE_Enum
{
    ENUM_ATTR_EFF_DIMM_RCD_MIRROR_MODE_IBT_BACK_OFF = 0,
    ENUM_ATTR_EFF_DIMM_RCD_MIRROR_MODE_IBT_BACK_ON = 1,
};

/* ATTR_EFF_SCHMOO_MODE */
typedef uint8_t ATTR_EFF_SCHMOO_MODE_Type;
const bool ATTR_EFF_SCHMOO_MODE_Privileged = false;
enum ATTR_EFF_SCHMOO_MODE_Enum
{
    ENUM_ATTR_EFF_SCHMOO_MODE_FAST = 0,
    ENUM_ATTR_EFF_SCHMOO_MODE_ONE_SLOW = 1,
    ENUM_ATTR_EFF_SCHMOO_MODE_QUARTER_SLOW = 2,
    ENUM_ATTR_EFF_SCHMOO_MODE_HALF_SLOW = 3,
    ENUM_ATTR_EFF_SCHMOO_MODE_FULL_SLOW = 4,
    ENUM_ATTR_EFF_SCHMOO_MODE_ONE_CHAR = 5,
    ENUM_ATTR_EFF_SCHMOO_MODE_QUARTER_CHAR = 6,
    ENUM_ATTR_EFF_SCHMOO_MODE_HALF_CHAR = 7,
    ENUM_ATTR_EFF_SCHMOO_MODE_FULL_CHAR = 8,
};

/* ATTR_EFF_SCHMOO_TEST_VALID */
typedef uint8_t ATTR_EFF_SCHMOO_TEST_VALID_Type;
const bool ATTR_EFF_SCHMOO_TEST_VALID_Privileged = false;

/* ATTR_EFF_SCHMOO_PARAM_VALID */
typedef uint8_t ATTR_EFF_SCHMOO_PARAM_VALID_Type;
const bool ATTR_EFF_SCHMOO_PARAM_VALID_Privileged = false;

/* ATTR_EFF_MEMCAL_INTERVAL */
typedef uint32_t ATTR_EFF_MEMCAL_INTERVAL_Type;
const bool ATTR_EFF_MEMCAL_INTERVAL_Privileged = false;
enum ATTR_EFF_MEMCAL_INTERVAL_Enum
{
    ENUM_ATTR_EFF_MEMCAL_INTERVAL_DISABLE = 0,
};

/* ATTR_EFF_ZQCAL_INTERVAL */
typedef uint32_t ATTR_EFF_ZQCAL_INTERVAL_Type;
const bool ATTR_EFF_ZQCAL_INTERVAL_Privileged = false;
enum ATTR_EFF_ZQCAL_INTERVAL_Enum
{
    ENUM_ATTR_EFF_ZQCAL_INTERVAL_DISABLE = 0,
};

/* ATTR_EFF_IBM_TYPE */
typedef uint8_t ATTR_EFF_IBM_TYPE_Type[2][2];
const bool ATTR_EFF_IBM_TYPE_Privileged = false;
enum ATTR_EFF_IBM_TYPE_Enum
{
    ENUM_ATTR_EFF_IBM_TYPE_UNDEFINED = 0,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_1A = 1,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_1B = 2,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_1C = 3,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_2A = 4,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_2B = 5,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_2C = 6,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_3A = 7,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_3B = 8,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_3C = 9,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_4A = 10,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_4B = 11,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_4C = 12,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_5A = 13,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_5B = 14,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_5C = 15,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_5D = 16,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_6A = 17,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_6B = 18,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_6C = 19,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_7A = 20,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_7B = 21,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_7C = 22,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_8A = 23,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_8B = 24,
    ENUM_ATTR_EFF_IBM_TYPE_TYPE_8C = 25,
};

/* ATTR_EFF_NUM_DROPS_PER_PORT */
typedef uint8_t ATTR_EFF_NUM_DROPS_PER_PORT_Type;
const bool ATTR_EFF_NUM_DROPS_PER_PORT_Privileged = false;
enum ATTR_EFF_NUM_DROPS_PER_PORT_Enum
{
    ENUM_ATTR_EFF_NUM_DROPS_PER_PORT_EMPTY = 0,
    ENUM_ATTR_EFF_NUM_DROPS_PER_PORT_SINGLE = 1,
    ENUM_ATTR_EFF_NUM_DROPS_PER_PORT_DUAL = 2,
};

/* ATTR_EFF_STACK_TYPE */
typedef uint8_t ATTR_EFF_STACK_TYPE_Type[2][2];
const bool ATTR_EFF_STACK_TYPE_Privileged = false;
enum ATTR_EFF_STACK_TYPE_Enum
{
    ENUM_ATTR_EFF_STACK_TYPE_NONE = 0,
    ENUM_ATTR_EFF_STACK_TYPE_DDP_QDP = 1,
    ENUM_ATTR_EFF_STACK_TYPE_STACK_3DS = 2,
};

/* ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM */
typedef uint8_t ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM_Type[2][2];
const bool ATTR_EFF_NUM_MASTER_RANKS_PER_DIMM_Privileged = false;

/* ATTR_EFF_NUM_PACKAGES_PER_RANK */
typedef uint8_t ATTR_EFF_NUM_PACKAGES_PER_RANK_Type[2][2];
const bool ATTR_EFF_NUM_PACKAGES_PER_RANK_Privileged = false;

/* ATTR_EFF_NUM_DIES_PER_PACKAGE */
typedef uint8_t ATTR_EFF_NUM_DIES_PER_PACKAGE_Type[2][2];
const bool ATTR_EFF_NUM_DIES_PER_PACKAGE_Privileged = false;

/* ATTR_MSS_THROTTLE_NUMERATOR */
typedef uint32_t ATTR_MSS_THROTTLE_NUMERATOR_Type[2][2];
const bool ATTR_MSS_THROTTLE_NUMERATOR_Privileged = false;

/* ATTR_MSS_THROTTLE_DENOMINATOR */
typedef uint32_t ATTR_MSS_THROTTLE_DENOMINATOR_Type[2][2];
const bool ATTR_MSS_THROTTLE_DENOMINATOR_Privileged = false;

/* ATTR_MSS_THROTTLE_CHANNEL_NUMERATOR */
typedef uint32_t ATTR_MSS_THROTTLE_CHANNEL_NUMERATOR_Type[2];
const bool ATTR_MSS_THROTTLE_CHANNEL_NUMERATOR_Privileged = false;

/* ATTR_MSS_THROTTLE_CHANNEL_DENOMINATOR */
typedef uint32_t ATTR_MSS_THROTTLE_CHANNEL_DENOMINATOR_Type[2];
const bool ATTR_MSS_THROTTLE_CHANNEL_DENOMINATOR_Privileged = false;

/* ATTR_MSS_WATT_TARGET */
typedef uint32_t ATTR_MSS_WATT_TARGET_Type[2];
const bool ATTR_MSS_WATT_TARGET_Privileged = false;

/* ATTR_MSS_POWER_SLOPE */
typedef uint32_t ATTR_MSS_POWER_SLOPE_Type[2][2];
const bool ATTR_MSS_POWER_SLOPE_Privileged = false;

/* ATTR_MSS_POWER_INT */
typedef uint32_t ATTR_MSS_POWER_INT_Type[2][2];
const bool ATTR_MSS_POWER_INT_Privileged = false;

/* ATTR_MSS_DIMM_MAXBANDWIDTH_GBS */
typedef uint32_t ATTR_MSS_DIMM_MAXBANDWIDTH_GBS_Type[2][2];
const bool ATTR_MSS_DIMM_MAXBANDWIDTH_GBS_Privileged = false;

/* ATTR_MSS_DIMM_MAXBANDWIDTH_MRS */
typedef uint32_t ATTR_MSS_DIMM_MAXBANDWIDTH_MRS_Type[2][2];
const bool ATTR_MSS_DIMM_MAXBANDWIDTH_MRS_Privileged = false;

/* ATTR_MSS_CHANNEL_MAXBANDWIDTH_GBS */
typedef uint32_t ATTR_MSS_CHANNEL_MAXBANDWIDTH_GBS_Type[2];
const bool ATTR_MSS_CHANNEL_MAXBANDWIDTH_GBS_Privileged = false;

/* ATTR_MSS_CHANNEL_MAXBANDWIDTH_MRS */
typedef uint32_t ATTR_MSS_CHANNEL_MAXBANDWIDTH_MRS_Type[2];
const bool ATTR_MSS_CHANNEL_MAXBANDWIDTH_MRS_Privileged = false;

/* ATTR_MSS_DIMM_MAXPOWER */
typedef uint32_t ATTR_MSS_DIMM_MAXPOWER_Type[2][2];
const bool ATTR_MSS_DIMM_MAXPOWER_Privileged = false;

/* ATTR_MSS_CHANNEL_MAXPOWER */
typedef uint32_t ATTR_MSS_CHANNEL_MAXPOWER_Type[2];
const bool ATTR_MSS_CHANNEL_MAXPOWER_Privileged = false;

/* ATTR_MSS_MEMORY_BASE */
typedef uint64_t ATTR_MSS_MEMORY_BASE_Type;
const bool ATTR_MSS_MEMORY_BASE_Privileged = false;
#define ATTR_MSS_MEMORY_BASE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_MIRROR_BASE */
typedef uint64_t ATTR_MSS_MIRROR_BASE_Type;
const bool ATTR_MSS_MIRROR_BASE_Privileged = false;
#define ATTR_MSS_MIRROR_BASE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_MEMSIZE */
typedef uint64_t ATTR_MSS_MEMSIZE_Type[8];
const bool ATTR_MSS_MEMSIZE_Privileged = false;

/* ATTR_MSS_MEM_BASE */
typedef uint64_t ATTR_MSS_MEM_BASE_Type;
const bool ATTR_MSS_MEM_BASE_Privileged = false;
#define ATTR_MSS_MEM_BASE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_MEM_SIZE */
typedef uint64_t ATTR_MSS_MEM_SIZE_Type;
const bool ATTR_MSS_MEM_SIZE_Privileged = false;

/* ATTR_MSS_MEM_MIRROR_BASE */
typedef uint64_t ATTR_MSS_MEM_MIRROR_BASE_Type;
const bool ATTR_MSS_MEM_MIRROR_BASE_Privileged = false;
#define ATTR_MSS_MEM_MIRROR_BASE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_MEM_MIRROR_SIZE */
typedef uint64_t ATTR_MSS_MEM_MIRROR_SIZE_Type;
const bool ATTR_MSS_MEM_MIRROR_SIZE_Privileged = false;

/* ATTR_MSS_INTERLEAVE_ENABLE */
typedef uint8_t ATTR_MSS_INTERLEAVE_ENABLE_Type;
const bool ATTR_MSS_INTERLEAVE_ENABLE_Privileged = false;
#define ATTR_MSS_INTERLEAVE_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_MEMSIZE_MBA */
typedef uint64_t ATTR_MSS_MEMSIZE_MBA_Type;
const bool ATTR_MSS_MEMSIZE_MBA_Privileged = false;

/* ATTR_MSS_MCA_HASH_MODE */
typedef uint8_t ATTR_MSS_MCA_HASH_MODE_Type;
const bool ATTR_MSS_MCA_HASH_MODE_Privileged = false;
#define ATTR_MSS_MCA_HASH_MODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT */
typedef uint8_t ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT_Type;
const bool ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT_Privileged = false;
#define ATTR_MSS_MBA_ADDR_INTERLEAVE_BIT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE */
typedef uint8_t ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_Type;
const bool ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_Privileged = false;
enum ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_Enum
{
    ENUM_ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_OFF = 0,
    ENUM_ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_ON = 1,
};
#define ATTR_MSS_MBA_CACHELINE_INTERLEAVE_MODE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_CACHE_ENABLE */
typedef uint8_t ATTR_MSS_CACHE_ENABLE_Type;
const bool ATTR_MSS_CACHE_ENABLE_Privileged = false;
enum ATTR_MSS_CACHE_ENABLE_Enum
{
    ENUM_ATTR_MSS_CACHE_ENABLE_OFF = 0,
    ENUM_ATTR_MSS_CACHE_ENABLE_ON = 1,
};
#define ATTR_MSS_CACHE_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_PREFETCH_ENABLE */
typedef uint8_t ATTR_MSS_PREFETCH_ENABLE_Type;
const bool ATTR_MSS_PREFETCH_ENABLE_Privileged = false;
enum ATTR_MSS_PREFETCH_ENABLE_Enum
{
    ENUM_ATTR_MSS_PREFETCH_ENABLE_OFF = 0,
    ENUM_ATTR_MSS_PREFETCH_ENABLE_ON = 1,
};
#define ATTR_MSS_PREFETCH_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_CLEANER_ENABLE */
typedef uint8_t ATTR_MSS_CLEANER_ENABLE_Type;
const bool ATTR_MSS_CLEANER_ENABLE_Privileged = false;
enum ATTR_MSS_CLEANER_ENABLE_Enum
{
    ENUM_ATTR_MSS_CLEANER_ENABLE_OFF = 0,
    ENUM_ATTR_MSS_CLEANER_ENABLE_ON = 1,
};
#define ATTR_MSS_CLEANER_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_MSS_LAB_OVERRIDE_FOR_MEM_PLL */
typedef uint8_t ATTR_MSS_LAB_OVERRIDE_FOR_MEM_PLL_Type;
const bool ATTR_MSS_LAB_OVERRIDE_FOR_MEM_PLL_Privileged = false;

/* ATTR_FREQ_CORE */
typedef uint32_t ATTR_FREQ_CORE_Type;
const bool ATTR_FREQ_CORE_Privileged = false;

/* ATTR_PROC_PCIE_NOT_F_LINK */
typedef uint8_t ATTR_PROC_PCIE_NOT_F_LINK_Type[2];
const bool ATTR_PROC_PCIE_NOT_F_LINK_Privileged = false;
#define ATTR_PROC_PCIE_NOT_F_LINK_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_L3_BAR1_REG */
typedef uint64_t ATTR_PROC_L3_BAR1_REG_Type;
const bool ATTR_PROC_L3_BAR1_REG_Privileged = false;

/* ATTR_PROC_L3_BAR2_REG */
typedef uint64_t ATTR_PROC_L3_BAR2_REG_Type;
const bool ATTR_PROC_L3_BAR2_REG_Privileged = false;

/* ATTR_PROC_L3_BAR_GROUP_MASK_REG */
typedef uint64_t ATTR_PROC_L3_BAR_GROUP_MASK_REG_Type;
const bool ATTR_PROC_L3_BAR_GROUP_MASK_REG_Privileged = false;

/* ATTR_PROC_MEM_BASE */
typedef uint64_t ATTR_PROC_MEM_BASE_Type;
const bool ATTR_PROC_MEM_BASE_Privileged = false;
#define ATTR_PROC_MEM_BASE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_MEM_SIZE */
typedef uint64_t ATTR_PROC_MEM_SIZE_Type;
const bool ATTR_PROC_MEM_SIZE_Privileged = false;

/* ATTR_PROC_MIRROR_BASE */
typedef uint64_t ATTR_PROC_MIRROR_BASE_Type[4];
const bool ATTR_PROC_MIRROR_BASE_Privileged = false;

/* ATTR_PROC_MIRROR_SIZE */
typedef uint64_t ATTR_PROC_MIRROR_SIZE_Type[4];
const bool ATTR_PROC_MIRROR_SIZE_Privileged = false;

/* ATTR_PROC_FOREIGN_NEAR_BASE */
typedef uint64_t ATTR_PROC_FOREIGN_NEAR_BASE_Type[2];
const bool ATTR_PROC_FOREIGN_NEAR_BASE_Privileged = false;
#define ATTR_PROC_FOREIGN_NEAR_BASE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FOREIGN_NEAR_SIZE */
typedef uint64_t ATTR_PROC_FOREIGN_NEAR_SIZE_Type[2];
const bool ATTR_PROC_FOREIGN_NEAR_SIZE_Privileged = false;
#define ATTR_PROC_FOREIGN_NEAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FOREIGN_FAR_BASE */
typedef uint64_t ATTR_PROC_FOREIGN_FAR_BASE_Type[2];
const bool ATTR_PROC_FOREIGN_FAR_BASE_Privileged = false;
#define ATTR_PROC_FOREIGN_FAR_BASE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FOREIGN_FAR_SIZE */
typedef uint64_t ATTR_PROC_FOREIGN_FAR_SIZE_Type[2];
const bool ATTR_PROC_FOREIGN_FAR_SIZE_Privileged = false;
#define ATTR_PROC_FOREIGN_FAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_HA_BASE */
typedef uint64_t ATTR_PROC_HA_BASE_Type[8];
const bool ATTR_PROC_HA_BASE_Privileged = false;
#define ATTR_PROC_HA_BASE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_HA_SIZE */
typedef uint64_t ATTR_PROC_HA_SIZE_Type[8];
const bool ATTR_PROC_HA_SIZE_Privileged = false;
#define ATTR_PROC_HA_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PSI_BRIDGE_BAR_ENABLE */
typedef uint8_t ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_Type;
const bool ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_Privileged = false;
enum ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_Enum
{
    ENUM_ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR_Type;
const bool ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR_Privileged = false;
#define ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FSP_BAR_ENABLE */
typedef uint8_t ATTR_PROC_FSP_BAR_ENABLE_Type;
const bool ATTR_PROC_FSP_BAR_ENABLE_Privileged = false;
enum ATTR_PROC_FSP_BAR_ENABLE_Enum
{
    ENUM_ATTR_PROC_FSP_BAR_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_FSP_BAR_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_FSP_BAR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FSP_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_FSP_BAR_BASE_ADDR_Type;
const bool ATTR_PROC_FSP_BAR_BASE_ADDR_Privileged = false;
#define ATTR_PROC_FSP_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FSP_BAR_SIZE */
typedef uint64_t ATTR_PROC_FSP_BAR_SIZE_Type;
const bool ATTR_PROC_FSP_BAR_SIZE_Privileged = false;
enum ATTR_PROC_FSP_BAR_SIZE_Enum
{
    ENUM_ATTR_PROC_FSP_BAR_SIZE_4_GB = 0x0000000100000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_2_GB = 0x0000000080000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_1_GB = 0x0000000040000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_512_MB = 0x0000000020000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_256_MB = 0x0000000010000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_128_MB = 0x0000000008000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_64_MB = 0x0000000004000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_32_MB = 0x0000000002000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_16_MB = 0x0000000001000000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_8_MB = 0x0000000000800000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_4_MB = 0x0000000000400000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_2_MB = 0x0000000000200000ULL,
    ENUM_ATTR_PROC_FSP_BAR_SIZE_1_MB = 0x0000000000100000ULL,
};
#define ATTR_PROC_FSP_BAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_FSP_MMIO_MASK_SIZE */
typedef uint64_t ATTR_PROC_FSP_MMIO_MASK_SIZE_Type;
const bool ATTR_PROC_FSP_MMIO_MASK_SIZE_Privileged = false;
enum ATTR_PROC_FSP_MMIO_MASK_SIZE_Enum
{
    ENUM_ATTR_PROC_FSP_MMIO_MASK_SIZE_4_GB = 0x0000000100000000ULL,
    ENUM_ATTR_PROC_FSP_MMIO_MASK_SIZE_2_GB = 0x0000000080000000ULL,
    ENUM_ATTR_PROC_FSP_MMIO_MASK_SIZE_1_GB = 0x0000000040000000ULL,
    ENUM_ATTR_PROC_FSP_MMIO_MASK_SIZE_512_MB = 0x0000000020000000ULL,
    ENUM_ATTR_PROC_FSP_MMIO_MASK_SIZE_256_MB = 0x0000000010000000ULL,
};
#define ATTR_PROC_FSP_MMIO_MASK_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_INTP_BAR_ENABLE */
typedef uint8_t ATTR_PROC_INTP_BAR_ENABLE_Type;
const bool ATTR_PROC_INTP_BAR_ENABLE_Privileged = false;
enum ATTR_PROC_INTP_BAR_ENABLE_Enum
{
    ENUM_ATTR_PROC_INTP_BAR_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_INTP_BAR_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_INTP_BAR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_INTP_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_INTP_BAR_BASE_ADDR_Type;
const bool ATTR_PROC_INTP_BAR_BASE_ADDR_Privileged = false;
#define ATTR_PROC_INTP_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_NX_MMIO_BAR_ENABLE */
typedef uint8_t ATTR_PROC_NX_MMIO_BAR_ENABLE_Type;
const bool ATTR_PROC_NX_MMIO_BAR_ENABLE_Privileged = false;
enum ATTR_PROC_NX_MMIO_BAR_ENABLE_Enum
{
    ENUM_ATTR_PROC_NX_MMIO_BAR_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_NX_MMIO_BAR_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_NX_MMIO_BAR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_NX_MMIO_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_NX_MMIO_BAR_BASE_ADDR_Type;
const bool ATTR_PROC_NX_MMIO_BAR_BASE_ADDR_Privileged = false;
#define ATTR_PROC_NX_MMIO_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_NX_MMIO_BAR_SIZE */
typedef uint64_t ATTR_PROC_NX_MMIO_BAR_SIZE_Type;
const bool ATTR_PROC_NX_MMIO_BAR_SIZE_Privileged = false;
enum ATTR_PROC_NX_MMIO_BAR_SIZE_Enum
{
    ENUM_ATTR_PROC_NX_MMIO_BAR_SIZE_16_GB = 0x0000000400000000ULL,
    ENUM_ATTR_PROC_NX_MMIO_BAR_SIZE_16_MB = 0x0000000001000000ULL,
    ENUM_ATTR_PROC_NX_MMIO_BAR_SIZE_1_MB = 0x0000000000100000ULL,
    ENUM_ATTR_PROC_NX_MMIO_BAR_SIZE_64_KB = 0x0000000000010000ULL,
    ENUM_ATTR_PROC_NX_MMIO_BAR_SIZE_4_KB = 0x0000000000001000ULL,
};
#define ATTR_PROC_NX_MMIO_BAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_BAR_ENABLE */
typedef uint8_t ATTR_PROC_PCIE_BAR_ENABLE_Type[3][3];
const bool ATTR_PROC_PCIE_BAR_ENABLE_Privileged = false;
enum ATTR_PROC_PCIE_BAR_ENABLE_Enum
{
    ENUM_ATTR_PROC_PCIE_BAR_ENABLE_DISABLE = 0x0,
    ENUM_ATTR_PROC_PCIE_BAR_ENABLE_ENABLE = 0x1,
};
#define ATTR_PROC_PCIE_BAR_ENABLE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_BAR_BASE_ADDR */
typedef uint64_t ATTR_PROC_PCIE_BAR_BASE_ADDR_Type[3][3];
const bool ATTR_PROC_PCIE_BAR_BASE_ADDR_Privileged = false;
#define ATTR_PROC_PCIE_BAR_BASE_ADDR_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PROC_PCIE_BAR_SIZE */
typedef uint64_t ATTR_PROC_PCIE_BAR_SIZE_Type[3][3];
const bool ATTR_PROC_PCIE_BAR_SIZE_Privileged = false;
enum ATTR_PROC_PCIE_BAR_SIZE_Enum
{
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_1_PB = 0x0004000000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_512_TB = 0x0002000000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_256_TB = 0x0001000000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_128_TB = 0x0000800000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_64_TB = 0x0000400000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_32_TB = 0x0000200000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_16_TB = 0x0000100000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_8_TB = 0x0000080000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_4_TB = 0x0000040000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_2_TB = 0x0000020000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_1_TB = 0x0000010000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_512_GB = 0x0000008000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_256_GB = 0x0000004000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_128_GB = 0x0000002000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_64_GB = 0x0000001000000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_32_GB = 0x0000000800000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_16_GB = 0x0000000400000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_8_GB = 0x0000000200000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_4_GB = 0x0000000100000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_2_GB = 0x0000000080000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_1_GB = 0x0000000040000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_512_MB = 0x0000000020000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_256_MB = 0x0000000010000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_128_MB = 0x0000000008000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_64_MB = 0x0000000004000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_32_MB = 0x0000000002000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_16_MB = 0x0000000001000000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_8_MB = 0x0000000000800000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_4_MB = 0x0000000000400000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_2_MB = 0x0000000000200000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_1_MB = 0x0000000000100000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_512_KB = 0x0000000000080000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_256_KB = 0x0000000000040000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_128_KB = 0x0000000000020000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_64_KB = 0x0000000000010000ULL,
    ENUM_ATTR_PROC_PCIE_BAR_SIZE_4_KB = 0x0000000000001000ULL,
};
#define ATTR_PROC_PCIE_BAR_SIZE_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES */
typedef uint8_t ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES_Type;
const bool ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES_Privileged = false;
#define ATTR_SBE_SEEPROM_I2C_ADDRESS_BYTES_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS */
typedef uint8_t ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS_Type[2];
const bool ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS_Privileged = false;
#define ATTR_SBE_SEEPROM_I2C_DEVICE_ADDRESS_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_SBE_SEEPROM_I2C_PORT */
typedef uint8_t ATTR_SBE_SEEPROM_I2C_PORT_Type[2];
const bool ATTR_SBE_SEEPROM_I2C_PORT_Privileged = false;
#define ATTR_SBE_SEEPROM_I2C_PORT_SETMACRO ATTRIBUTE_NOT_WRITABLE

/* ATTR_PNOR_I2C_ADDRESS_BYTES */
typedef uint8_t ATTR_PNOR_I2C_ADDRESS_BYTES_Type;
const bool ATTR_PNOR_I2C_ADDRESS_BYTES_Privileged = false;
#define ATTR_PNOR_I2C_ADDRESS_BYTES_SETMACRO ATTRIBUTE_NOT_WRITABLE

}

#endif
