// fapiSetSbeError.H
// This file is generated by perl script fapiParseErrorInfo.pl

// When SBE code creates an error, it produces an error value
// that matches a value in the HwpReturnCode enum in
// fapiHwpReturnCodes.H. The SBE uses the __ASSEMBLER__
// primitives in fapiHwpReturnCodes.H to do this. The function
// that extracts the error value from the SBE needs to call
// FAPI_SET_HWP_ERROR to create the error and get all the
// actions in the error XML file performed, but that macro can
// only be called with the enumerator, not the value. This
// FAPI_SET_SBE_ERROR macro can be called instead, it calls
// FAPI_SET_HWP_ERROR with the correct error enumerator.
// Errors containing <sbeError/> in their XML are supported
// in this macro.

// Note that it is expected that this macro will be called
// in one place (the function that extracts the error from
// the SBE), if this changes and it is called in multiple
// places then the macro could be turned into a function to
// avoid the code size increase of expanding the macro in
// multiple places. The function approach is slightly more
// complicated, there is an extra C file and the function
// must take a parameter for the generic chip ID in the error
// XML.

#ifndef FAPISETSBEERROR_H_
#define FAPISETSBEERROR_H_

#define FAPI_SET_SBE_ERROR(RC, ERRVAL)\
switch (ERRVAL)\
{\
    case fapi::RC_SBE_FABRICINIT_FBC_STOPPED_ERR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_FABRICINIT_FBC_STOPPED_ERR);\
        break;\
    case fapi::RC_SBE_FABRICINIT_ERR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_FABRICINIT_ERR);\
        break;\
    case fapi::PROC_SBE_PB_START_CLOCK_ERROR:\
        FAPI_SET_HWP_ERROR(RC, PROC_SBE_PB_START_CLOCK_ERROR);\
        break;\
    case fapi::RC_SBE_SUCCESS:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_SUCCESS);\
        break;\
    case fapi::RC_SBE_SUCCESS_SLAVE_CHIP:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_SUCCESS_SLAVE_CHIP);\
        break;\
    case fapi::RC_SBE_PAUSE_WITH_SUCCESS:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PAUSE_WITH_SUCCESS);\
        break;\
    case fapi::RC_SBE_PROC_ENTRY_HALT:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PROC_ENTRY_HALT);\
        break;\
    case fapi::RC_SBE_PROC_EXIT_HALT:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PROC_EXIT_HALT);\
        break;\
    case fapi::RC_SBE_PROC_CHECKSTOP:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PROC_CHECKSTOP);\
        break;\
    case fapi::RC_SBE_PROC_RECOVERABLE:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PROC_RECOVERABLE);\
        break;\
    case fapi::RC_SBE_PROC_SPATTN:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PROC_SPATTN);\
        break;\
    case fapi::RC_SBE_PORE_ERROR0:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PORE_ERROR0);\
        break;\
    case fapi::RC_SBE_PORE_ERROR1:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PORE_ERROR1);\
        break;\
    case fapi::RC_SBE_PORE_ERROR2:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PORE_ERROR2);\
        break;\
    case fapi::RC_SBE_PORE_ERROR3:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PORE_ERROR3);\
        break;\
    case fapi::RC_SBE_PORE_ERROR4:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PORE_ERROR4);\
        break;\
    case fapi::RC_SBE_SCAN0_DONE_POLL_THRESHOLD:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_SCAN0_DONE_POLL_THRESHOLD);\
        break;\
    case fapi::RC_SBE_ARRAYINIT_POLL_THRESHOLD:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_ARRAYINIT_POLL_THRESHOLD);\
        break;\
    case fapi::RC_SBE_PIBMEM_PRE_ERROR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PIBMEM_PRE_ERROR);\
        break;\
    case fapi::RC_SBE_PIBMEM_POST_ERROR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PIBMEM_POST_ERROR);\
        break;\
    case fapi::RC_SBE_PIBMEM_IMAGE_SIZE_ALIGNMENT:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PIBMEM_IMAGE_SIZE_ALIGNMENT);\
        break;\
    case fapi::RC_SBE_PIBMEM_LOAD_ADDRESS_ALIGNMENT:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PIBMEM_LOAD_ADDRESS_ALIGNMENT);\
        break;\
    case fapi::RC_SBE_PIBMEM_OVERFLOW:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_PIBMEM_OVERFLOW);\
        break;\
    case fapi::RC_SBE_SCAN_MULTICAST_TYPE_ERROR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_SCAN_MULTICAST_TYPE_ERROR);\
        break;\
    case fapi::RC_SBE_SCAN_MAGIC_MISMATCH:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_SCAN_MAGIC_MISMATCH);\
        break;\
    case fapi::RC_SBE_SCAN_HEADER_VERSION_ERROR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_SCAN_HEADER_VERSION_ERROR);\
        break;\
    case fapi::RC_SBE_SCAN_DATA_SIZE_ERROR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_SCAN_DATA_SIZE_ERROR);\
        break;\
    case fapi::RC_SBE_SCAN_RING_LENGTH_ERROR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_SCAN_RING_LENGTH_ERROR);\
        break;\
    case fapi::RC_SBE_SCAN_CHECKWORD_ERROR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_SCAN_CHECKWORD_ERROR);\
        break;\
    case fapi::RC_SBE_LOAD_RING_VEC_EX_ex_time_core_ERROR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_LOAD_RING_VEC_EX_ex_time_core_ERROR);\
        break;\
    case fapi::RC_SBE_LOAD_RING_VEC_EX_ex_time_eco_ERROR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_LOAD_RING_VEC_EX_ex_time_eco_ERROR);\
        break;\
    case fapi::RC_SBE_LOAD_RING_VEC_EX_ex_repr_core_ERROR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_LOAD_RING_VEC_EX_ex_repr_core_ERROR);\
        break;\
    case fapi::RC_SBE_LOAD_RING_VEC_EX_ex_repr_eco_ERROR:\
        FAPI_SET_HWP_ERROR(RC, RC_SBE_LOAD_RING_VEC_EX_ex_repr_eco_ERROR);\
        break;\
    default:\
        RC.setFapiError(fapi::FAPI_RC_UNRECOGNIZED_SBE_ERROR);\
        RC.addEIFfdc(0, &ERRVAL, sizeof(ERRVAL));\
        break;\
}

#endif
