// fapiHwpErrorInfo.H
// This file is generated by perl script fapiParseErrorInfo.pl

#ifndef FAPIHWPERRORINFO_H_
#define FAPIHWPERRORINFO_H_

/**
 * @brief Error Information macros and HwpFfdcId enumeration
 */
#define RC_TEST_ERROR_A_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, hwpTestFfdc1, UNIT_TEST_FFDC_MASTER_CHIP_TARGET, RC); }
#define RC_TEST_ERROR_A_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(UNIT_TEST_FFDC_MASTER_CHIP_TARGET, fapi::REG_FFDC_TEST_X_PROC_REGISTERS, RC); 
#define RC_TEST_ERROR_A_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&UNIT_TEST_FFDC_DATA_INTEGER, &UNIT_TEST_FFDC_DATA_BUF, &UNIT_TEST_FFDC_MASTER_CHIP_TARGET}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT_TEST_FFDC_DATA_INTEGER), fapi::RC_TEST_ERROR_A_UNIT_TEST_FFDC_DATA_INTEGER}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT_TEST_FFDC_DATA_BUF), fapi::RC_TEST_ERROR_A_UNIT_TEST_FFDC_DATA_BUF}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT_TEST_FFDC_MASTER_CHIP_TARGET), fapi::RC_TEST_ERROR_A_UNIT_TEST_FFDC_MASTER_CHIP_TARGET}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_TEST_ERROR_B_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_ERROR_B_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_ERROR_B_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&UNIT_TEST_FFDC_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT_TEST_FFDC_DATA), fapi::RC_TEST_ERROR_B_UNIT_TEST_FFDC_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_TEST_CONFIG_NO_MCS_CHIPLETS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_CONFIG_NO_MCS_CHIPLETS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_CONFIG_NO_MCS_CHIPLETS_ADD_ERROR_INFO(RC) 

#define RC_TEST_CONFIG_PARENT_CHIP_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_CONFIG_PARENT_CHIP_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_CONFIG_PARENT_CHIP_MISMATCH_ADD_ERROR_INFO(RC) 

#define RC_TEST_DQ_NO_ERR_ON_BAD_PARAMS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_DQ_NO_ERR_ON_BAD_PARAMS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_DQ_NO_ERR_ON_BAD_PARAMS_ADD_ERROR_INFO(RC) 

#define RC_TEST_DQ_BAD_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_DQ_BAD_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_DQ_BAD_DATA_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_DATA1, &FFDC_DATA2}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA1), fapi::RC_TEST_DQ_BAD_DATA_FFDC_DATA1}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA2), fapi::RC_TEST_DQ_BAD_DATA_FFDC_DATA2}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_INITFILE_INCORRECT_VER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_INCORRECT_VER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_INCORRECT_VER_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_IF_VER}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_VER), fapi::RC_INITFILE_INCORRECT_VER_FFDC_IF_VER}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_INITFILE_ATTR_ID_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_ATTR_ID_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_ATTR_ID_OUT_OF_RANGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_IF_ATTR_ID_OUT_OF_RANGE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_ATTR_ID_OUT_OF_RANGE), fapi::RC_INITFILE_ATTR_ID_OUT_OF_RANGE_FFDC_IF_ATTR_ID_OUT_OF_RANGE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_INITFILE_LIT_ID_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_LIT_ID_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_LIT_ID_OUT_OF_RANGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_IF_LIT_ID_OUT_OF_RANGE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_LIT_ID_OUT_OF_RANGE), fapi::RC_INITFILE_LIT_ID_OUT_OF_RANGE_FFDC_IF_LIT_ID_OUT_OF_RANGE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_INITFILE_TGT_NUM_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_TGT_NUM_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_TGT_NUM_OUT_OF_RANGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_IF_TGT_NUM, &FFDC_IF_NUM_TGTS_PASSED_IN}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_TGT_NUM), fapi::RC_INITFILE_TGT_NUM_OUT_OF_RANGE_FFDC_IF_TGT_NUM}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_NUM_TGTS_PASSED_IN), fapi::RC_INITFILE_TGT_NUM_OUT_OF_RANGE_FFDC_IF_NUM_TGTS_PASSED_IN}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_HWP_EXEC_INITFILE_TEST_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_FAILED_ADD_ERROR_INFO(RC) 

#define RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_IF_TEST_NUM_MBAS_FOUND}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_TEST_NUM_MBAS_FOUND), fapi::RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_FFDC_IF_TEST_NUM_MBAS_FOUND}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_HWP_EXEC_INITFILE_TEST_NO_MEMBUF_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_NO_MEMBUF_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_NO_MEMBUF_FOUND_ADD_ERROR_INFO(RC) 

#define RC_HWP_ATTR_UNIT_TEST_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_HWP_ATTR_UNIT_TEST_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_HWP_ATTR_UNIT_TEST_FAIL_ADD_ERROR_INFO(RC) 

#define RC_BAD_DQ_DIMM_BAD_PARAM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_BAD_DQ_DIMM_BAD_PARAM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_BAD_DQ_DIMM_BAD_PARAM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_PORT, &FFDC_DIMM, &FFDC_RANK}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_PORT), fapi::RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_PORT}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DIMM), fapi::RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_DIMM}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_RANK), fapi::RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_RANK}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_BAD_DQ_DIMM_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_BAD_DQ_DIMM_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_BAD_DQ_DIMM_NOT_FOUND_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_MBA_TARGET, &FFDC_PORT, &FFDC_DIMM}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_MBA_TARGET), fapi::RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_MBA_TARGET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_PORT), fapi::RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_PORT}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DIMM), fapi::RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_DIMM}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define IO_RUN_TRAINING_INVALID_ARGS_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_INVALID_ARGS_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_INVALID_ARGS_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_INTERNAL_ERR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_INTERNAL_ERR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_INTERNAL_ERR_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FAIL_ERR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_ERR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_ERR_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FAIL_WIRETEST_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_WIRETEST_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_WIRETEST_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FAIL_DESKEW_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_DESKEW_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_DESKEW_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FAIL_EYE_OPT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_EYE_OPT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_EYE_OPT_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FAIL_REPAIR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_REPAIR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_REPAIR_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FAIL_FUNC_MODE_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_FUNC_MODE_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_FUNC_MODE_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_WIRETEST_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_WIRETEST_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_WIRETEST_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_DESKEW_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_DESKEW_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_DESKEW_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_EYE_OPT_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_EYE_OPT_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_EYE_OPT_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_REPAIR_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_REPAIR_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_REPAIR_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FUNC_MODE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FUNC_MODE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FUNC_MODE_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_GCR_WRITE_MISMATCH_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_GCR_WRITE_MISMATCH_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_GCR_WRITE_MISMATCH_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&READ_BUF, &WRITE_BUF}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(READ_BUF), fapi::IO_GCR_WRITE_MISMATCH_RC_READ_BUF}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(WRITE_BUF), fapi::IO_GCR_WRITE_MISMATCH_RC_WRITE_BUF}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define IO_RUN_TRAINING_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_OFFCAL_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_OFFCAL_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_OFFCAL_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_OFFCAL_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_OFFCAL_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_OFFCAL_ERROR_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCAL_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_ERROR_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCAL_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCAL_K2_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_K2_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_K2_EXCEEDED_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCAL_M_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_M_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_M_EXCEEDED_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCAL_M_LOW_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_M_LOW_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_M_LOW_RC_ADD_ERROR_INFO(RC) 

#define RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&START_ADDRESS, &END_ADDRESS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(START_ADDRESS), fapi::RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_START_ADDRESS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(END_ADDRESS), fapi::RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_END_ADDRESS}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_ADU_COHERENT_UTILS_FBC_INIT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_FBC_INIT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_FBC_INIT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_ADU_COHERENT_UTILS_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_FBC_STOPPED_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_ADU_COHERENT_UTILS_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_STATUS_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&STATUS_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_DATA), fapi::RC_PROC_ADU_COHERENT_UTILS_STATUS_MISMATCH_STATUS_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_ADU_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INVALID_ARGS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ARGS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ARGS), fapi::RC_PROC_ADU_UTILS_INVALID_ARGS_ARGS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_ADU_UTILS_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INTERNAL_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_DATA), fapi::RC_PROC_ADU_UTILS_INTERNAL_ERR_ERR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define FAPI_RC_PLAT_ERR_ADU_LOCKED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define FAPI_RC_PLAT_ERR_ADU_LOCKED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define FAPI_RC_PLAT_ERR_ADU_LOCKED_ADD_ERROR_INFO(RC) 

#define RC_PROC_CONTINUE_SBE_BAD_STATE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CONTINUE_SBE_BAD_STATE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_CONTINUE_SBE_BAD_STATE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SM_STATE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SM_STATE), fapi::RC_PROC_CONTINUE_SBE_BAD_STATE_SM_STATE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ARGS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ARGS), fapi::RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_ARGS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CEN_FRAMELOCK_FL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_CEN_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FIR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG), fapi::RC_PROC_CEN_FRAMELOCK_FL_CEN_FIR_ERR_FIR_REG}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FIR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG), fapi::RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_FIR_REG}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CEN_FRAMELOCK_FL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_CEN_FAIL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FIR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG), fapi::RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FIR_ERR_FIR_REG}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FIR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG), fapi::RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_FIR_REG}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FAIL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CLEANUP_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CLEANUP_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CLEANUP_FBC_STOPPED_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CLEANUP_DUMMY_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CLEANUP_DUMMY_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CLEANUP_DUMMY_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_SPCWKUP_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_SPCWKUP_CODE_BAD_OP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_CODE_BAD_OP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_CODE_BAD_OP_ADD_ERROR_INFO(RC) 

#define RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_GETTRACEARRAY_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETTRACEARRAY_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETTRACEARRAY_INVALID_ARGS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ARGS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ARGS), fapi::RC_PROC_GETTRACEARRAY_INVALID_ARGS_ARGS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_GETTRACEARRAY_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETTRACEARRAY_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETTRACEARRAY_INTERNAL_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_DATA), fapi::RC_PROC_GETTRACEARRAY_INTERNAL_ERR_ERR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_l2_ffdc, EX_CHIPLET_IN_ERROR, RC); }
#define RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CMD_REG_ADDR, &CMD_REG, &NUMBER_OF_ATTEMPTS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_REG_ADDR), fapi::RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_CMD_REG_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_REG), fapi::RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_CMD_REG}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NUMBER_OF_ATTEMPTS), fapi::RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_NUMBER_OF_ATTEMPTS}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_L2_FLUSH_CMD_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, proc_l2_ffdc, EX_CHIPLET_IN_ERROR, RC); }
#define RC_PROC_L2_FLUSH_CMD_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_L2_FLUSH_CMD_ERROR_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CMD_REG_ADDR, &CMD_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_REG_ADDR), fapi::RC_PROC_L2_FLUSH_CMD_ERROR_RC_CMD_REG_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_REG), fapi::RC_PROC_L2_FLUSH_CMD_ERROR_RC_CMD_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_L2_FLUSH_UNKNOWN_PLATFORM_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_L2_FLUSH_UNKNOWN_PLATFORM_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_L2_FLUSH_UNKNOWN_PLATFORM_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&PLATFORM}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PLATFORM), fapi::RC_PROC_L2_FLUSH_UNKNOWN_PLATFORM_RC_PLATFORM}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROCPM_OCB_ACCESS_PUT_SCOM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_PUT_SCOM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_PUT_SCOM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_GET_SCOM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_GET_SCOM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_GET_SCOM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_LENGTH_CHECK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_LENGTH_CHECK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_LENGTH_CHECK_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_CHANNEL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_CHANNEL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_CHANNEL_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_OP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_OP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_OP_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_PUT_DATA_LENGTH_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_PUT_DATA_LENGTH_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_PUT_DATA_LENGTH_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_GET_BUFFER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_GET_BUFFER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_GET_BUFFER_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_Q_LENGTH_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_Q_LENGTH_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_Q_LENGTH_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_ITP_TYPE_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_ITP_TYPE_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_ITP_TYPE_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_Q_OVER_UNDERFLOW_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_Q_OVER_UNDERFLOW_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_Q_OVER_UNDERFLOW_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_CHAN_NUM_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN_NUM_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN_NUM_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_CHAN_TYPE_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN_TYPE_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN_TYPE_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_CHAN3_TYPE_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN3_TYPE_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN3_TYPE_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_CONTROL_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_CONTROL_TEST_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_TEST_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_TEST_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_CONTROL_PUTSCOM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_PUTSCOM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_PUTSCOM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_LOAD_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_LOAD_BAD_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_LOAD_BAD_CHANNEL_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_CHANNEL_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_CHANNEL_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_LOAD_BAD_BINARY_FILE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_BINARY_FILE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_BINARY_FILE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_LOAD_TEST_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_TEST_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_TEST_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCCSRAM_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCCSRAM_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCCSRAM_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCCSRAM_TEST_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCCSRAM_TEST_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCCSRAM_TEST_ADD_ERROR_INFO(RC) 

#define RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_OHA_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_OHA_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_OHA_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_OHA_CODE_BITOP_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_OHA_CODE_BITOP_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_OHA_CODE_BITOP_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_BAR_INDEX_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_BAR_INDEX_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_BAR_INDEX_OUT_OF_RANGE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_ADDR_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_ADDR_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_ADDR_OUT_OF_RANGE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_BAR_SIZE_INVALID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_BAR_SIZE_INVALID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_BAR_SIZE_INVALID_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_BAR_MODE_NOT_SUPPORTED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_BAR_MODE_NOT_SUPPORTED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_BAR_MODE_NOT_SUPPORTED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_BAR_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_BAR_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_BAR_PUTSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&START_ADDRESS, &END_ADDRESS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(START_ADDRESS), fapi::RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_START_ADDRESS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(END_ADDRESS), fapi::RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_END_ADDRESS}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_PBA_COHERENT_UTILS_FBC_INIT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_FBC_INIT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_FBC_INIT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_COHERENT_UTILS_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_FBC_STOPPED_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERRPT0_DATA, &ERRPT1_DATA, &ERRPT2_DATA, &FIR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERRPT0_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ERRPT0_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERRPT1_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ERRPT1_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERRPT2_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ERRPT2_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_FIR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&STATUS2_DATA, &STATUS3_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS2_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_STATUS2_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS3_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_STATUS3_DATA}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&STATUS0_DATA, &STATUS1_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS0_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_STATUS0_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS1_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_STATUS1_DATA}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&STATUS_DATA, &ERR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_STATUS_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_ERR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_P8_PBA_INIT_INCORRECT_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_P8_PBA_INIT_INCORRECT_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_P8_PBA_INIT_INCORRECT_MODE_ADD_ERROR_INFO(RC) 

#define RC_P8_PBA_INIT_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_P8_PBA_INIT_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_P8_PBA_INIT_PUTSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_UTILS_BAD_PBA_REGION_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_UTILS_BAD_PBA_REGION_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_UTILS_BAD_PBA_REGION_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_DATA), fapi::RC_PROC_PBA_UTILS_BAD_PBA_REGION_ERR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_PBA_UTILS_PBA_SLAVE_RESET_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_UTILS_PBA_SLAVE_RESET_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_UTILS_PBA_SLAVE_RESET_FAIL_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_DATA), fapi::RC_PROC_PBA_UTILS_PBA_SLAVE_RESET_FAIL_ERR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_PBA_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_UTILS_INVALID_ARGS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ARGS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ARGS), fapi::RC_PROC_PBA_UTILS_INVALID_ARGS_ARGS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_PBAXCFG_INIT_GETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBAXCFG_INIT_GETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBAXCFG_INIT_GETSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBAXCFG_INIT_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBAXCFG_INIT_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBAXCFG_INIT_PUTSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBAXCFG_INIT_INCORRECTMODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBAXCFG_INIT_INCORRECTMODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBAXCFG_INIT_INCORRECTMODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBAXSNDTX_INIT_GETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBAXSNDTX_INIT_GETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBAXSNDTX_INIT_GETSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBAXSNDTX_INIT_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBAXSNDTX_INIT_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBAXSNDTX_INIT_PUTSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBAXSNDTX_INIT_INCORRECTMODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBAXSNDTX_INIT_INCORRECTMODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBAXSNDTX_INIT_INCORRECTMODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_CODE_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_CODE_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_CODE_PUTGETSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_CODE_BITOP_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_CODE_BITOP_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_CODE_BITOP_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_RESCLK_CODE_RESCLK_PROC_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_RESCLK_PROC_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_RESCLK_PROC_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_RESCLK_CODE_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_PUTGETSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_RESCLK_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_RESCLK_CODE_BITOP_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_BITOP_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_BITOP_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_RESCLK_CODE_DEACTIVATE_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_DEACTIVATE_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_DEACTIVATE_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_OCC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OCC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OCC_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_CPU_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_CPU_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_CPU_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_PMC_FORCE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PMC_FORCE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PMC_FORCE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_PCBS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PCBS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PCBS_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_PMC_INIT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PMC_INIT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PMC_INIT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_PORESW_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PORESW_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PORESW_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_POREGPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_POREGPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_POREGPE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_OHA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OHA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OHA_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_PBA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PBA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PBA_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_OCC_SRAM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OCC_SRAM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OCC_SRAM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_OCB_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OCB_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OCB_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PMC_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMC_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMC_CODE_BAD_MODE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MODE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODE), fapi::RC_PROCPM_PMC_CODE_BAD_MODE_MODE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROCPM_PMCINIT_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCINIT_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCINIT_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PMCRESET_TARGET_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCRESET_TARGET_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCRESET_TARGET_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_GPE0_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GPE0_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_GPE0_RESET_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_GPE1_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GPE1_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_GPE1_RESET_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_GPE_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GPE_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_GPE_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_GPE_BAD_ENGINE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GPE_BAD_ENGINE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_GPE_BAD_ENGINE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PORESLW_CODE_BAD_TBA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PORESLW_CODE_BAD_TBA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PORESLW_CODE_BAD_TBA_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_SLW_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SLW_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SLW_RESET_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PORESLW_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PORESLW_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PORESLW_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_STATUS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_STATUS), fapi::RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_SBE_STATUS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_VITAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL), fapi::RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_SBE_VITAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_VITAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL), fapi::RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_SBE_VITAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROCPM_PSS_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSS_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSS_CODE_BAD_MODE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MODE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODE), fapi::RC_PROCPM_PSS_CODE_BAD_MODE_MODE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROCPM_PSS_WRONG_DEVICE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSS_WRONG_DEVICE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSS_WRONG_DEVICE_ADD_ERROR_INFO(RC) 

#define RC_PROC_RAM_CORE_THD_DIS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_RAM_CORE_THD_DIS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_RAM_CORE_THD_DIS_ADD_ERROR_INFO(RC) 

#define RC_PROC_RAM_CORE_NOT_QUIESCED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_RAM_CORE_NOT_QUIESCED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_RAM_CORE_NOT_QUIESCED_ADD_ERROR_INFO(RC) 

#define RC_PROC_RAM_CORE_QUIESCE_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_RAM_CORE_QUIESCE_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_RAM_CORE_QUIESCE_FAIL_ADD_ERROR_INFO(RC) 

#define RC_PROC_RAM_CORE_RECOV_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_RAM_CORE_RECOV_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_RAM_CORE_RECOV_ADD_ERROR_INFO(RC) 

#define RC_PROC_RAM_CORE_RAM_EXCEPT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_RAM_CORE_RAM_EXCEPT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_RAM_CORE_RAM_EXCEPT_ADD_ERROR_INFO(RC) 

#define RC_PROC_RAM_CORE_RAM_NOT_DONE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_RAM_CORE_RAM_NOT_DONE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_RAM_CORE_RAM_NOT_DONE_ADD_ERROR_INFO(RC) 

#define RC_SBE_FABRICINIT_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_FABRICINIT_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_FABRICINIT_FBC_STOPPED_ERR_ADD_ERROR_INFO(RC) 

#define RC_SBE_FABRICINIT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_FABRICINIT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_FABRICINIT_ERR_ADD_ERROR_INFO(RC) 

#define PROC_SBE_PB_START_CLOCK_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define PROC_SBE_PB_START_CLOCK_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define PROC_SBE_PB_START_CLOCK_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_LOC_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_LOC_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_LOC_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_PBABAR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_PBABAR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_PBABAR_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PBA_SLVRST_TIMED_OUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PBA_SLVRST_TIMED_OUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PBA_SLVRST_TIMED_OUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_SIZE0_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_SIZE0_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_SIZE0_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_IMAGE_PLACEMENT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_PLACEMENT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_PLACEMENT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_IMAGE_ADDR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_ADDR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_ADDR_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_OVERLAP_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_OVERLAP_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_OVERLAP_ATTR_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_OVERLAP_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_OVERLAP_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_OVERLAP_ATTR_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_FSP_MMIO_MASK_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FSP_MMIO_MASK_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FSP_MMIO_MASK_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_FSP_MMIO_MASK_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&UNIT, &RANGE, &BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT), fapi::RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_UNIT}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANGE), fapi::RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_RANGE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&NODE_ID, &CHIP_ID}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_ID), fapi::RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_NODE_ID}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_ID), fapi::RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_CHIP_ID}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&NODE_BASE_ADDR, &NODE_SIZE, &CHIP_BASE_ADDR, &CHIP_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_NODE_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_SIZE), fapi::RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_NODE_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_CHIP_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_SIZE), fapi::RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_CHIP_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&NODE_BASE_ADDR, &NODE_SIZE, &CHIP_BASE_ADDR, &CHIP_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_NODE_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_SIZE), fapi::RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_NODE_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_CHIP_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_SIZE), fapi::RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_CHIP_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_ADD_ERROR_INFO(RC) 

#define RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE_MAX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP), fapi::RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_INP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX), fapi::RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_MAX}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP), fapi::RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE), fapi::RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP), fapi::RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE), fapi::RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_OLD, &DATA_IMG_SIZE_EST, &DATA_IMG_SIZE_MAX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_OLD), fapi::RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_OLD}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_EST), fapi::RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_EST}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX), fapi::RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_MAX}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_SLWB_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_INTERNAL_IMAGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_INTERNAL_IMAGE_ERR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_RING_RETRIEVAL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_RING_RETRIEVAL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_RING_RETRIEVAL_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_RING_RETRIEVAL_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_WF_CREATION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_WF_CREATION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_WF_CREATION_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_WF_CREATION_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_IMAGE_UPDATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_UPDATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_UPDATE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_IMAGE_UPDATE_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_UNKNOWN_XIP_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_UNKNOWN_XIP_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_UNKNOWN_XIP_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_UNKNOWN_XIP_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_UNKNOWN_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_UNKNOWN_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_START_CLOCKS_CHIPLETS_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_CHIPLETS_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_CHIPLETS_CLK_STATUS_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&STATUS_REG, &CHIPLET_BASE_SCOM_ADDR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_REG), fapi::RC_PROC_START_CLOCKS_CHIPLETS_CLK_STATUS_ERR_STATUS_REG}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_BASE_SCOM_ADDR), fapi::RC_PROC_START_CLOCKS_CHIPLETS_CLK_STATUS_ERR_CHIPLET_BASE_SCOM_ADDR}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_START_CLOCKS_CHIPLETS_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_CHIPLETS_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_CHIPLETS_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FIR_REG, &CHIPLET_BASE_SCOM_ADDR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG), fapi::RC_PROC_START_CLOCKS_CHIPLETS_FIR_ERR_FIR_REG}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_BASE_SCOM_ADDR), fapi::RC_PROC_START_CLOCKS_CHIPLETS_FIR_ERR_CHIPLET_BASE_SCOM_ADDR}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_START_SBE_FAILED_TO_FINISH_AUTO_POR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_SBE_FAILED_TO_FINISH_AUTO_POR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_START_SBE_FAILED_TO_FINISH_AUTO_POR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_STATUS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_STATUS), fapi::RC_PROC_START_SBE_FAILED_TO_FINISH_AUTO_POR_SBE_STATUS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_START_SBE_FAILED_TO_AUTO_START_SBE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_SBE_FAILED_TO_AUTO_START_SBE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_START_SBE_FAILED_TO_AUTO_START_SBE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_VITAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL), fapi::RC_PROC_START_SBE_FAILED_TO_AUTO_START_SBE_SBE_VITAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_STOP_DEADMAN_TIMER_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_STOP_DEADMAN_TIMER_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_STOP_DEADMAN_TIMER_BAD_ISTEP_NUM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_VITAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL), fapi::RC_PROC_STOP_DEADMAN_TIMER_BAD_ISTEP_NUM_SBE_VITAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_STOP_DEADMAN_TIMER_BAD_SUBSTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_STOP_DEADMAN_TIMER_BAD_SUBSTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_STOP_DEADMAN_TIMER_BAD_SUBSTEP_NUM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_VITAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL), fapi::RC_PROC_STOP_DEADMAN_TIMER_BAD_SUBSTEP_NUM_SBE_VITAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_THREAD_CONTROL_INV_COMMAND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_INV_COMMAND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_INV_COMMAND_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_SRESET_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_SRESET_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_SRESET_FAIL_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_START_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_START_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_START_FAIL_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_STOP_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STOP_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STOP_FAIL_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_STEP_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STEP_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STEP_FAIL_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_ADD_ERROR_INFO(RC) 

#define RC_SBE_SUCCESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SUCCESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SUCCESS_ADD_ERROR_INFO(RC) 

#define RC_SBE_SUCCESS_SLAVE_CHIP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SUCCESS_SLAVE_CHIP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SUCCESS_SLAVE_CHIP_ADD_ERROR_INFO(RC) 

#define RC_SBE_PAUSE_WITH_SUCCESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PAUSE_WITH_SUCCESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PAUSE_WITH_SUCCESS_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_ENTRY_HALT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PROC_ENTRY_HALT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PROC_ENTRY_HALT_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_EXIT_HALT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PROC_EXIT_HALT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PROC_EXIT_HALT_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_CHECKSTOP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PROC_CHECKSTOP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PROC_CHECKSTOP_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_RECOVERABLE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PROC_RECOVERABLE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PROC_RECOVERABLE_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_SPATTN_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PROC_SPATTN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PROC_SPATTN_ADD_ERROR_INFO(RC) 

#define RC_SBE_PORE_ERROR0_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR0_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PORE_ERROR0_ADD_ERROR_INFO(RC) 

#define RC_SBE_PORE_ERROR1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PORE_ERROR1_ADD_ERROR_INFO(RC) 

#define RC_SBE_PORE_ERROR2_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR2_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PORE_ERROR2_ADD_ERROR_INFO(RC) 

#define RC_SBE_PORE_ERROR3_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR3_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PORE_ERROR3_ADD_ERROR_INFO(RC) 

#define RC_SBE_PORE_ERROR4_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR4_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PORE_ERROR4_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN0_DONE_POLL_THRESHOLD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN0_DONE_POLL_THRESHOLD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN0_DONE_POLL_THRESHOLD_ADD_ERROR_INFO(RC) 

#define RC_SBE_ARRAYINIT_POLL_THRESHOLD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_ARRAYINIT_POLL_THRESHOLD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_ARRAYINIT_POLL_THRESHOLD_ADD_ERROR_INFO(RC) 

#define RC_PROC_MANUAL_SBE_START_FAILED_TO_START_SBE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_MANUAL_SBE_START_FAILED_TO_START_SBE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_MANUAL_SBE_START_FAILED_TO_START_SBE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_VITAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL), fapi::RC_PROC_MANUAL_SBE_START_FAILED_TO_START_SBE_SBE_VITAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_GETPUTREG_REGTYPE_INVALID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETPUTREG_REGTYPE_INVALID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETPUTREG_REGTYPE_INVALID_ADD_ERROR_INFO(RC) 

#define RC_PROC_GETPUTREG_REGNUM_INVALID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETPUTREG_REGNUM_INVALID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETPUTREG_REGNUM_INVALID_ADD_ERROR_INFO(RC) 

#define RC_PROC_GETPUTREG_SPR_UNSUPPORTED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETPUTREG_SPR_UNSUPPORTED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETPUTREG_SPR_UNSUPPORTED_ADD_ERROR_INFO(RC) 

#define RC_SBE_PIBMEM_PRE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_PRE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PIBMEM_PRE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_PIBMEM_POST_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_POST_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PIBMEM_POST_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_PIBMEM_IMAGE_SIZE_ALIGNMENT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_IMAGE_SIZE_ALIGNMENT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PIBMEM_IMAGE_SIZE_ALIGNMENT_ADD_ERROR_INFO(RC) 

#define RC_SBE_PIBMEM_LOAD_ADDRESS_ALIGNMENT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_LOAD_ADDRESS_ALIGNMENT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PIBMEM_LOAD_ADDRESS_ALIGNMENT_ADD_ERROR_INFO(RC) 

#define RC_SBE_PIBMEM_OVERFLOW_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_OVERFLOW_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PIBMEM_OVERFLOW_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN_MULTICAST_TYPE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_MULTICAST_TYPE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN_MULTICAST_TYPE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN_MAGIC_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_MAGIC_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN_MAGIC_MISMATCH_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN_HEADER_VERSION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_HEADER_VERSION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN_HEADER_VERSION_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN_DATA_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_DATA_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN_DATA_SIZE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN_RING_LENGTH_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_RING_LENGTH_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN_RING_LENGTH_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN_CHECKWORD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_CHECKWORD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_SCAN_CHECKWORD_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_ADD_ERROR_INFO(RC) 

#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_ADD_ERROR_INFO(RC) 

#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_ADD_ERROR_INFO(RC) 

#define RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_PROC_DMI_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_DMI_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_DMI_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&NODE_ID, &CHIP_ID}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_ID), fapi::RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_NODE_ID}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_ID), fapi::RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_CHIP_ID}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&OP}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OP), fapi::RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_OP}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&OP, &MASTER_CHIP_SYS_CURR, &MASTER_CHIP_NODE_CURR, &FIRST_CHIP_IN_SYS, &FIRST_CHIP_IN_NODE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OP), fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_OP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_SYS_CURR), fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_SYS_CURR}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_NODE_CURR), fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_NODE_CURR}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIRST_CHIP_IN_SYS), fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_FIRST_CHIP_IN_SYS}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIRST_CHIP_IN_NODE), fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_FIRST_CHIP_IN_NODE}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&VALUE, &MAX_HW_VALUE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VALUE), fapi::RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_VALUE}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAX_HW_VALUE), fapi::RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_MAX_HW_VALUE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FREQ_PB, &FREQ_CORE_FLOOR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_PB), fapi::RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_FREQ_PB}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_CORE_FLOOR), fapi::RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_FREQ_CORE_FLOOR}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CORE_FLOOR_RATIO}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CORE_FLOOR_RATIO), fapi::RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_CORE_FLOOR_RATIO}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ADDRESS0, &ADDRESS1, &DATA0, &DATA1}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS0), fapi::RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADDRESS0}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS1), fapi::RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADDRESS1}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA0), fapi::RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_DATA0}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA1), fapi::RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_DATA1}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CMD_RATE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_RATE), fapi::RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_CMD_RATE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CMD_RATE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_RATE), fapi::RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_CMD_RATE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CMD_RATE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_RATE), fapi::RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_CMD_RATE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&STATUS_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_DATA), fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_STATUS_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_UNEXPECTED_CLOCKSTOP_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_UNEXPECTED_CLOCKSTOP_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_UNEXPECTED_CLOCKSTOP_STATUS_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_O2S_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_O2S_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_O2S_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_VOLTAGE_BAD_READ_REQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_VOLTAGE_BAD_READ_REQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_VOLTAGE_BAD_READ_REQ_ADD_ERROR_INFO(RC) 

#define P8_PM_BAD_VDD_VOLTAGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define P8_PM_BAD_VDD_VOLTAGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define P8_PM_BAD_VDD_VOLTAGE_ADD_ERROR_INFO(RC) 

#define P8_PM_BAD_VCS_VOLTAGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define P8_PM_BAD_VCS_VOLTAGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define P8_PM_BAD_VCS_VOLTAGE_ADD_ERROR_INFO(RC) 

#define RC_PROC_MONITOR_SBE_HALT_IS_NOT_F_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_MONITOR_SBE_HALT_IS_NOT_F_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_MONITOR_SBE_HALT_IS_NOT_F_ADD_ERROR_INFO(RC) 

#define RC_PROC_XIPC_INPUT_IMAGE_SIZE_MESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_INPUT_IMAGE_SIZE_MESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_INPUT_IMAGE_SIZE_MESS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE_MAX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP), fapi::RC_PROC_XIPC_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_INP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX), fapi::RC_PROC_XIPC_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_MAX}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_INTERNAL_IMAGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_INTERNAL_IMAGE_ERR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP), fapi::RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE), fapi::RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP), fapi::RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE), fapi::RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_IMAGE_UPDATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_UPDATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_UPDATE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_IMAGE_UPDATE_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_REPR_RING_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_REPR_RING_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_REPR_RING_TOO_LARGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_RING_SIZE_REQ, &DATA_RING_SIZE_MAX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_SIZE_REQ), fapi::RC_PROC_XIPC_REPR_RING_TOO_LARGE_DATA_RING_SIZE_REQ}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_SIZE_MAX), fapi::RC_PROC_XIPC_REPR_RING_TOO_LARGE_DATA_RING_SIZE_MAX}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_UNKNOWN_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_UNKNOWN_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_REPAIR_RING_INVALID_RINGBUF_PTR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_RINGBUF_PTR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_RINGBUF_PTR_ADD_ERROR_INFO(RC) 

#define RC_REPAIR_RING_ALLOC_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_ALLOC_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_ALLOC_FAIL_ADD_ERROR_INFO(RC) 

#define RC_REPAIR_RING_INVALID_MAGIC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_MAGIC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_MAGIC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MAGIC}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAGIC), fapi::RC_REPAIR_RING_INVALID_MAGIC_MAGIC}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_REPAIR_RING_INVALID_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_SIZE_ADD_ERROR_INFO(RC) 

#define RC_REPAIR_RING_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_NOT_FOUND_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RING_MODIFIER}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RING_MODIFIER), fapi::RC_REPAIR_RING_NOT_FOUND_RING_MODIFIER}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_CEN_GETTRACEARRAY_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_GETTRACEARRAY_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_GETTRACEARRAY_INTERNAL_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_DATA), fapi::RC_CEN_GETTRACEARRAY_INTERNAL_ERR_ERR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_MSS_RCD_PARITY_ERROR_PORT0_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_PORT0_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_PORT0_ADD_ERROR_INFO(RC) 

#define RC_MSS_RCD_PARITY_ERROR_PORT1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_PORT1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_PORT1_ADD_ERROR_INFO(RC) 

#define RC_MSS_RCD_PARITY_ERROR_LIMIT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_LIMIT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_LIMIT_ADD_ERROR_INFO(RC) 

#define RC_MSS_CCS_HUNG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCS_HUNG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CCS_HUNG_ADD_ERROR_INFO(RC) 

#define RC_MSS_CCS_READ_MISCOMPARE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCS_READ_MISCOMPARE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CCS_READ_MISCOMPARE_ADD_ERROR_INFO(RC) 

#define RC_MSS_CCS_UE_SUE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCS_UE_SUE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CCS_UE_SUE_ADD_ERROR_INFO(RC) 

#define RC_MSS_CCS_CAL_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCS_CAL_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CCS_CAL_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_MSS_PLACE_HOLDER_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_PLACE_HOLDER_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_PLACE_HOLDER_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_EFF_CONFIG_RANK_GROUP_RC_ERROR_001A_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RANK_GROUP_RC_ERROR_001A_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RANK_GROUP_RC_ERROR_001A_ADD_ERROR_INFO(RC) 

#define RC_MSS_EFF_CONFIG_RC_ERROR_001A_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RC_ERROR_001A_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RC_ERROR_001A_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNEXPECTED_MEM_CLK_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_MEM_CLK_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNEXPECTED_MEM_CLK_STATUS_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNEXPECTED_NEST_CLK_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_NEST_CLK_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNEXPECTED_NEST_CLK_STATUS_ADD_ERROR_INFO(RC) 

#define RC_MSS_INIT1_OPCG_DONE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INIT1_OPCG_DONE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INIT1_OPCG_DONE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_INIT1_FSISTATUS_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INIT1_FSISTATUS_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INIT1_FSISTATUS_FAIL_ADD_ERROR_INFO(RC) 

#define RC_MSS_PLL_LOCK_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_PLL_LOCK_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_PLL_LOCK_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_MSS_THOLD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_THOLD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_THOLD_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_CCREG_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCREG_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CCREG_MISMATCH_ADD_ERROR_INFO(RC) 

#define RC_MSS_ARRAY_REPAIR_BUSY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ARRAY_REPAIR_BUSY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ARRAY_REPAIR_BUSY_ADD_ERROR_INFO(RC) 

#define RC_MSS_ARRAY_REPAIR_NOT_DONE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ARRAY_REPAIR_NOT_DONE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ARRAY_REPAIR_NOT_DONE_ADD_ERROR_INFO(RC) 

#define RC_MSS_ECC_TRAP_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ECC_TRAP_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ECC_TRAP_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_ADD_ERROR_INFO(RC) 

#define RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_ADD_ERROR_INFO(RC) 

#define RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_ADD_ERROR_INFO(RC) 

#define RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_ADD_ERROR_INFO(RC) 

#define RC_MSS_GENERAL_PUTSCOM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GENERAL_PUTSCOM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GENERAL_PUTSCOM_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_GENERAL_GETSCOM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GENERAL_GETSCOM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GENERAL_GETSCOM_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNEXPECTED_CLOCK_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_CLOCK_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNEXPECTED_CLOCK_STATUS_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNEXPECTED_FIR_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_FIR_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNEXPECTED_FIR_STATUS_ADD_ERROR_INFO(RC) 

#define RC_MSS_INIT_CAL_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INIT_CAL_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INIT_CAL_FAILED_ADD_ERROR_INFO(RC) 

#define RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DEVICE_TYPE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DEVICE_TYPE), fapi::RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_DEVICE_TYPE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED_ADD_ERROR_INFO(RC) 

#define RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE_ADD_ERROR_INFO(RC) 

#define RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MASTER_CHIP); {const void * l_objects[] = {&MASTER_CHIP}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_DECONF, 0, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_MSS_GENERAL_SIMSTKFAC_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GENERAL_SIMSTKFAC_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GENERAL_SIMSTKFAC_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_GET_FAPI_ATTRIBUTE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GET_FAPI_ATTRIBUTE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GET_FAPI_ATTRIBUTE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_GET_SIM_HIERARCHY_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GET_SIM_HIERARCHY_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GET_SIM_HIERARCHY_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNSUPPORTED_FREQ_CALCULATED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_FREQ_CALCULATED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_FREQ_CALCULATED_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_START_NOT_RESET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_START_NOT_RESET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_START_NOT_RESET_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_STOP_NOT_RESET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_STOP_NOT_RESET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_STOP_NOT_RESET_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_CMD_IN_PROGRESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_CMD_IN_PROGRESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_CMD_IN_PROGRESS_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_NO_MEM_CNFG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_NO_MEM_CNFG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_NO_MEM_CNFG_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_ECC_DISABLED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_ECC_DISABLED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_ECC_DISABLED_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_INVALID_CMD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_CMD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_CMD_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_INVALID_ADDR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_ADDR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_ADDR_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_CMD_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_CMD_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_CMD_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_INVALID_DIMM_CNFG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_DIMM_CNFG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_DIMM_CNFG_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_NO_X4_SYMBOL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_NO_X4_SYMBOL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_NO_X4_SYMBOL_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_INVALID_MARKSTORE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_MARKSTORE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_MARKSTORE_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_INVALID_SYMBOL_INDEX_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_SYMBOL_INDEX_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_SYMBOL_INDEX_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_INVALID_CHIP_INDEX_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_CHIP_INDEX_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_CHIP_INDEX_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_NO_X8_ECC_SPARE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_NO_X8_ECC_SPARE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_NO_X8_ECC_SPARE_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNSUPPORTED_SPD_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_SPD_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_SPD_DATA_ADD_ERROR_INFO(RC) 

#define RC_MSS_NO_COMMON_SUPPORTED_CL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_NO_COMMON_SUPPORTED_CL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_NO_COMMON_SUPPORTED_CL_ADD_ERROR_INFO(RC) 

#define RC_MSS_EXCEED_TAA_MAX_NO_CL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EXCEED_TAA_MAX_NO_CL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EXCEED_TAA_MAX_NO_CL_ADD_ERROR_INFO(RC) 

#define RC_MSS_MODULE_TYPE_MIX_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MODULE_TYPE_MIX_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MODULE_TYPE_MIX_ADD_ERROR_INFO(RC) 

#define RC_MSS_NUM_MBA_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_NUM_MBA_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_NUM_MBA_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_SLEW_CAL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SLEW_CAL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SLEW_CAL_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_INVALID_FREQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INVALID_FREQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INVALID_FREQ_ADD_ERROR_INFO(RC) 

#define RC_MSS_INVALID_DRAM_GEN_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INVALID_DRAM_GEN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INVALID_DRAM_GEN_ADD_ERROR_INFO(RC) 

#define RC_MSS_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_IMP_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_INVALID_FN_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INVALID_FN_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INVALID_FN_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_MCBIST_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MCBIST_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MCBIST_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_MCBIST_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MCBIST_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MCBIST_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_PORT_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_PORT_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_PORT_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_DRIVER_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRIVER_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRIVER_IMP_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_SLEW_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SLEW_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SLEW_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_WR_DRAM_VREF_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_WR_DRAM_VREF_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_WR_DRAM_VREF_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_READ_CEN_VREF_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_READ_CEN_VREF_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_READ_CEN_VREF_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_RECEIVER_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_RECEIVER_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_RECEIVER_IMP_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_CEN_DMI_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_DMI_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_DMI_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) 

namespace fapi
{

/**
 * @brief Enumeration of FFDC identifiers
 */
enum HwpFfdcId
{
    RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_FFDC_IF_TEST_NUM_MBAS_FOUND = 0xd07646d2,
    RC_INITFILE_INCORRECT_VER_FFDC_IF_VER = 0x4002ab96,
    RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_BASE_ADDR = 0x6181d774,
    RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_SIZE = 0xb90d6a25,
    RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_SIZE = 0x63e7ab7a,
    RC_PROC_XIPC_UNKNOWN_ERROR_RC_LOCAL = 0x1cded477,
    RC_PROC_XIPC_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_INP = 0x16bdc73e,
    IO_GCR_WRITE_MISMATCH_RC_READ_BUF = 0x2baf3c63,
    RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_SBE_STATUS = 0xea4c31d6,
    RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_ATTR_DATA = 0x8337f2a5,
    RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_STATUS2_DATA = 0x47ad3c13,
    RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_MAX_HW_VALUE = 0x5e902604,
    RC_TEST_ERROR_A_UNIT_TEST_FFDC_MASTER_CHIP_TARGET = 0x94c5d4b4,
    RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_BASE_ADDR = 0x41da23fd,
    RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_FREQ_CORE_FLOOR = 0xa43e0b38,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_STATUS_DATA = 0x6bdb967c,
    RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_ATTR_DATA = 0x6660e7f8,
    RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_FIR_REG = 0x744593f6,
    RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0xa93b020c,
    RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_RANK = 0x0c386e0b,
    RC_PROC_SLWB_UNKNOWN_ERROR_RC_LOCAL = 0xfd3729c2,
    RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_SIZE = 0xd18dafcc,
    RC_PROC_XIPC_INTERNAL_IMAGE_ERR_RC_LOCAL = 0x6cfa062b,
    RC_PROC_XIPC_REPR_RING_TOO_LARGE_DATA_RING_SIZE_MAX = 0x71a8a54d,
    RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_BASE_ADDR = 0x119e2ec1,
    RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_BASE_ADDR = 0x8ecdd8ba,
    RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_ATTR_DATA = 0x5f17eb4c,
    RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_END_ADDRESS = 0x86c623de,
    RC_PROC_XIPC_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_MAX = 0xbc01e2d1,
    RC_PROC_STOP_DEADMAN_TIMER_BAD_ISTEP_NUM_SBE_VITAL = 0xc8383508,
    RC_PROC_L2_FLUSH_CMD_ERROR_RC_CMD_REG = 0x2178c238,
    RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_CMD_REG_ADDR = 0x6b14227b,
    RC_PROC_START_CLOCKS_CHIPLETS_CLK_STATUS_ERR_CHIPLET_BASE_SCOM_ADDR = 0xdde69510,
    RC_PROC_GETTRACEARRAY_INTERNAL_ERR_ERR_DATA = 0x5fde62f0,
    RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_MBA_TARGET = 0xab70075e,
    RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADDRESS1 = 0x496c6a84,
    RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_RANGE = 0x044983c7,
    RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_STATUS_DATA = 0x2b61a912,
    RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FIR_ERR_FIR_REG = 0x21d1f7bd,
    RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_RC_LOCAL = 0x8478d062,
    RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0x4c2a2140,
    RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_NODE_SIZE = 0x404ec1b7,
    RC_PROC_START_CLOCKS_CHIPLETS_FIR_ERR_FIR_REG = 0x86d33801,
    RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_SBE_VITAL = 0x452274c9,
    RC_PROC_STOP_DEADMAN_TIMER_BAD_SUBSTEP_NUM_SBE_VITAL = 0xdfdc0603,
    RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_BASE_ADDR = 0x105f0b20,
    RC_PROC_ADU_UTILS_INTERNAL_ERR_ERR_DATA = 0xe43d9ed2,
    RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_FREQ_PB = 0xeb903578,
    RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_ATTR_DATA = 0x186833da,
    RC_REPAIR_RING_NOT_FOUND_RING_MODIFIER = 0x121ad260,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_SYS_CURR = 0xad1d23d1,
    RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_DIMM = 0x965649ec,
    RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_OLD = 0x12ea4e49,
    RC_INITFILE_TGT_NUM_OUT_OF_RANGE_FFDC_IF_NUM_TGTS_PASSED_IN = 0x9e4ca7d3,
    RC_PROC_SLWB_WF_CREATION_ERROR_RC_LOCAL = 0x631c839b,
    RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_EST = 0xbc82b047,
    RC_PROC_SETUP_BARS_FSP_MMIO_MASK_ATTR_ERR_SIZE = 0xe9c839d8,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_FIRST_CHIP_IN_NODE = 0x7807d5ad,
    RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_NUMBER_OF_ATTEMPTS = 0x60e7e5e9,
    RC_PROC_PBA_UTILS_INVALID_ARGS_ARGS = 0xb0a96f65,
    RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_ARGS = 0x772b30bc,
    RC_PROC_L2_FLUSH_CMD_ERROR_RC_CMD_REG_ADDR = 0xe7d47942,
    RC_PROC_MANUAL_SBE_START_FAILED_TO_START_SBE_SBE_VITAL = 0x90031801,
    RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0x840894bc,
    RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_ATTR_DATA = 0x18f2de51,
    RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_END_ADDRESS = 0x31e546b6,
    RC_REPAIR_RING_INVALID_MAGIC_MAGIC = 0x44353af3,
    RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_DATA0 = 0x408ef566,
    RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_SIZE = 0x6f60ff74,
    RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_SIZE = 0x2bbaf23a,
    RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_SIZE = 0x6a2ea7a2,
    RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_SIZE = 0x03e922dd,
    RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADDRESS0 = 0x2037586d,
    RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_CHIP_SIZE = 0x72f2f851,
    RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_ATTR_DATA = 0xb8f37507,
    RC_PROC_START_CLOCKS_CHIPLETS_CLK_STATUS_ERR_STATUS_REG = 0xc62d4db1,
    RC_PROC_ADU_COHERENT_UTILS_STATUS_MISMATCH_STATUS_DATA = 0xad834f1d,
    RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_VALUE = 0xba62f5bb,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_NODE_CURR = 0x6e1220c0,
    RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_CMD_RATE = 0x0048cfdd,
    RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_SIZE = 0xa0a6c7d7,
    RC_PROC_SLWB_UNKNOWN_XIP_ERROR_RC_LOCAL = 0xd0c4cc96,
    RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0xd6c027ea,
    RC_PROC_XIPC_IMAGE_UPDATE_ERROR_RC_LOCAL = 0xd15f7cce,
    RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_DIMM = 0xe6cb4d12,
    RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_CHIP_BASE_ADDR = 0x86fd75d5,
    RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_RC_LOCAL = 0xf3d3e245,
    RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_BASE_ADDR = 0xecbd0081,
    RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_BASE_ADDR = 0x950a9f6d,
    RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_SIZE = 0x74f81552,
    RC_PROC_SLWB_IMAGE_UPDATE_ERROR_RC_LOCAL = 0x526e6893,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_OP = 0x70a4f7cf,
    RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_CORE_FLOOR_RATIO = 0xad8d2c1e,
    RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_NODE_ID = 0xef045ec8,
    RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_ATTR_DATA = 0x3f7cd63c,
    RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_CMD_RATE = 0x0928073f,
    RC_TEST_ERROR_A_UNIT_TEST_FFDC_DATA_BUF = 0xbfc180c9,
    RC_PROC_ADU_UTILS_INVALID_ARGS_ARGS = 0x94612d0b,
    RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0xebcd3edf,
    RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_CHIP_ID = 0xa36cab2d,
    RC_PROC_L2_FLUSH_UNKNOWN_PLATFORM_RC_PLATFORM = 0x49c484ea,
    RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_FIR_DATA = 0xf6d684a9,
    RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_STATUS0_DATA = 0x5a8964df,
    RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0xd2e5250e,
    RC_PROC_SLWB_RING_RETRIEVAL_ERROR_RC_LOCAL = 0xfafdb4b0,
    RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL = 0x90b26d5f,
    RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL = 0x85737c0a,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_FIRST_CHIP_IN_SYS = 0x7433aec4,
    RC_INITFILE_ATTR_ID_OUT_OF_RANGE_FFDC_IF_ATTR_ID_OUT_OF_RANGE = 0x2feb6247,
    RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_STATUS1_DATA = 0x2065e845,
    RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0x6d7cc1cd,
    RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_SIZE = 0x92d7ca9a,
    RC_PROC_CONTINUE_SBE_BAD_STATE_SM_STATE = 0x2e63aa71,
    REG_FFDC_TEST_X_PROC_REGISTERS = 0x975d53e4,
    RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_SIZE = 0x0721bf7c,
    RC_PROCPM_PMC_CODE_BAD_MODE_MODE = 0x294b335f,
    RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_RC_LOCAL = 0x7a654e95,
    RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_BASE_ADDR = 0x958c7034,
    RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0xb32ee59c,
    IO_GCR_WRITE_MISMATCH_RC_WRITE_BUF = 0xbc7b90a4,
    RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_ATTR_DATA = 0x6a16785a,
    RC_TEST_DQ_BAD_DATA_FFDC_DATA2 = 0x4d059579,
    RC_PROC_START_SBE_FAILED_TO_AUTO_START_SBE_SBE_VITAL = 0xf97e114f,
    RC_CEN_GETTRACEARRAY_INTERNAL_ERR_ERR_DATA = 0x1d0dc4df,
    RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_RC_LOCAL = 0xa79bbe0d,
    RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_CHIP_ID = 0x61bae87c,
    RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_NODE_BASE_ADDR = 0x88835e64,
    RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_RC_LOCAL = 0xee1d1c92,
    RC_TEST_ERROR_B_UNIT_TEST_FFDC_DATA = 0x5186f9b2,
    RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_PORT = 0xc1843f4c,
    RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_PORT = 0x814769c8,
    RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_MAX = 0x37ce83d3,
    RC_PROC_START_SBE_FAILED_TO_FINISH_AUTO_POR_SBE_STATUS = 0xa4f74375,
    RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_SIZE = 0x9b9e73a2,
    RC_PROC_GETTRACEARRAY_INVALID_ARGS_ARGS = 0xc10d7a9f,
    RC_PROC_SLWB_INTERNAL_IMAGE_ERR_RC_LOCAL = 0x733fb976,
    RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_CMD_REG = 0x813ca7a0,
    RC_TEST_DQ_BAD_DATA_FFDC_DATA1 = 0xb03bd885,
    RC_PROC_XIPC_REPR_RING_TOO_LARGE_DATA_RING_SIZE_REQ = 0x7b0fd117,
    RC_PROC_PBA_UTILS_PBA_SLAVE_RESET_FAIL_ERR_DATA = 0x60e8784c,
    RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_START_ADDRESS = 0x4d45d26c,
    RC_INITFILE_LIT_ID_OUT_OF_RANGE_FFDC_IF_LIT_ID_OUT_OF_RANGE = 0xd819f781,
    RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_BASE_ADDR = 0x65807715,
    RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_STATUS3_DATA = 0x1c30100b,
    RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_CHIP_BASE_ADDR = 0xee101ab2,
    RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_BASE_ADDR = 0x90583028,
    RC_PROC_PBA_UTILS_BAD_PBA_REGION_ERR_DATA = 0x2f241221,
    RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_ATTR_DATA = 0x9e1cb122,
    RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_CHIP_SIZE = 0xd49d2435,
    RC_PROCPM_PSS_CODE_BAD_MODE_MODE = 0xb0ab34d8,
    RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_DEVICE_TYPE = 0x8c4547c3,
    RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_CMD_RATE = 0xa5c9d9ef,
    RC_PROC_CEN_FRAMELOCK_FL_CEN_FIR_ERR_FIR_REG = 0xffb42227,
    RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_START_ADDRESS = 0x0cb69fae,
    RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_OP = 0x8e9931be,
    RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_NODE_BASE_ADDR = 0x2106cb16,
    RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_NODE_SIZE = 0x8534f570,
    RC_PROC_START_CLOCKS_CHIPLETS_FIR_ERR_CHIPLET_BASE_SCOM_ADDR = 0x97ddeda3,
    RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ERRPT0_DATA = 0xa3d264ad,
    RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ERRPT2_DATA = 0x3d9c895f,
    RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_UNIT = 0xc1bc569b,
    RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_DATA1 = 0x08628ff9,
    RC_TEST_ERROR_A_UNIT_TEST_FFDC_DATA_INTEGER = 0x8e6db82f,
    RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_ERR_DATA = 0x7817f4f3,
    RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_FIR_REG = 0xd9d11644,
    RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_MAX = 0x3bbf309d,
    RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_SBE_VITAL = 0x973c13b2,
    RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_BASE_ADDR = 0x7f6fde45,
    RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_SIZE = 0x72f511c3,
    RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ERRPT1_DATA = 0xa1b2c416,
    RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_INP = 0x1ff0ab00,
    RC_INITFILE_TGT_NUM_OUT_OF_RANGE_FFDC_IF_TGT_NUM = 0x41b2db47,
    RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_NODE_ID = 0x8aef3017,
};

}



#endif
