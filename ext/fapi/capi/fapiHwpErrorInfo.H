// fapiHwpErrorInfo.H
// This file is generated by perl script fapiParseErrorInfo.pl

#ifndef FAPIHWPERRORINFO_H_
#define FAPIHWPERRORINFO_H_

/**
 * @brief Error Information macros and HwpFfdcId enumeration
 */
#define RC_TEST_ERROR_A_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, hwpTestFfdc1, UNIT_TEST_FFDC_MASTER_CHIP_TARGET, RC); }
#define RC_TEST_ERROR_A_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(UNIT_TEST_FFDC_MASTER_CHIP_TARGET, fapi::REG_FFDC_TEST_X_PROC_REGISTERS, RC); 
#define RC_TEST_ERROR_A_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&UNIT_TEST_FFDC_DATA_INTEGER, &UNIT_TEST_FFDC_DATA_BUF, &UNIT_TEST_FFDC_MASTER_CHIP_TARGET}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT_TEST_FFDC_DATA_INTEGER), fapi::RC_TEST_ERROR_A_UNIT_TEST_FFDC_DATA_INTEGER}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT_TEST_FFDC_DATA_BUF), fapi::RC_TEST_ERROR_A_UNIT_TEST_FFDC_DATA_BUF}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT_TEST_FFDC_MASTER_CHIP_TARGET), fapi::RC_TEST_ERROR_A_UNIT_TEST_FFDC_MASTER_CHIP_TARGET}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_TEST_ERROR_B_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_ERROR_B_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_ERROR_B_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&UNIT_TEST_FFDC_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT_TEST_FFDC_DATA), fapi::RC_TEST_ERROR_B_UNIT_TEST_FFDC_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_TEST_CONFIG_NO_MCS_CHIPLETS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_CONFIG_NO_MCS_CHIPLETS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_CONFIG_NO_MCS_CHIPLETS_ADD_ERROR_INFO(RC) 

#define RC_TEST_CONFIG_PARENT_CHIP_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_CONFIG_PARENT_CHIP_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_CONFIG_PARENT_CHIP_MISMATCH_ADD_ERROR_INFO(RC) 

#define RC_TEST_DQ_NO_ERR_ON_BAD_PARAMS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_DQ_NO_ERR_ON_BAD_PARAMS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_DQ_NO_ERR_ON_BAD_PARAMS_ADD_ERROR_INFO(RC) 

#define RC_TEST_DQ_BAD_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_DQ_BAD_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_DQ_BAD_DATA_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_DATA1, &FFDC_DATA2}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA1), fapi::RC_TEST_DQ_BAD_DATA_FFDC_DATA1}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA2), fapi::RC_TEST_DQ_BAD_DATA_FFDC_DATA2}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_INITFILE_INCORRECT_VER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_INCORRECT_VER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_INCORRECT_VER_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_IF_VER}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_VER), fapi::RC_INITFILE_INCORRECT_VER_FFDC_IF_VER}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_INITFILE_ATTR_ID_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_ATTR_ID_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_ATTR_ID_OUT_OF_RANGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_IF_ATTR_ID_OUT_OF_RANGE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_ATTR_ID_OUT_OF_RANGE), fapi::RC_INITFILE_ATTR_ID_OUT_OF_RANGE_FFDC_IF_ATTR_ID_OUT_OF_RANGE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_INITFILE_LIT_ID_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_LIT_ID_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_LIT_ID_OUT_OF_RANGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_IF_LIT_ID_OUT_OF_RANGE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_LIT_ID_OUT_OF_RANGE), fapi::RC_INITFILE_LIT_ID_OUT_OF_RANGE_FFDC_IF_LIT_ID_OUT_OF_RANGE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_INITFILE_TGT_NUM_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_INITFILE_TGT_NUM_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_INITFILE_TGT_NUM_OUT_OF_RANGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_IF_TGT_NUM, &FFDC_IF_NUM_TGTS_PASSED_IN}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_TGT_NUM), fapi::RC_INITFILE_TGT_NUM_OUT_OF_RANGE_FFDC_IF_TGT_NUM}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_NUM_TGTS_PASSED_IN), fapi::RC_INITFILE_TGT_NUM_OUT_OF_RANGE_FFDC_IF_NUM_TGTS_PASSED_IN}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_HWP_EXEC_INITFILE_TEST_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_FAILED_ADD_ERROR_INFO(RC) 

#define RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_IF_TEST_NUM_MBAS_FOUND}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_IF_TEST_NUM_MBAS_FOUND), fapi::RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_FFDC_IF_TEST_NUM_MBAS_FOUND}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_HWP_EXEC_INITFILE_TEST_NO_MEMBUF_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_NO_MEMBUF_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_HWP_EXEC_INITFILE_TEST_NO_MEMBUF_FOUND_ADD_ERROR_INFO(RC) 

#define RC_HWP_ATTR_UNIT_TEST_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_HWP_ATTR_UNIT_TEST_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_HWP_ATTR_UNIT_TEST_FAIL_ADD_ERROR_INFO(RC) 

#define RC_TEST_WRONG_MCS_RETURNED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_TEST_WRONG_MCS_RETURNED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_TEST_WRONG_MCS_RETURNED_ADD_ERROR_INFO(RC) 

#define RC_BAD_DQ_DIMM_BAD_PARAM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_BAD_DQ_DIMM_BAD_PARAM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_BAD_DQ_DIMM_BAD_PARAM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_PORT, &FFDC_DIMM, &FFDC_RANK}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_PORT), fapi::RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_PORT}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DIMM), fapi::RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_DIMM}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_RANK), fapi::RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_RANK}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_BAD_DQ_DIMM_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_BAD_DQ_DIMM_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_BAD_DQ_DIMM_NOT_FOUND_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_MBA_TARGET, &FFDC_PORT, &FFDC_DIMM}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_MBA_TARGET), fapi::RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_MBA_TARGET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_PORT), fapi::RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_PORT}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DIMM), fapi::RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_DIMM}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_ACCESSOR_HWP_INVALID_TARGET_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ACCESSOR_HWP_INVALID_TARGET_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ACCESSOR_HWP_INVALID_TARGET_TYPE_ADD_ERROR_INFO(RC) 

#define RC_ACCESSOR_HWP_MEMORY_ALLOC_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ACCESSOR_HWP_MEMORY_ALLOC_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ACCESSOR_HWP_MEMORY_ALLOC_FAIL_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_RESTORE_INVALID_TARGET_PAIR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_RESTORE_INVALID_TARGET_PAIR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_RESTORE_INVALID_TARGET_PAIR_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_RESTORE_FIELD_VPD_NOT_CLEAR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_RESTORE_FIELD_VPD_NOT_CLEAR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_RESTORE_FIELD_VPD_NOT_CLEAR_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_RESTORE_THRESHOLD_EXCEED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_RESTORE_THRESHOLD_EXCEED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_RESTORE_THRESHOLD_EXCEED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FFDC_ENDP_TARGET, &FFDC_SUB_IFACE, &FFDC_LANES}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_ENDP_TARGET), fapi::RC_EREPAIR_RESTORE_THRESHOLD_EXCEED_FFDC_ENDP_TARGET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_SUB_IFACE), fapi::RC_EREPAIR_RESTORE_THRESHOLD_EXCEED_FFDC_SUB_IFACE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_LANES), fapi::RC_EREPAIR_RESTORE_THRESHOLD_EXCEED_FFDC_LANES}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_EREPAIR_RESTORE_CHARM_THRESHOLD_EXCEED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_RESTORE_CHARM_THRESHOLD_EXCEED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_RESTORE_CHARM_THRESHOLD_EXCEED_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_RESTORE_SPARE_LANES_IN_VPD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_RESTORE_SPARE_LANES_IN_VPD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_RESTORE_SPARE_LANES_IN_VPD_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_RESTORE_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_RESTORE_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_RESTORE_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_THRESHOLD_EXCEED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_THRESHOLD_EXCEED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_THRESHOLD_EXCEED_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_MVPD_FULL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_MVPD_FULL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_MVPD_FULL_ADD_ERROR_INFO(RC) 

#define RC_EREPAIR_MBVPD_FULL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EREPAIR_MBVPD_FULL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EREPAIR_MBVPD_FULL_ADD_ERROR_INFO(RC) 

#define RC_ACCESSOR_HWP_INVALID_MEM_VPD_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ACCESSOR_HWP_INVALID_MEM_VPD_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ACCESSOR_HWP_INVALID_MEM_VPD_SIZE_ADD_ERROR_INFO(RC) 

#define RC_ACCESSOR_HWP_INVALID_FABRIC_VPD_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ACCESSOR_HWP_INVALID_FABRIC_VPD_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ACCESSOR_HWP_INVALID_FABRIC_VPD_SIZE_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_INVALID_ARGS_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_INVALID_ARGS_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_INVALID_ARGS_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_INTERNAL_ERR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_INTERNAL_ERR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_INTERNAL_ERR_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FAIL_ERR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_ERR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_ERR_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FAIL_WIRETEST_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_WIRETEST_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_WIRETEST_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FAIL_DESKEW_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_DESKEW_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_DESKEW_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FAIL_EYE_OPT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_EYE_OPT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_EYE_OPT_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FAIL_REPAIR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_REPAIR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_REPAIR_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FAIL_FUNC_MODE_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_FUNC_MODE_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FAIL_FUNC_MODE_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_WIRETEST_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_WIRETEST_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_WIRETEST_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_DESKEW_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_DESKEW_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_DESKEW_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_EYE_OPT_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_EYE_OPT_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_EYE_OPT_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_REPAIR_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_REPAIR_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_REPAIR_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_FUNC_MODE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_FUNC_MODE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_FUNC_MODE_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_GCR_WRITE_MISMATCH_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_GCR_WRITE_MISMATCH_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_GCR_WRITE_MISMATCH_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&READ_BUF, &WRITE_BUF}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(READ_BUF), fapi::IO_GCR_WRITE_MISMATCH_RC_READ_BUF}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(WRITE_BUF), fapi::IO_GCR_WRITE_MISMATCH_RC_WRITE_BUF}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define IO_RUN_TRAINING_DLL_WORKAROUND_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_DLL_WORKAROUND_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_DLL_WORKAROUND_FAIL_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_DLL_VAL_OUT_OF_BOUND_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_DLL_VAL_OUT_OF_BOUND_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_DLL_VAL_OUT_OF_BOUND_RC_ADD_ERROR_INFO(RC) 

#define IO_RUN_TRAINING_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_RUN_TRAINING_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_RUN_TRAINING_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_OFFCAL_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_OFFCAL_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_OFFCAL_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_OFFCAL_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_OFFCAL_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_OFFCAL_ERROR_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCAL_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_ERROR_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCAL_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCALN_VALUE_OUT_OF_RANGE_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCALP_VALUE_OUT_OF_RANGE_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCAL_K2_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_K2_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_K2_EXCEEDED_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCAL_M_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_M_EXCEEDED_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_M_EXCEEDED_RC_ADD_ERROR_INFO(RC) 

#define IO_DCCAL_ZCAL_M_LOW_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_DCCAL_ZCAL_M_LOW_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_DCCAL_ZCAL_M_LOW_RC_ADD_ERROR_INFO(RC) 

#define IO_CLEAR_FIRS_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_CLEAR_FIRS_INVALID_INVOCATION_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_CLEAR_FIRS_INVALID_INVOCATION_RC_ADD_ERROR_INFO(RC) 

#define IO_FIR_LANE_RX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_LANE_RX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_LANE_RX_PARITY_ERROR_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_TARGET, &LANE_ID, &RX_ERROR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET), fapi::IO_FIR_LANE_RX_PARITY_ERROR_RC_CHIP_TARGET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LANE_ID), fapi::IO_FIR_LANE_RX_PARITY_ERROR_RC_LANE_ID}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_ERROR_REG), fapi::IO_FIR_LANE_RX_PARITY_ERROR_RC_RX_ERROR_REG}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define IO_FIR_GROUP_RX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_GROUP_RX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_GROUP_RX_PARITY_ERROR_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_TARGET, &RX_ERROR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET), fapi::IO_FIR_GROUP_RX_PARITY_ERROR_RC_CHIP_TARGET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_ERROR_REG), fapi::IO_FIR_GROUP_RX_PARITY_ERROR_RC_RX_ERROR_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define IO_FIR_BUS_RX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_BUS_RX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_BUS_RX_PARITY_ERROR_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_TARGET, &RX_ERROR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET), fapi::IO_FIR_BUS_RX_PARITY_ERROR_RC_CHIP_TARGET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RX_ERROR_REG), fapi::IO_FIR_BUS_RX_PARITY_ERROR_RC_RX_ERROR_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define IO_FIR_LANE_TX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_LANE_TX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_LANE_TX_PARITY_ERROR_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_TARGET, &LANE_ID, &TX_ERROR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET), fapi::IO_FIR_LANE_TX_PARITY_ERROR_RC_CHIP_TARGET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LANE_ID), fapi::IO_FIR_LANE_TX_PARITY_ERROR_RC_LANE_ID}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TX_ERROR_REG), fapi::IO_FIR_LANE_TX_PARITY_ERROR_RC_TX_ERROR_REG}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define IO_FIR_GROUP_TX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_GROUP_TX_PARITY_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_GROUP_TX_PARITY_ERROR_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_TARGET, &TX_ERROR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET), fapi::IO_FIR_GROUP_TX_PARITY_ERROR_RC_CHIP_TARGET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TX_ERROR_REG), fapi::IO_FIR_GROUP_TX_PARITY_ERROR_RC_TX_ERROR_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define IO_FIR_SPARES_DEPLOYED_FIR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_SPARES_DEPLOYED_FIR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_SPARES_DEPLOYED_FIR_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_TARGET, &SPARE_ERROR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET), fapi::IO_FIR_SPARES_DEPLOYED_FIR_RC_CHIP_TARGET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SPARE_ERROR_REG), fapi::IO_FIR_SPARES_DEPLOYED_FIR_RC_SPARE_ERROR_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_TARGET, &SPARE_ERROR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET), fapi::IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_CHIP_TARGET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SPARE_ERROR_REG), fapi::IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_SPARE_ERROR_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define IO_FIR_GCR_HANG_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_GCR_HANG_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_GCR_HANG_ERROR_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_TARGET}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET), fapi::IO_FIR_GCR_HANG_ERROR_RC_CHIP_TARGET}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define IO_FIR_RECALIBRATION_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_RECALIBRATION_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_RECALIBRATION_ERROR_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_TARGET, &RECAL_ERROR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET), fapi::IO_FIR_RECALIBRATION_ERROR_RC_CHIP_TARGET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RECAL_ERROR_REG), fapi::IO_FIR_RECALIBRATION_ERROR_RC_RECAL_ERROR_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define IO_FIR_TOO_MANY_BUS_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define IO_FIR_TOO_MANY_BUS_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define IO_FIR_TOO_MANY_BUS_ERROR_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_TARGET, &BUS_ERROR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_TARGET), fapi::IO_FIR_TOO_MANY_BUS_ERROR_RC_CHIP_TARGET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BUS_ERROR_REG), fapi::IO_FIR_TOO_MANY_BUS_ERROR_RC_BUS_ERROR_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&START_ADDRESS, &END_ADDRESS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(START_ADDRESS), fapi::RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_START_ADDRESS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(END_ADDRESS), fapi::RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_END_ADDRESS}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_ADU_COHERENT_UTILS_INVALID_TSIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_INVALID_TSIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_INVALID_TSIZE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&TSIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(TSIZE), fapi::RC_PROC_ADU_COHERENT_UTILS_INVALID_TSIZE_TSIZE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_ADU_COHERENT_UTILS_FBC_INIT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_FBC_INIT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_FBC_INIT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_ADU_COHERENT_UTILS_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_FBC_STOPPED_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_ADU_COHERENT_UTILS_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_STATUS_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&STATUS_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_DATA), fapi::RC_PROC_ADU_COHERENT_UTILS_STATUS_MISMATCH_STATUS_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_ADU_COHERENT_UTILS_PBINIT_REPLAY_LIMIT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_PBINIT_REPLAY_LIMIT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_COHERENT_UTILS_PBINIT_REPLAY_LIMIT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_ADU_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INVALID_ARGS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ARGS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ARGS), fapi::RC_PROC_ADU_UTILS_INVALID_ARGS_ARGS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_ADU_UTILS_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ADU_UTILS_INTERNAL_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_DATA), fapi::RC_PROC_ADU_UTILS_INTERNAL_ERR_ERR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define FAPI_RC_PLAT_ERR_ADU_LOCKED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define FAPI_RC_PLAT_ERR_ADU_LOCKED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define FAPI_RC_PLAT_ERR_ADU_LOCKED_ADD_ERROR_INFO(RC) 

#define RC_PROC_CONTINUE_SBE_BAD_STATE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CONTINUE_SBE_BAD_STATE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_CONTINUE_SBE_BAD_STATE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SM_STATE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SM_STATE), fapi::RC_PROC_CONTINUE_SBE_BAD_STATE_SM_STATE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CONTINUE_SBE_SECURITY_BLOCKS_CONTINUE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CONTINUE_SBE_SECURITY_BLOCKS_CONTINUE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_CFAM_REGISTERS, RC); 
#define RC_PROC_CONTINUE_SBE_SECURITY_BLOCKS_CONTINUE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SECURITY_SETUP}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SECURITY_SETUP), fapi::RC_PROC_CONTINUE_SBE_SECURITY_BLOCKS_CONTINUE_SECURITY_SETUP}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ARGS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ARGS), fapi::RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_ARGS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CEN_FRAMELOCK_FL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_CEN_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FIR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG), fapi::RC_PROC_CEN_FRAMELOCK_FL_CEN_FIR_ERR_FIR_REG}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FIR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG), fapi::RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_FIR_REG}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CEN_FRAMELOCK_FL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_CEN_FAIL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_P8_FAIL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FL_TIMEOUT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FIR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG), fapi::RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FIR_ERR_FIR_REG}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FIR_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG), fapi::RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_FIR_REG}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FAIL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_P8_FAIL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CEN_FRAMELOCK_FRTL_TIMEOUT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CLEANUP_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CLEANUP_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CLEANUP_FBC_STOPPED_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CLEANUP_DUMMY_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CLEANUP_DUMMY_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CLEANUP_DUMMY_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_SPCWKUP_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_TIMEOUT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&I_OPERATION, &EX, &ENTITY, &POLLCOUNT, &PMGP0, &SP_WKUP_REG_ADDRESS, &SP_WKUP_REG_VALUE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(I_OPERATION), fapi::RC_PROCPM_SPCWKUP_TIMEOUT_I_OPERATION}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX), fapi::RC_PROCPM_SPCWKUP_TIMEOUT_EX}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENTITY), fapi::RC_PROCPM_SPCWKUP_TIMEOUT_ENTITY}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLCOUNT), fapi::RC_PROCPM_SPCWKUP_TIMEOUT_POLLCOUNT}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMGP0), fapi::RC_PROCPM_SPCWKUP_TIMEOUT_PMGP0}, {fapi::ReturnCode::EI_TYPE_FFDC, 5, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SP_WKUP_REG_ADDRESS), fapi::RC_PROCPM_SPCWKUP_TIMEOUT_SP_WKUP_REG_ADDRESS}, {fapi::ReturnCode::EI_TYPE_FFDC, 6, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SP_WKUP_REG_VALUE), fapi::RC_PROCPM_SPCWKUP_TIMEOUT_SP_WKUP_REG_VALUE}}; RC.addErrorInfo(l_objects, l_entries, 7);}

#define RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&I_ENTITY}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(I_ENTITY), fapi::RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_I_ENTITY}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROCPM_SPCWKUP_CODE_BAD_OP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_CODE_BAD_OP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_CODE_BAD_OP_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&I_OPERATION}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(I_OPERATION), fapi::RC_PROCPM_SPCWKUP_CODE_BAD_OP_I_OPERATION}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROCPM_CHKSTOP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_CHKSTOP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_CHKSTOP_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_SPCWKUP_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_PUTGETSCOM_FAILED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERRORS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERRORS), fapi::RC_PROCPM_SPCWKUP_PUTGETSCOM_FAILED_ERRORS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&I_OPERATION, &EX, &ENTITY, &PHYP_SPCWKUP_COUNT, &FSP_SPCWKUP_COUNT, &OCC_SPCWKUP_COUNT}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(I_OPERATION), fapi::RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_I_OPERATION}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX), fapi::RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_EX}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENTITY), fapi::RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_ENTITY}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PHYP_SPCWKUP_COUNT), fapi::RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_PHYP_SPCWKUP_COUNT}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FSP_SPCWKUP_COUNT), fapi::RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_FSP_SPCWKUP_COUNT}, {fapi::ReturnCode::EI_TYPE_FFDC, 5, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OCC_SPCWKUP_COUNT), fapi::RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_OCC_SPCWKUP_COUNT}}; RC.addErrorInfo(l_objects, l_entries, 6);}

#define RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_GETTRACEARRAY_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETTRACEARRAY_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETTRACEARRAY_INVALID_ARGS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ARGS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ARGS), fapi::RC_PROC_GETTRACEARRAY_INVALID_ARGS_ARGS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_GETTRACEARRAY_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETTRACEARRAY_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETTRACEARRAY_INTERNAL_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_DATA), fapi::RC_PROC_GETTRACEARRAY_INTERNAL_ERR_ERR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_GETTRACEARRAY_ARRAY_RUNNING_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETTRACEARRAY_ARRAY_RUNNING_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETTRACEARRAY_ARRAY_RUNNING_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(EX_CHIPLET_IN_ERROR, fapi::REG_FFDC_PROC_L2_REGISTERS, RC); 
#define RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CMD_REG_ADDR, &CMD_REG, &NUMBER_OF_ATTEMPTS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_REG_ADDR), fapi::RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_CMD_REG_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_REG), fapi::RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_CMD_REG}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NUMBER_OF_ATTEMPTS), fapi::RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_NUMBER_OF_ATTEMPTS}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_L2_FLUSH_CMD_ERROR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_L2_FLUSH_CMD_ERROR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(EX_CHIPLET_IN_ERROR, fapi::REG_FFDC_PROC_L2_REGISTERS, RC); 
#define RC_PROC_L2_FLUSH_CMD_ERROR_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CMD_REG_ADDR, &CMD_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_REG_ADDR), fapi::RC_PROC_L2_FLUSH_CMD_ERROR_RC_CMD_REG_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_REG), fapi::RC_PROC_L2_FLUSH_CMD_ERROR_RC_CMD_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_L2_FLUSH_UNKNOWN_PLATFORM_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_L2_FLUSH_UNKNOWN_PLATFORM_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_L2_FLUSH_UNKNOWN_PLATFORM_RC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&PLATFORM}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PLATFORM), fapi::RC_PROC_L2_FLUSH_UNKNOWN_PLATFORM_RC_PLATFORM}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_L3_FLUSH_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_L3_FLUSH_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_L3_FLUSH_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_PROC_L3_FLUSH_PURGE_REQ_OUTSTANDING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_L3_FLUSH_PURGE_REQ_OUTSTANDING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_L3_FLUSH_PURGE_REQ_OUTSTANDING_ADD_ERROR_INFO(RC) 

#define RC_PROC_L3_FLUSH_PURGE_REQ_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_L3_FLUSH_PURGE_REQ_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_L3_FLUSH_PURGE_REQ_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_PUT_SCOM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_PUT_SCOM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_PUT_SCOM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_GET_SCOM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_GET_SCOM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_GET_SCOM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_LENGTH_CHECK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_LENGTH_CHECK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_LENGTH_CHECK_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_CHANNEL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_CHANNEL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_CHANNEL_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_OP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_OP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_OP_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_PUT_DATA_LENGTH_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_PUT_DATA_LENGTH_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_PUT_DATA_LENGTH_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_ACCESS_GET_BUFFER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_GET_BUFFER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_ACCESS_GET_BUFFER_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCB_PUT_DATA_POLL_NOT_FULL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCB_PUT_DATA_POLL_NOT_FULL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCB_PUT_DATA_POLL_NOT_FULL_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_Q_LENGTH_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_Q_LENGTH_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_Q_LENGTH_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_ITP_TYPE_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_ITP_TYPE_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_ITP_TYPE_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_Q_OVER_UNDERFLOW_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_Q_OVER_UNDERFLOW_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_Q_OVER_UNDERFLOW_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_CHAN_NUM_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN_NUM_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN_NUM_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_CHAN_TYPE_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN_TYPE_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN_TYPE_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCBINIT_BAD_CHAN3_TYPE_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN3_TYPE_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCBINIT_BAD_CHAN3_TYPE_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_CONTROL_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_405RESET_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_BAD_405BOOT_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_CONTROL_TEST_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_TEST_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_TEST_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_CONTROL_PUTSCOM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_PUTSCOM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_CONTROL_PUTSCOM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_LOAD_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_LOAD_BAD_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_LOAD_BAD_CHANNEL_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_CHANNEL_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_CHANNEL_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_LOAD_BAD_BINARY_FILE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_BINARY_FILE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_BAD_BINARY_FILE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCC_LOAD_TEST_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_TEST_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCC_LOAD_TEST_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCCSRAM_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCCSRAM_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCCSRAM_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_OCCSRAM_TEST_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_OCCSRAM_TEST_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_OCCSRAM_TEST_ADD_ERROR_INFO(RC) 

#define RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERRORS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERRORS), fapi::RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_ERRORS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_OHA_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_OHA_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_OHA_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_OHA_CODE_BITOP_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_OHA_CODE_BITOP_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_OHA_CODE_BITOP_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_BAR_INDEX_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_BAR_INDEX_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_BAR_INDEX_OUT_OF_RANGE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_BAR_SCOPE_OUT_OF_RANGE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_ADDR_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_ADDR_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_ADDR_OUT_OF_RANGE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_ADDR_ALIGNMENT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_BAR_SIZE_INVALID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_BAR_SIZE_INVALID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_BAR_SIZE_INVALID_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_BAR_MODE_NOT_SUPPORTED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_BAR_MODE_NOT_SUPPORTED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_BAR_MODE_NOT_SUPPORTED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_BAR_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_BAR_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_BAR_PUTSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&START_ADDRESS, &END_ADDRESS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(START_ADDRESS), fapi::RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_START_ADDRESS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(END_ADDRESS), fapi::RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_END_ADDRESS}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_PBA_COHERENT_UTILS_FBC_INIT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_FBC_INIT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_FBC_INIT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_COHERENT_UTILS_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_FBC_STOPPED_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERRPT0_DATA, &ERRPT1_DATA, &ERRPT2_DATA, &FIR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERRPT0_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ERRPT0_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERRPT1_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ERRPT1_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERRPT2_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ERRPT2_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_FIR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&STATUS2_DATA, &STATUS3_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS2_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_STATUS2_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS3_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_STATUS3_DATA}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&STATUS0_DATA, &STATUS1_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS0_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_STATUS0_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS1_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_STATUS1_DATA}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&STATUS_DATA, &ERR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_STATUS_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_DATA), fapi::RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_ERR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_P8_PBA_INIT_INCORRECT_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_P8_PBA_INIT_INCORRECT_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_P8_PBA_INIT_INCORRECT_MODE_ADD_ERROR_INFO(RC) 

#define RC_P8_PBA_INIT_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_P8_PBA_INIT_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_P8_PBA_INIT_PUTSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBA_UTILS_BAD_PBA_REGION_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_UTILS_BAD_PBA_REGION_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_UTILS_BAD_PBA_REGION_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_DATA), fapi::RC_PROC_PBA_UTILS_BAD_PBA_REGION_ERR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_PBA_UTILS_PBA_SLAVE_RESET_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_UTILS_PBA_SLAVE_RESET_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_UTILS_PBA_SLAVE_RESET_FAIL_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_DATA), fapi::RC_PROC_PBA_UTILS_PBA_SLAVE_RESET_FAIL_ERR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_PBA_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBA_UTILS_INVALID_ARGS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBA_UTILS_INVALID_ARGS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ARGS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ARGS), fapi::RC_PROC_PBA_UTILS_INVALID_ARGS_ARGS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_PBAXCFG_INIT_GETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBAXCFG_INIT_GETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBAXCFG_INIT_GETSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBAXCFG_INIT_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBAXCFG_INIT_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBAXCFG_INIT_PUTSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBAXCFG_INIT_INCORRECTMODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBAXCFG_INIT_INCORRECTMODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBAXCFG_INIT_INCORRECTMODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBAXSNDTX_INIT_GETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBAXSNDTX_INIT_GETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBAXSNDTX_INIT_GETSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBAXSNDTX_INIT_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBAXSNDTX_INIT_PUTSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBAXSNDTX_INIT_PUTSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PBAXSNDTX_INIT_INCORRECTMODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PBAXSNDTX_INIT_INCORRECTMODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PBAXSNDTX_INIT_INCORRECTMODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&LOOPCOUNT, &PMSR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LOOPCOUNT), fapi::RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_LOOPCOUNT}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PMSR), fapi::RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PMSR}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_PCBS_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_CODE_BAD_MODE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MODE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODE), fapi::RC_PROC_PCBS_CODE_BAD_MODE_MODE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_PCBS_RESCLK_CODE_RESCLK_PROC_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_RESCLK_PROC_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_RESCLK_PROC_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_RESCLK_CODE_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_PUTGETSCOM_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_PUTGETSCOM_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_RESCLK_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_RESCLK_CODE_BITOP_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_BITOP_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_BITOP_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_RESCLK_CODE_DEACTIVATE_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_DEACTIVATE_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_CODE_DEACTIVATE_FAILED_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCBS_RESCLK_MANUAL_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_MANUAL_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCBS_RESCLK_MANUAL_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_TARGET_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_TARGET_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_TARGET_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_OCC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OCC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OCC_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_CPU_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_CPU_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_CPU_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_PMC_FORCE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PMC_FORCE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PMC_FORCE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_PCBS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PCBS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PCBS_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_PMC_INIT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PMC_INIT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PMC_INIT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_PORESW_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PORESW_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PORESW_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_POREGPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_POREGPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_POREGPE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_OHA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OHA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OHA_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_PBA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PBA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_PBA_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_OCC_SRAM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OCC_SRAM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OCC_SRAM_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PREP_CODE_PROC_OCB_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OCB_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PREP_CODE_PROC_OCB_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PMC_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMC_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMC_CODE_BAD_MODE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MODE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODE), fapi::RC_PROCPM_PMC_CODE_BAD_MODE_MODE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROCPM_PMCINIT_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCINIT_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCINIT_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PMCRESET_TARGET_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCRESET_TARGET_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCRESET_TARGET_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_FIR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_FIR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_FIR_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMCRESET_DCM_INSTALL_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_GPE0_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GPE0_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_GPE0_RESET_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_GPE1_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GPE1_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_GPE1_RESET_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_GPE_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GPE_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_GPE_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_GPE_BAD_ENGINE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_GPE_BAD_ENGINE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_GPE_BAD_ENGINE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PORESLW_CODE_BAD_TBA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PORESLW_CODE_BAD_TBA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PORESLW_CODE_BAD_TBA_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_SLW_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_SLW_RESET_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_SLW_RESET_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PORESLW_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PORESLW_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PORESLW_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_STATUS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_STATUS), fapi::RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_SBE_STATUS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_VITAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL), fapi::RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_SBE_VITAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_VITAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL), fapi::RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_SBE_VITAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROCPM_PSS_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSS_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSS_CODE_BAD_MODE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MODE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MODE), fapi::RC_PROCPM_PSS_CODE_BAD_MODE_MODE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROCPM_PSS_WRONG_DEVICE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PSS_WRONG_DEVICE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PSS_WRONG_DEVICE_ADD_ERROR_INFO(RC) 

#define RC_PROC_RAM_CORE_THD_DIS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_RAM_CORE_THD_DIS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_RAM_CORE_THD_DIS_ADD_ERROR_INFO(RC) 

#define RC_PROC_RAM_CORE_NOT_QUIESCED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_RAM_CORE_NOT_QUIESCED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_RAM_CORE_NOT_QUIESCED_ADD_ERROR_INFO(RC) 

#define RC_PROC_RAM_CORE_QUIESCE_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_RAM_CORE_QUIESCE_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_RAM_CORE_QUIESCE_FAIL_ADD_ERROR_INFO(RC) 

#define RC_PROC_RAM_CORE_RECOV_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_RAM_CORE_RECOV_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_RAM_CORE_RECOV_ADD_ERROR_INFO(RC) 

#define RC_PROC_RAM_CORE_RAM_EXCEPT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_RAM_CORE_RAM_EXCEPT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_RAM_CORE_RAM_EXCEPT_ADD_ERROR_INFO(RC) 

#define RC_PROC_RAM_CORE_RAM_NOT_DONE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_RAM_CORE_RAM_NOT_DONE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_RAM_CORE_RAM_NOT_DONE_ADD_ERROR_INFO(RC) 

#define RC_SBE_FABRICINIT_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_FABRICINIT_FBC_STOPPED_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_FABRICINIT_FBC_STOPPED_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ADU_PMISC_MODE_0x0202000B}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADU_PMISC_MODE_0x0202000B), fapi::RC_SBE_FABRICINIT_FBC_STOPPED_ERR_ADU_PMISC_MODE_0x0202000B}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_SBE_FABRICINIT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_FABRICINIT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_FABRICINIT_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ADU_STATUS_0x02020002}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADU_STATUS_0x02020002), fapi::RC_SBE_FABRICINIT_ERR_ADU_STATUS_0x02020002}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define PROC_SBE_PB_START_CLOCK_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define PROC_SBE_PB_START_CLOCK_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_NEST_CLOCK_CONTROLLER, RC); 
#define PROC_SBE_PB_START_CLOCK_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROC_PREP_SBE_RESET_FAILED_TO_FINISH_AUTO_SCAN0_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PREP_SBE_RESET_FAILED_TO_FINISH_AUTO_SCAN0_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PREP_SBE_RESET_FAILED_TO_FINISH_AUTO_SCAN0_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); {const void * l_objects[] = {&SBE_STATUS, &CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_STATUS), fapi::RC_PROC_PREP_SBE_RESET_FAILED_TO_FINISH_AUTO_SCAN0_SBE_STATUS}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 1, fapi::CalloutPriorities::HIGH, 0}, {fapi::ReturnCode::EI_TYPE_DECONF, 1, 0, 0}, {fapi::ReturnCode::EI_TYPE_GARD, 1, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_BRANCH_VALUE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_LOC_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_LOC_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_LOC_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_PBABAR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_PBABAR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_PBABAR_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PBA_SLVRST_TIMED_OUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PBA_SLVRST_TIMED_OUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PBA_SLVRST_TIMED_OUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_SIZE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_SIZE0_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_SIZE0_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_SIZE0_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_IMAGE_PLACEMENT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_PLACEMENT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_PLACEMENT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_POREBAR_IMAGE_ADDR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_ADDR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_POREBAR_IMAGE_ADDR_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_OVERLAP_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_OVERLAP_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_OVERLAP_ATTR_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_OVERLAP_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_OVERLAP_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_OVERLAP_ATTR_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_FSP_MMIO_MASK_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FSP_MMIO_MASK_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_FSP_MMIO_MASK_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_FSP_MMIO_MASK_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_AS_MMIO_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_AS_MMIO_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_AS_MMIO_BAR_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_AS_MMIO_BAR_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_AS_MMIO_BAR_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&UNIT, &RANGE, &BASE_ADDR, &SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UNIT), fapi::RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_UNIT}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANGE), fapi::RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_RANGE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(BASE_ADDR), fapi::RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_ADD_INTERNAL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_FIND_INTERNAL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&NODE_ID, &CHIP_ID}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_ID), fapi::RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_NODE_ID}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_ID), fapi::RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_CHIP_ID}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&NODE_BASE_ADDR, &NODE_SIZE, &CHIP_BASE_ADDR, &CHIP_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_NODE_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_SIZE), fapi::RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_NODE_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_CHIP_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_SIZE), fapi::RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_CHIP_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&NODE_BASE_ADDR, &NODE_SIZE, &CHIP_BASE_ADDR, &CHIP_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_NODE_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_SIZE), fapi::RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_NODE_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_BASE_ADDR), fapi::RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_CHIP_BASE_ADDR}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_SIZE), fapi::RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_CHIP_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_INVALID_BAR_REG_DEF_ADD_ERROR_INFO(RC) 

#define RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE_MAX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP), fapi::RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_INP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX), fapi::RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_MAX}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SLWB_IMG_PTR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_IMG_PTR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_IMG_PTR_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_BUF1_PTR, &DATA_BUF2_PTR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF1_PTR), fapi::RC_PROC_SLWB_IMG_PTR_ERROR_DATA_BUF1_PTR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF2_PTR), fapi::RC_PROC_SLWB_IMG_PTR_ERROR_DATA_BUF2_PTR}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SLWB_BUF_PTR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_BUF_PTR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_BUF_PTR_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_BUF1_PTR, &DATA_BUF2_PTR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF1_PTR), fapi::RC_PROC_SLWB_BUF_PTR_ERROR_DATA_BUF1_PTR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF2_PTR), fapi::RC_PROC_SLWB_BUF_PTR_ERROR_DATA_BUF2_PTR}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_BUF1_SIZE, &DATA_BUF2_SIZE, &DATA_BUF_SIZE_FIXED}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF1_SIZE), fapi::RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_DATA_BUF1_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF2_SIZE), fapi::RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_DATA_BUF2_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF_SIZE_FIXED), fapi::RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_DATA_BUF_SIZE_FIXED}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_MAX, &DATA_IMG_SIZE_FIXED}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX), fapi::RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_DATA_IMG_SIZE_MAX}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_FIXED), fapi::RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_DATA_IMG_SIZE_FIXED}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP), fapi::RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE), fapi::RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP), fapi::RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE), fapi::RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_RING_BLOCK_SIZEOFTHIS, &DATA_SIZE_OF_BUF1}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_SIZEOFTHIS), fapi::RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_DATA_RING_BLOCK_SIZEOFTHIS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_OF_BUF1), fapi::RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_DATA_SIZE_OF_BUF1}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_RING_BLOCK_ENTRYOFFSET, &DATA_RING_BLOCK_SIZEOFTHIS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_ENTRYOFFSET), fapi::RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_ENTRYOFFSET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_SIZEOFTHIS), fapi::RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_SIZEOFTHIS}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SLWB_IMGBUILD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_IMGBUILD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_IMGBUILD_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_IMGBUILD_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_OLD, &DATA_IMG_SIZE_EST, &DATA_IMG_SIZE_MAX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_OLD), fapi::RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_OLD}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_EST), fapi::RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_EST}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX), fapi::RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_MAX}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_SLWB_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_INTERNAL_IMAGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_INTERNAL_IMAGE_ERR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_RING_RETRIEVAL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_RING_RETRIEVAL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_RING_RETRIEVAL_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_RING_RETRIEVAL_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_FAIL_BYTE_NO, &DATA_EXISTING_RING_BYTE, &DATA_OVERLAY_RING_BYTE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_FAIL_BYTE_NO), fapi::RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_DATA_FAIL_BYTE_NO}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_EXISTING_RING_BYTE), fapi::RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_DATA_EXISTING_RING_BYTE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_OVERLAY_RING_BYTE), fapi::RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_DATA_OVERLAY_RING_BYTE}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_SLWB_WF_CREATION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_WF_CREATION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_WF_CREATION_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_WF_CREATION_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_IMAGE_UPDATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_UPDATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_IMAGE_UPDATE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_IMAGE_UPDATE_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_CREATE_FIXED_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_CREATE_FIXED_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_CREATE_FIXED_IMAGE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_CREATE_FIXED_IMAGE_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_UNKNOWN_XIP_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_UNKNOWN_XIP_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_UNKNOWN_XIP_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_UNKNOWN_XIP_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_UNKNOWN_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_UNKNOWN_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_SLWB_BAD_CODE_OR_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_BAD_CODE_OR_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_BAD_CODE_OR_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROC_SLWB_MEMORY_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SLWB_MEMORY_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SLWB_MEMORY_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_SLWB_MEMORY_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&STATUS_REG, &EXPECTED_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_REG), fapi::RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_STATUS_REG}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_REG), fapi::RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_EXPECTED_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&STATUS_REG, &EXPECTED_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_REG), fapi::RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_STATUS_REG}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_REG), fapi::RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_EXPECTED_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); {const void * l_objects[] = {&STATUS_REG, &EXPECTED_REG, &CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_REG), fapi::RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_STATUS_REG}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_REG), fapi::RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_EXPECTED_REG}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 2, fapi::CalloutPriorities::HIGH, 0}, {fapi::ReturnCode::EI_TYPE_DECONF, 2, 0, 0}, {fapi::ReturnCode::EI_TYPE_GARD, 2, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FIR_REG, &FIR_EXP_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG), fapi::RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_FIR_REG}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_EXP_REG), fapi::RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_FIR_EXP_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FIR_REG, &FIR_EXP_REG}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG), fapi::RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_FIR_REG}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_EXP_REG), fapi::RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_FIR_EXP_REG}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); {const void * l_objects[] = {&FIR_REG, &FIR_EXP_REG, &CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_REG), fapi::RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_FIR_REG}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIR_EXP_REG), fapi::RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_FIR_EXP_REG}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 2, fapi::CalloutPriorities::HIGH, 0}, {fapi::ReturnCode::EI_TYPE_DECONF, 2, 0, 0}, {fapi::ReturnCode::EI_TYPE_GARD, 2, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_PROC_START_CLOCKS_CHIPLETS_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCKS_CHIPLETS_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCKS_CHIPLETS_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIPLET_BASE_SCOM_ADDR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_BASE_SCOM_ADDR), fapi::RC_PROC_START_CLOCKS_CHIPLETS_PARTIAL_GOOD_ERR_CHIPLET_BASE_SCOM_ADDR}, {fapi::ReturnCode::EI_TYPE_PROCEDURE_CALLOUT, 0, fapi::CalloutPriorities::HIGH, fapi::ProcedureCallouts::CODE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_START_SBE_FAILED_TO_FINISH_AUTO_POR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_SBE_FAILED_TO_FINISH_AUTO_POR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_CFAM_REGISTERS, RC); 
#define RC_PROC_START_SBE_FAILED_TO_FINISH_AUTO_POR_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); {const void * l_objects[] = {&SBE_STATUS, &CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_STATUS), fapi::RC_PROC_START_SBE_FAILED_TO_FINISH_AUTO_POR_SBE_STATUS}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 1, fapi::CalloutPriorities::HIGH, 0}, {fapi::ReturnCode::EI_TYPE_DECONF, 1, 0, 0}, {fapi::ReturnCode::EI_TYPE_GARD, 1, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROC_START_SBE_FAILED_TO_AUTO_START_SBE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_SBE_FAILED_TO_AUTO_START_SBE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_CFAM_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_FIRST_OTPROM_INSTRUCTIONS, RC); 
#define RC_PROC_START_SBE_FAILED_TO_AUTO_START_SBE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); fapi::fapiCheckType<const fapi::Target *>(&CHIP_IN_ERROR); {const void * l_objects[] = {&SBE_VITAL, &CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL), fapi::RC_PROC_START_SBE_FAILED_TO_AUTO_START_SBE_SBE_VITAL}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 1, fapi::CalloutPriorities::HIGH, 0}, {fapi::ReturnCode::EI_TYPE_DECONF, 1, 0, 0}, {fapi::ReturnCode::EI_TYPE_GARD, 1, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROC_STOP_DEADMAN_TIMER_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_STOP_DEADMAN_TIMER_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_STOP_DEADMAN_TIMER_BAD_ISTEP_NUM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_VITAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL), fapi::RC_PROC_STOP_DEADMAN_TIMER_BAD_ISTEP_NUM_SBE_VITAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_STOP_DEADMAN_TIMER_BAD_SUBSTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_STOP_DEADMAN_TIMER_BAD_SUBSTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_STOP_DEADMAN_TIMER_BAD_SUBSTEP_NUM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_VITAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL), fapi::RC_PROC_STOP_DEADMAN_TIMER_BAD_SUBSTEP_NUM_SBE_VITAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_THREAD_CONTROL_INV_COMMAND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_INV_COMMAND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_INV_COMMAND_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_SRESET_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_SRESET_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_SRESET_FAIL_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_START_PRE_NOMAINT_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_START_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_START_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_START_FAIL_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_STOP_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STOP_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STOP_FAIL_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STEP_PRE_NOMAINT_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_STEP_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STEP_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_STEP_FAIL_ADD_ERROR_INFO(RC) 

#define RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_THREAD_CONTROL_ACTIVATE_FAIL_ADD_ERROR_INFO(RC) 

#define RC_SBE_SUCCESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SUCCESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_SUCCESS_ADD_ERROR_INFO(RC) 

#define RC_SBE_SUCCESS_SLAVE_CHIP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SUCCESS_SLAVE_CHIP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_SUCCESS_SLAVE_CHIP_ADD_ERROR_INFO(RC) 

#define RC_SBE_PAUSE_WITH_SUCCESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PAUSE_WITH_SUCCESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_PAUSE_WITH_SUCCESS_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_ENTRY_HALT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PROC_ENTRY_HALT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_PROC_ENTRY_HALT_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_EXIT_HALT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PROC_EXIT_HALT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_PROC_EXIT_HALT_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_CHECKSTOP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PROC_CHECKSTOP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_PROC_CHECKSTOP_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_RECOVERABLE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PROC_RECOVERABLE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_PROC_RECOVERABLE_ADD_ERROR_INFO(RC) 

#define RC_SBE_PROC_SPATTN_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PROC_SPATTN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_PROC_SPATTN_ADD_ERROR_INFO(RC) 

#define RC_SBE_PORE_ERROR0_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR0_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_PORE_ERROR0_ADD_ERROR_INFO(RC) 

#define RC_SBE_PORE_ERROR1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_PORE_ERROR1_ADD_ERROR_INFO(RC) 

#define RC_SBE_PORE_ERROR2_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR2_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_PORE_ERROR2_ADD_ERROR_INFO(RC) 

#define RC_SBE_PORE_ERROR3_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR3_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_PORE_ERROR3_ADD_ERROR_INFO(RC) 

#define RC_SBE_PORE_ERROR4_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PORE_ERROR4_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_PORE_ERROR4_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN0_DONE_POLL_THRESHOLD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN0_DONE_POLL_THRESHOLD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_SCAN0_DONE_POLL_THRESHOLD_ADD_ERROR_INFO(RC) 

#define RC_SBE_ARRAYINIT_POLL_THRESHOLD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_ARRAYINIT_POLL_THRESHOLD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_ARRAYINIT_POLL_THRESHOLD_ADD_ERROR_INFO(RC) 

#define RC_PROC_MANUAL_SBE_START_FAILED_TO_START_SBE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_MANUAL_SBE_START_FAILED_TO_START_SBE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_CFAM_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_FIRST_OTPROM_INSTRUCTIONS, RC); 
#define RC_PROC_MANUAL_SBE_START_FAILED_TO_START_SBE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_VITAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_VITAL), fapi::RC_PROC_MANUAL_SBE_START_FAILED_TO_START_SBE_SBE_VITAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_MANUAL_SBE_START_SECURITY_BLOCKS_START_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_MANUAL_SBE_START_SECURITY_BLOCKS_START_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_CFAM_REGISTERS, RC); 
#define RC_PROC_MANUAL_SBE_START_SECURITY_BLOCKS_START_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SECURITY_SETUP}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SECURITY_SETUP), fapi::RC_PROC_MANUAL_SBE_START_SECURITY_BLOCKS_START_SECURITY_SETUP}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_GETPUTREG_REGTYPE_INVALID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETPUTREG_REGTYPE_INVALID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETPUTREG_REGTYPE_INVALID_ADD_ERROR_INFO(RC) 

#define RC_PROC_GETPUTREG_REGNUM_INVALID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETPUTREG_REGNUM_INVALID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETPUTREG_REGNUM_INVALID_ADD_ERROR_INFO(RC) 

#define RC_PROC_GETPUTREG_SPR_UNSUPPORTED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETPUTREG_SPR_UNSUPPORTED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETPUTREG_SPR_UNSUPPORTED_ADD_ERROR_INFO(RC) 

#define RC_SBE_PIBMEM_PRE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_PRE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_PIBMEM_PRE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_PIBMEM_POST_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_POST_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_PIBMEM_POST_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_PIBMEM_IMAGE_SIZE_ALIGNMENT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_IMAGE_SIZE_ALIGNMENT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_PIBMEM_IMAGE_SIZE_ALIGNMENT_ADD_ERROR_INFO(RC) 

#define RC_SBE_PIBMEM_LOAD_ADDRESS_ALIGNMENT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_LOAD_ADDRESS_ALIGNMENT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_PIBMEM_LOAD_ADDRESS_ALIGNMENT_ADD_ERROR_INFO(RC) 

#define RC_SBE_PIBMEM_OVERFLOW_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_PIBMEM_OVERFLOW_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_PIBMEM_OVERFLOW_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN_MULTICAST_TYPE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_MULTICAST_TYPE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_SCAN_MULTICAST_TYPE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN_MAGIC_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_MAGIC_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_SCAN_MAGIC_MISMATCH_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN_HEADER_VERSION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_HEADER_VERSION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_SCAN_HEADER_VERSION_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN_DATA_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_DATA_SIZE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_SCAN_DATA_SIZE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN_RING_LENGTH_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_RING_LENGTH_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_SCAN_RING_LENGTH_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_SCAN_CHECKWORD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_SCAN_CHECKWORD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_SBE_SCAN_CHECKWORD_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&LOCK_STATUS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LOCK_STATUS), fapi::RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_LOCK_STATUS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&LOCK_STATUS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LOCK_STATUS), fapi::RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_LOCK_STATUS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&LOCK_STATUS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(LOCK_STATUS), fapi::RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_LOCK_STATUS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ABUS_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_PROC_ABUS_SCOMINIT_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_ABUS_SCOMINIT_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_ABUS_SCOMINIT_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CHIPLET_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_PROC_DMI_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_DMI_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_DMI_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XBUS_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_PROC_XBUS_SCOMINIT_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XBUS_SCOMINIT_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XBUS_SCOMINIT_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_NODE_ADD_INTERNAL_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&NODE_ID, &CHIP_ID}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NODE_ID), fapi::RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_NODE_ID}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_ID), fapi::RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_CHIP_ID}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&OP}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OP), fapi::RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_OP}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&OP, &MASTER_CHIP_SYS_CURR, &MASTER_CHIP_NODE_CURR, &FIRST_CHIP_IN_SYS, &FIRST_CHIP_IN_NODE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OP), fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_OP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_SYS_CURR), fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_SYS_CURR}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MASTER_CHIP_NODE_CURR), fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_NODE_CURR}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIRST_CHIP_IN_SYS), fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_FIRST_CHIP_IN_SYS}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIRST_CHIP_IN_NODE), fapi::RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_FIRST_CHIP_IN_NODE}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&VALUE, &MAX_HW_VALUE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(VALUE), fapi::RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_VALUE}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAX_HW_VALUE), fapi::RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_MAX_HW_VALUE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_EPSILON_INVALID_TABLE_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_PACING_RATE_TABLE_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FREQ_PB, &FREQ_CORE_FLOOR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_PB), fapi::RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_FREQ_PB}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FREQ_CORE_FLOOR), fapi::RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_FREQ_CORE_FLOOR}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CORE_FLOOR_RATIO}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CORE_FLOOR_RATIO), fapi::RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_CORE_FLOOR_RATIO}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SIZE), fapi::RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_INVALID_AGGREGATE_CONFIG_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ADDRESS0, &ADDRESS1, &DATA0, &DATA1}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS0), fapi::RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADDRESS0}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS1), fapi::RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADDRESS1}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA0), fapi::RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_DATA0}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA1), fapi::RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_DATA1}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CMD_RATE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_RATE), fapi::RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_CMD_RATE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CMD_RATE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_RATE), fapi::RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_CMD_RATE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CMD_RATE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_RATE), fapi::RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_CMD_RATE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&NUM_POLLS, &STATUS_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(NUM_POLLS), fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_NUM_POLLS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STATUS_DATA), fapi::RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_STATUS_DATA}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_BUILD_SMP_X_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_X_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_X_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_BUILD_SMP_A_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_A_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_A_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_BUILD_SMP_PCIE_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_UNEXPECTED_CLOCKSTOP_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_UNEXPECTED_CLOCKSTOP_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_UNEXPECTED_CLOCKSTOP_STATUS_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_O2S_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_O2S_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_O2S_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_VOLTAGE_BAD_READ_REQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_VOLTAGE_BAD_READ_REQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_VOLTAGE_BAD_READ_REQ_ADD_ERROR_INFO(RC) 

#define P8_PM_BAD_VDD_VOLTAGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define P8_PM_BAD_VDD_VOLTAGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define P8_PM_BAD_VDD_VOLTAGE_ADD_ERROR_INFO(RC) 

#define P8_PM_BAD_VCS_VOLTAGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define P8_PM_BAD_VCS_VOLTAGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define P8_PM_BAD_VCS_VOLTAGE_ADD_ERROR_INFO(RC) 

#define RC_PROC_MONITOR_SBE_HALT_IS_NOT_F_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_MONITOR_SBE_HALT_IS_NOT_F_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_MONITOR_SBE_HALT_IS_NOT_F_ADD_ERROR_INFO(RC) 

#define RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_MAX, &DATA_IMG_SIZE_WORK_SPACE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX), fapi::RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_DATA_IMG_SIZE_MAX}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_WORK_SPACE), fapi::RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_DATA_IMG_SIZE_WORK_SPACE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_IMAGE_SIZE_MESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_SIZE_MESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_SIZE_MESS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE, &DATA_IMG_SIZE_MAX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE), fapi::RC_PROC_XIPC_IMAGE_SIZE_MESS_DATA_IMG_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX), fapi::RC_PROC_XIPC_IMAGE_SIZE_MESS_DATA_IMG_SIZE_MAX}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_INTERNAL_IMAGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_INTERNAL_IMAGE_ERR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP), fapi::RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE), fapi::RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP), fapi::RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE), fapi::RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_BUF_PTR_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_BUF_PTR_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_BUF_PTR_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_BUF1_PTR, &DATA_BUF2_PTR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF1_PTR), fapi::RC_PROC_XIPC_BUF_PTR_ERROR_DATA_BUF1_PTR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF2_PTR), fapi::RC_PROC_XIPC_BUF_PTR_ERROR_DATA_BUF2_PTR}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_BUF1_SIZE, &DATA_BUF2_SIZE, &DATA_BUF_SIZE_FIXED}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF1_SIZE), fapi::RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_DATA_BUF1_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF2_SIZE), fapi::RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_DATA_BUF2_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_BUF_SIZE_FIXED), fapi::RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_DATA_BUF_SIZE_FIXED}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_XIPC_IMAGE_UPDATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_UPDATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_IMAGE_UPDATE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_IMAGE_UPDATE_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_UNEXPECTED_FIELD_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_UNEXPECTED_FIELD_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_UNEXPECTED_FIELD_SIZE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_SIZE_VPD_FIELD}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_VPD_FIELD), fapi::RC_PROC_XIPC_UNEXPECTED_FIELD_SIZE_DATA_SIZE_VPD_FIELD}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_GEN_SCOM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_GEN_SCOM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_GEN_SCOM_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_GEN_SCOM_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_GEN_RAM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_GEN_RAM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_GEN_RAM_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_GEN_RAM_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_ATTRIBUTE_RING_SIZE, &DATA_MAX_PLL_RING_SIZE, &DATA_SIZE_OF_BUF1}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_ATTRIBUTE_RING_SIZE), fapi::RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_ATTRIBUTE_RING_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_MAX_PLL_RING_SIZE), fapi::RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_MAX_PLL_RING_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_OF_BUF1), fapi::RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_SIZE_OF_BUF1}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_XIPC_IMGBUILD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_IMGBUILD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_IMGBUILD_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_IMGBUILD_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_XIP_FIND_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_XIP_FIND_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_XIP_FIND_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_XIP_FIND_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_RS4_COMPRESS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_RS4_COMPRESS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_RS4_COMPRESS_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_RS4_COMPRESS_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_SIZE_RS4_COMPRESS_RETURN, &DATA_SIZE_RS4_COMPRESS_CONTAINER}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_RS4_COMPRESS_RETURN), fapi::RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_DATA_SIZE_RS4_COMPRESS_RETURN}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_RS4_COMPRESS_CONTAINER), fapi::RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_DATA_SIZE_RS4_COMPRESS_CONTAINER}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_ILLEGAL_RS4_DECOMPRESS_ADDR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_ILLEGAL_RS4_DECOMPRESS_ADDR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_ILLEGAL_RS4_DECOMPRESS_ADDR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_RS4_DECOMPRESS_ADDR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RS4_DECOMPRESS_ADDR), fapi::RC_PROC_XIPC_ILLEGAL_RS4_DECOMPRESS_ADDR_DATA_RS4_DECOMPRESS_ADDR}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_PORE_INLINE_CTX_CREATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PORE_INLINE_CTX_CREATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PORE_INLINE_CTX_CREATE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_PORE_INLINE_CTX_CREATE_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_PORE_INLINE_RS4_LAUNCH_CREATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PORE_INLINE_RS4_LAUNCH_CREATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PORE_INLINE_RS4_LAUNCH_CREATE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_PORE_INLINE_RS4_LAUNCH_CREATE_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_RING_BLOCK_SIZEOFTHIS, &DATA_SIZE_OF_BUF1}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_SIZEOFTHIS), fapi::RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_RING_BLOCK_SIZEOFTHIS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_OF_BUF1), fapi::RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_SIZE_OF_BUF1}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_SIZE_OF_RS4_LAUNCH, &DATA_RING_BLOCK_ENTRYOFFSET, &DATA_RING_BLOCK_SIZEOFTHIS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_OF_RS4_LAUNCH), fapi::RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_SIZE_OF_RS4_LAUNCH}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_ENTRYOFFSET), fapi::RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_ENTRYOFFSET}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_SIZEOFTHIS), fapi::RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_SIZEOFTHIS}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_XIPC_CHIPLET_ID_MESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_CHIPLET_ID_MESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_CHIPLET_ID_MESS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_CHIPLET_ID_VPD, &DATA_CHIPLET_ID_REQ}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_CHIPLET_ID_VPD), fapi::RC_PROC_XIPC_CHIPLET_ID_MESS_DATA_CHIPLET_ID_VPD}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_CHIPLET_ID_REQ), fapi::RC_PROC_XIPC_CHIPLET_ID_MESS_DATA_CHIPLET_ID_REQ}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_PG_RING_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PG_RING_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PG_RING_TOO_LARGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_RING_SIZE_REQ, &DATA_RING_SIZE_MAX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_SIZE_REQ), fapi::RC_PROC_XIPC_PG_RING_TOO_LARGE_DATA_RING_SIZE_REQ}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_SIZE_MAX), fapi::RC_PROC_XIPC_PG_RING_TOO_LARGE_DATA_RING_SIZE_MAX}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_PR_RING_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PR_RING_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PR_RING_TOO_LARGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_RING_SIZE_REQ, &DATA_RING_SIZE_MAX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_SIZE_REQ), fapi::RC_PROC_XIPC_PR_RING_TOO_LARGE_DATA_RING_SIZE_REQ}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_SIZE_MAX), fapi::RC_PROC_XIPC_PR_RING_TOO_LARGE_DATA_RING_SIZE_MAX}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_INVALID_VPD_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_INVALID_VPD_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_INVALID_VPD_TYPE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_VPD_TYPE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_VPD_TYPE), fapi::RC_PROC_XIPC_INVALID_VPD_TYPE_DATA_VPD_TYPE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_VPD_KEYWORD_RESOLVE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_VPD_KEYWORD_RESOLVE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_VPD_KEYWORD_RESOLVE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_RING_LIST_VPD_KEYWORD}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_LIST_VPD_KEYWORD), fapi::RC_PROC_XIPC_VPD_KEYWORD_RESOLVE_ERROR_DATA_RING_LIST_VPD_KEYWORD}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_PERFORM_RING_DATACARE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_PERFORM_RING_DATACARE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_PERFORM_RING_DATACARE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_PERFORM_RING_DATACARE_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_CHECK_REDUNDANT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_CHECK_REDUNDANT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_CHECK_REDUNDANT_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_CHECK_REDUNDANT_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL, &CHIPLET_ID, &RING_ID, &RING_SIZE, &IMAGE_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_RC_LOCAL}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_ID), fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_CHIPLET_ID}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RING_ID), fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_RING_ID}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RING_SIZE), fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_RING_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IMAGE_SIZE), fapi::RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_IMAGE_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_PROC_XIPC_WRITE_VPD_RING_TO_IPL_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_WRITE_VPD_RING_TO_IPL_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_WRITE_VPD_RING_TO_IPL_IMAGE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_WRITE_VPD_RING_TO_IPL_IMAGE_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_WRITE_VPD_RING_TO_SLW_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_WRITE_VPD_RING_TO_SLW_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_WRITE_VPD_RING_TO_SLW_IMAGE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_WRITE_VPD_RING_TO_SLW_IMAGE_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_XIP_DELETE_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_XIP_DELETE_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_XIP_DELETE_SECTION_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_XIP_DELETE_SECTION_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_CREATE_FIXED_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_CREATE_FIXED_IMAGE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_CREATE_FIXED_IMAGE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_CREATE_FIXED_IMAGE_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_NEW, &DATA_IMG_SIZE_MAX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_NEW), fapi::RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_NEW}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_MAX), fapi::RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_MAX}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_XIPC_APPEND_SLW_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_APPEND_SLW_SECTION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_APPEND_SLW_SECTION_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_APPEND_SLW_SECTION_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_XIPC_BAD_CODE_OR_PARM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_BAD_CODE_OR_PARM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_BAD_CODE_OR_PARM_ADD_ERROR_INFO(RC) 

#define RC_PROC_XIPC_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_XIPC_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_XIPC_UNKNOWN_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_PROC_XIPC_UNKNOWN_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_REPAIR_RING_INVALID_RINGBUF_PTR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_RINGBUF_PTR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_RINGBUF_PTR_ADD_ERROR_INFO(RC) 

#define RC_REPAIR_RING_ALLOC_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_ALLOC_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_ALLOC_FAIL_ADD_ERROR_INFO(RC) 

#define RC_REPAIR_RING_INVALID_MAGIC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_MAGIC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_MAGIC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MAGIC}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MAGIC), fapi::RC_REPAIR_RING_INVALID_MAGIC_MAGIC}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_REPAIR_RING_INVALID_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_INVALID_SIZE_ADD_ERROR_INFO(RC) 

#define RC_REPAIR_RING_NOT_FOUND_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_REPAIR_RING_NOT_FOUND_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_REPAIR_RING_NOT_FOUND_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RING_MODIFIER, &CHIPLET_ID}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RING_MODIFIER), fapi::RC_REPAIR_RING_NOT_FOUND_RING_MODIFIER}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIPLET_ID), fapi::RC_REPAIR_RING_NOT_FOUND_CHIPLET_ID}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_MVPD_RING_FUNC_INVALID_PARAMETER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MVPD_RING_FUNC_INVALID_PARAMETER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MVPD_RING_FUNC_INVALID_PARAMETER_ADD_ERROR_INFO(RC) 

#define RC_MVPD_RING_FUNC_INSUFFICIENT_RECORD_SPACE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MVPD_RING_FUNC_INSUFFICIENT_RECORD_SPACE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MVPD_RING_FUNC_INSUFFICIENT_RECORD_SPACE_ADD_ERROR_INFO(RC) 

#define RC_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FIELD_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FIELD_SIZE), fapi::RC_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE_FIELD_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_MBVPD_INVALID_ATTRIBUTE_ID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_INVALID_ATTRIBUTE_ID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_INVALID_ATTRIBUTE_ID_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_ID}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_ID), fapi::RC_MBVPD_INVALID_ATTRIBUTE_ID_ATTR_ID}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&EXPECTED_SIZE, &PASSED_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EXPECTED_SIZE), fapi::RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_EXPECTED_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PASSED_SIZE), fapi::RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_PASSED_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_MBVPD_INSUFFICIENT_VPD_RETURNED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MBVPD_INSUFFICIENT_VPD_RETURNED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MBVPD_INSUFFICIENT_VPD_RETURNED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&KEYWORD, &RETURNED_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(KEYWORD), fapi::RC_MBVPD_INSUFFICIENT_VPD_RETURNED_KEYWORD}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RETURNED_SIZE), fapi::RC_MBVPD_INSUFFICIENT_VPD_RETURNED_RETURNED_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_POREVE_NO_PIB_MODEL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_NO_PIB_MODEL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_NO_PIB_MODEL_ADD_ERROR_INFO(RC) 

#define RC_POREVE_NO_OCI_MODEL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_NO_OCI_MODEL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_NO_OCI_MODEL_ADD_ERROR_INFO(RC) 

#define RC_POREVE_PORE_OPERATION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_PORE_OPERATION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_PORE_OPERATION_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_PORE_NOT_MAPPED_ON_BUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_PORE_NOT_MAPPED_ON_BUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_PORE_NOT_MAPPED_ON_BUS_ADD_ERROR_INFO(RC) 

#define RC_POREVE_BUS_SLAVE_PERMISSION_DENIED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_BUS_SLAVE_PERMISSION_DENIED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_BUS_SLAVE_PERMISSION_DENIED_ADD_ERROR_INFO(RC) 

#define RC_POREVE_HOOKMANAGER_INCONSISTENCY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_HOOKMANAGER_INCONSISTENCY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_HOOKMANAGER_INCONSISTENCY_ADD_ERROR_INFO(RC) 

#define RC_POREVE_PIB2CFAM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_PIB2CFAM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_PIB2CFAM_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_FASTI2C_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_FASTI2C_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_FASTI2C_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_LPC_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_LPC_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_LPC_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_PIBMEM_CONTROL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_PIBMEM_CONTROL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_PIBMEM_CONTROL_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_PIB_MEMORY_ACCESS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_PIB_MEMORY_ACCESS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_PIB_MEMORY_ACCESS_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_OCI_MEMORY_ACCESS_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_OCI_MEMORY_ACCESS_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_OCI_MEMORY_ACCESS_ERROR_ADD_ERROR_INFO(RC) 

#define RC_POREVE_OCI_SLAVE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_POREVE_OCI_SLAVE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_POREVE_OCI_SLAVE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCIE_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCIE_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCIE_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&IOP_DATA, &ATTR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(IOP_DATA), fapi::RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_IOP_DATA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTR_DATA), fapi::RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_ATTR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_PCIE_CONFIG_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_PCIE_CONFIG_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_PCIE_CONFIG_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_PROC_START_CLOCK_TEST_VDD_OFF_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_START_CLOCK_TEST_VDD_OFF_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_START_CLOCK_TEST_VDD_OFF_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SELECT_BOOT_MASTER_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SELECT_BOOT_MASTER_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SELECT_BOOT_MASTER_ATTR_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SELECT_SEEPROM_IMAGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SELECT_SEEPROM_IMAGE_ATTR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SELECT_SEEPROM_IMAGE_ATTR_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_STOPPED_AT_BREAKPOINT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_STOPPED_AT_BREAKPOINT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_STOPPED_AT_BREAKPOINT_ADD_ERROR_INFO(RC) 

#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_STILL_RUNNING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_STILL_RUNNING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_STILL_RUNNING_ADD_ERROR_INFO(RC) 

#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ISTEP_NUM, &SUBSTEP_NUM}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ISTEP_NUM), fapi::RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_ISTEP_NUM}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SUBSTEP_NUM), fapi::RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_SUBSTEP_NUM}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_SUBSTEP_NUM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_SUBSTEP_NUM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_SUBSTEP_NUM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ISTEP_NUM, &SUBSTEP_NUM}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ISTEP_NUM), fapi::RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_SUBSTEP_NUM_ISTEP_NUM}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SUBSTEP_NUM), fapi::RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_SUBSTEP_NUM_SUBSTEP_NUM}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_EXTRACT_SBE_RC_IMAGE_POINTER_NULL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_IMAGE_POINTER_NULL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_IMAGE_POINTER_NULL_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ADDRESS, &CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS), fapi::RC_PROC_EXTRACT_SBE_RC_IMAGE_POINTER_NULL_ADDRESS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_IN_ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_IMAGE_POINTER_NULL_CHIP_IN_ERROR}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_EXTRACT_SBE_RC_BAD_CHIP_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_BAD_CHIP_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_BAD_CHIP_TYPE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_IN_ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_BAD_CHIP_TYPE_CHIP_IN_ERROR}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_EXTRACT_SBE_RC_SEEPROM_MAGIC_NUMBER_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_SEEPROM_MAGIC_NUMBER_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_SEEPROM_MAGIC_NUMBER_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_IN_ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_SEEPROM_MAGIC_NUMBER_MISMATCH_CHIP_IN_ERROR}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_EXTRACT_SBE_RC_BRANCH_TO_SEEPROM_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_BRANCH_TO_SEEPROM_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_BRANCH_TO_SEEPROM_FAIL_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_IN_ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_BRANCH_TO_SEEPROM_FAIL_CHIP_IN_ERROR}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_EXTRACT_SBE_RC_UNEXPECTED_OTPROM_HALT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_UNEXPECTED_OTPROM_HALT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_UNEXPECTED_OTPROM_HALT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_IN_ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_UNEXPECTED_OTPROM_HALT_CHIP_IN_ERROR}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ADDRESS, &ERROR, &CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS), fapi::RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_ADDRESS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_ERROR}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_IN_ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_CHIP_IN_ERROR}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_EXTRACT_SBE_RC_MODEL_ERROR_GETTING_SCOM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_MODEL_ERROR_GETTING_SCOM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_MODEL_ERROR_GETTING_SCOM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ADDRESS, &ERROR, &CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS), fapi::RC_PROC_EXTRACT_SBE_RC_MODEL_ERROR_GETTING_SCOM_ADDRESS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_MODEL_ERROR_GETTING_SCOM_ERROR}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_IN_ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_MODEL_ERROR_GETTING_SCOM_CHIP_IN_ERROR}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_SETTING_SEEPROM_ADDR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_SETTING_SEEPROM_ADDR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_SETTING_SEEPROM_ADDR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ADDRESS, &ERROR, &CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS), fapi::RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_SETTING_SEEPROM_ADDR_ADDRESS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_SETTING_SEEPROM_ADDR_ERROR}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_IN_ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_SETTING_SEEPROM_ADDR_CHIP_IN_ERROR}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_READING_SEEPROM_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_READING_SEEPROM_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_READING_SEEPROM_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ADDRESS, &ERROR, &CHIP_IN_ERROR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS), fapi::RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_READING_SEEPROM_ADDRESS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_READING_SEEPROM_ERROR}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_IN_ERROR), fapi::RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_READING_SEEPROM_CHIP_IN_ERROR}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROC_EXTRACT_SBE_RC_UNKNOWN_ENGINE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_UNKNOWN_ENGINE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_UNKNOWN_ENGINE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ENGINE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ENGINE), fapi::RC_PROC_EXTRACT_SBE_RC_UNKNOWN_ENGINE_ENGINE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_SBE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_SBE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_SBE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_ADDRESS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_ADDRESS), fapi::RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_SBE_SBE_ADDRESS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_SLW_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_SLW_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_SLW_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_ADDRESS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_ADDRESS), fapi::RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_SLW_SBE_ADDRESS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_SBE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_SBE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_SBE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_ADDRESS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_ADDRESS), fapi::RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_SBE_SBE_ADDRESS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_SLW_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_SLW_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_SLW_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_ADDRESS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_ADDRESS), fapi::RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_SLW_SBE_ADDRESS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_EXTRACT_SBE_RC_FROM_ADDR_CODE_BUG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_FROM_ADDR_CODE_BUG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_FROM_ADDR_CODE_BUG_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&SBE_ADDRESS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SBE_ADDRESS), fapi::RC_PROC_EXTRACT_SBE_RC_FROM_ADDR_CODE_BUG_SBE_ADDRESS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_EXTRACT_SBE_RC_GENERIC_SBE_HW_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_GENERIC_SBE_HW_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_GENERIC_SBE_HW_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROC_EXTRACT_SBE_RC_GENERIC_SLW_HW_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_GENERIC_SLW_HW_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_GENERIC_SLW_HW_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROC_EXTRACT_SBE_RC_CODE_BUG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_EXTRACT_SBE_RC_CODE_BUG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); 
#define RC_PROC_EXTRACT_SBE_RC_CODE_BUG_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_NVLD_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_NVLD_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_NVLD_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_BUS_WRITE_NVLD_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_WRITE_NVLD_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_WRITE_NVLD_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_BUS_READ_NVLD_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_READ_NVLD_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_READ_NVLD_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_PAR_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_PAR_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_ADDR_PAR_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_BUS_PAR_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_PAR_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_BUS_PAR_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_LOCAL_BUS_PAR_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_LOCAL_BUS_PAR_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_LOCAL_BUS_PAR_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_INVALID_COMMAND_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_INVALID_COMMAND_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_INVALID_COMMAND_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_PARITY_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_PARITY_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_PARITY_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_BACK_END_OVERRUN_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_BACK_END_OVERRUN_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_BACK_END_OVERRUN_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_BACK_END_ACCESS_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_BACK_END_ACCESS_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_BACK_END_ACCESS_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_ARBITRATION_LOST_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_ARBITRATION_LOST_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_ARBITRATION_LOST_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_NACK_RECIEVED_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_NACK_RECIEVED_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_NACK_RECIEVED_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_NOT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_NOT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_NOT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_TIME_OUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_TIME_OUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_COMMAND_COMPLETE_TIME_OUT_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_I2C_STOP_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_STOP_ERR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_I2C_STOP_ERR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PARITY_ERROR_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PARITY_ERROR_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PARITY_ERROR_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_CE_COUNTER_OVERFLOW_BIT_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_CE_COUNTER_OVERFLOW_BIT_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_CE_COUNTER_OVERFLOW_BIT_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_MASTER_RESP_INFO_BITS_SET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_MASTER_RESP_INFO_BITS_SET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_MASTER_RESP_INFO_BITS_SET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_DATA_LGT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_DATA_LGT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_DATA_LGT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADD_LGT_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADD_LGT_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADD_LGT_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADDR_BDY_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADDR_BDY_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_CONTROL_REG_ADDR_BDY_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_ECCADDR_REG_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_ECCADDR_REG_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_ECCADDR_REG_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_EFF_PIBM_RESET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_EFF_PIBM_RESET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_EFF_PIBM_RESET_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_UEC_Q_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_UEC_Q_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_UEC_Q_ADD_ERROR_INFO(RC) 

#define RC_PROC_READ_SEEPROM_PIB_SLAVE_RESET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_SLAVE_RESET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_READ_SEEPROM_PIB_SLAVE_RESET_ADD_ERROR_INFO(RC) 

#define RC_SBE_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_UNKNOWN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_SBE_UNKNOWN_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CHIP_IN_ERROR, &ERROR_CODE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_IN_ERROR), fapi::RC_SBE_UNKNOWN_ERROR_CHIP_IN_ERROR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERROR_CODE), fapi::RC_SBE_UNKNOWN_ERROR_ERROR_CODE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROCPM_PMC_DECONFIG_NO_CORES_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PMC_DECONFIG_NO_CORES_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PMC_DECONFIG_NO_CORES_ADD_ERROR_INFO(RC) 

#define RC_PROC_TOD_SETUP_INVALID_TOPOLOGY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_SETUP_INVALID_TOPOLOGY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_SETUP_INVALID_TOPOLOGY_ADD_ERROR_INFO(RC) 

#define RC_PROC_TOD_SETUP_INVALID_NODE_DELAY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_SETUP_INVALID_NODE_DELAY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_SETUP_INVALID_NODE_DELAY_ADD_ERROR_INFO(RC) 

#define RC_PROC_TOD_INIT_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_INIT_NOT_RUNNING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_INIT_NOT_RUNNING_ADD_ERROR_INFO(RC) 

#define RC_PROC_TOD_INIT_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_INIT_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_INIT_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROC_TOD_INIT_INTERRUPT_PENDING_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_INIT_INTERRUPT_PENDING_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_INIT_INTERRUPT_PENDING_ADD_ERROR_INFO(RC) 

#define RC_PROC_TOD_INIT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_INIT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_INIT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_PROC_TOD_NULL_NODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_TOD_NULL_NODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_TOD_NULL_NODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PFET_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PFET_CODE_BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PFET_CODE_BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROCPM_PFET_GET_ATTR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PFET_GET_ATTR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PFET_GET_ATTR_ADD_ERROR_INFO(RC) 

#define RC_P8_FORCE_FREQ_TARGET_MODE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_P8_FORCE_FREQ_TARGET_MODE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_P8_FORCE_FREQ_TARGET_MODE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&FMIN, &FMAX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FMIN), fapi::RC_P8_FORCE_FREQ_TARGET_MODE_ERROR_FMIN}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FMAX), fapi::RC_P8_FORCE_FREQ_TARGET_MODE_ERROR_FMAX}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_CPU_AVG_FREQ_READ_TOD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CPU_AVG_FREQ_READ_TOD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CPU_AVG_FREQ_READ_TOD_ADD_ERROR_INFO(RC) 

#define RC_PROC_CPU_AVG_FREQ_READ_LPFT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CPU_AVG_FREQ_READ_LPFT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CPU_AVG_FREQ_READ_LPFT_ADD_ERROR_INFO(RC) 

#define RC_PROC_CPU_AVG_FREQ_READ_BAD_CHIPLET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CPU_AVG_FREQ_READ_BAD_CHIPLET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CPU_AVG_FREQ_READ_BAD_CHIPLET_ADD_ERROR_INFO(RC) 

#define RC_PROC_CPU_AVG_FREQ_READ__BAD_MODE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CPU_AVG_FREQ_READ__BAD_MODE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CPU_AVG_FREQ_READ__BAD_MODE_ADD_ERROR_INFO(RC) 

#define RC_PROC_CPU_AVG_FREQ_READ_REF_CLOCK_0_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_CPU_AVG_FREQ_READ_REF_CLOCK_0_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_CPU_AVG_FREQ_READ_REF_CLOCK_0_ADD_ERROR_INFO(RC) 

#define FAPI_EXPIRED_RETRY_COUNTER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define FAPI_EXPIRED_RETRY_COUNTER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define FAPI_EXPIRED_RETRY_COUNTER_ADD_ERROR_INFO(RC) 

#define RC_PROC_GETL3CAC_INVALID_CGC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETL3CAC_INVALID_CGC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETL3CAC_INVALID_CGC_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ARGS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ARGS), fapi::RC_PROC_GETL3CAC_INVALID_CGC_ARGS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_GETL3CAC_INVALID_MEMBER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETL3CAC_INVALID_MEMBER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETL3CAC_INVALID_MEMBER_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ARGS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ARGS), fapi::RC_PROC_GETL3CAC_INVALID_MEMBER_ARGS}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROC_GETL3CAC_DEBUG_CT_NOT_ALLOWED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_GETL3CAC_DEBUG_CT_NOT_ALLOWED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_GETL3CAC_DEBUG_CT_NOT_ALLOWED_ADD_ERROR_INFO(RC) 

#define RC_PROC_FAB_IOVALID_X_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_IOVALID_X_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_IOVALID_X_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_FAB_IOVALID_A_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FAB_IOVALID_A_PARTIAL_GOOD_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FAB_IOVALID_A_PARTIAL_GOOD_ERR_ADD_ERROR_INFO(RC) 

#define RC_PROC_SELECT_CLOCK_MUX_SWIZZLE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SELECT_CLOCK_MUX_SWIZZLE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SELECT_CLOCK_MUX_SWIZZLE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&POSITION, &REFCLOCK_BIT}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POSITION), fapi::RC_PROC_SELECT_CLOCK_MUX_SWIZZLE_ERR_POSITION}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(REFCLOCK_BIT), fapi::RC_PROC_SELECT_CLOCK_MUX_SWIZZLE_ERR_REFCLOCK_BIT}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROC_SELECT_CLOCK_CONFIG_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_SELECT_CLOCK_CONFIG_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_SELECT_CLOCK_CONFIG_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&CONFIGURED, &ATTACHED}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CONFIGURED), fapi::RC_PROC_SELECT_CLOCK_CONFIG_ERR_CONFIGURED}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ATTACHED), fapi::RC_PROC_SELECT_CLOCK_CONFIG_ERR_ATTACHED}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PROCPM_ACTIVATE_CORES_BREAKPOINT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_ACTIVATE_CORES_BREAKPOINT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_ACTIVATE_CORES_BREAKPOINT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&POLLCOUNT, &SLWSTATUS, &SLWCONTROL, &SCOREBOARD}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLCOUNT), fapi::RC_PROCPM_ACTIVATE_CORES_BREAKPOINT_POLLCOUNT}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLWSTATUS), fapi::RC_PROCPM_ACTIVATE_CORES_BREAKPOINT_SLWSTATUS}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLWCONTROL), fapi::RC_PROCPM_ACTIVATE_CORES_BREAKPOINT_SLWCONTROL}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SCOREBOARD), fapi::RC_PROCPM_ACTIVATE_CORES_BREAKPOINT_SCOREBOARD}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROCPM_ACTIVATE_CORES_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_ACTIVATE_CORES_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_ACTIVATE_CORES_TIMEOUT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&POLLCOUNT, &SLWSTATUS, &SLWCONTROL, &SCOREBOARD}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLCOUNT), fapi::RC_PROCPM_ACTIVATE_CORES_TIMEOUT_POLLCOUNT}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLWSTATUS), fapi::RC_PROCPM_ACTIVATE_CORES_TIMEOUT_SLWSTATUS}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLWCONTROL), fapi::RC_PROCPM_ACTIVATE_CORES_TIMEOUT_SLWCONTROL}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SCOREBOARD), fapi::RC_PROCPM_ACTIVATE_CORES_TIMEOUT_SCOREBOARD}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_PROCPM_ACTIVATE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_ACTIVATE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_ACTIVATE_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&POLLCOUNT, &SLWSTATUS, &SLWCONTROL, &SCOREBOARD}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(POLLCOUNT), fapi::RC_PROCPM_ACTIVATE_ERROR_POLLCOUNT}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLWSTATUS), fapi::RC_PROCPM_ACTIVATE_ERROR_SLWSTATUS}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SLWCONTROL), fapi::RC_PROCPM_ACTIVATE_ERROR_SLWCONTROL}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SCOREBOARD), fapi::RC_PROCPM_ACTIVATE_ERROR_SCOREBOARD}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_EX_SPECIAL_WAKEUP_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EX_SPECIAL_WAKEUP_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EX_SPECIAL_WAKEUP_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define RC_EX_CORE_ECO_VDD_PWR_GATE_SEQ_FSM_IDLE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EX_CORE_ECO_VDD_PWR_GATE_SEQ_FSM_IDLE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EX_CORE_ECO_VDD_PWR_GATE_SEQ_FSM_IDLE_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define RC_EX_CORE_ECO_VCS_PWR_GATE_SEQ_FSM_IDLE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EX_CORE_ECO_VCS_PWR_GATE_SEQ_FSM_IDLE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EX_CORE_ECO_VCS_PWR_GATE_SEQ_FSM_IDLE_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define RC_EX_CHIPLET_UNEXPECTED_PM_STATE_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EX_CHIPLET_UNEXPECTED_PM_STATE_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EX_CHIPLET_UNEXPECTED_PM_STATE_RC_ADD_ERROR_INFO(RC) 

#define RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_L2_PURGE_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_L3_PURGE_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EX_CHIPLET_AISS_WA_PB_PURGE_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_PROC_MPIPL_FORCE_XSTOP_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_MPIPL_FORCE_XSTOP_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_MPIPL_FORCE_XSTOP_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_PBCQ_IDLE_TRAFFIC_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PBCQ_IDLE_TRAFFIC_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PBCQ_IDLE_TRAFFIC_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define RC_NX_IDLE_TRAFFIC_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_NX_IDLE_TRAFFIC_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_NX_IDLE_TRAFFIC_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define RC_AS_IDLE_TRAFFIC_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_AS_IDLE_TRAFFIC_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_AS_IDLE_TRAFFIC_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define RC_CAPP_IDLE_TRAFFIC_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CAPP_IDLE_TRAFFIC_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CAPP_IDLE_TRAFFIC_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define RC_DSMP_IDLE_TRAFFIC_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_DSMP_IDLE_TRAFFIC_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_DSMP_IDLE_TRAFFIC_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define RC_MCD_RECOVERY_IDLE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MCD_RECOVERY_IDLE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MCD_RECOVERY_IDLE_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define RC_EX_OHA_AISS_FSM_IDLE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_EX_OHA_AISS_FSM_IDLE_TIMEOUT_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_EX_OHA_AISS_FSM_IDLE_TIMEOUT_RC_ADD_ERROR_INFO(RC) 

#define RC_UNSUPPORTED_EX_CHIPLET_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_UNSUPPORTED_EX_CHIPLET_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_UNSUPPORTED_EX_CHIPLET_RC_ADD_ERROR_INFO(RC) 

#define RC_SBE_LOAD_RING_VEC_EX_ex_time_core_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LOAD_RING_VEC_EX_ex_time_core_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_LOAD_RING_VEC_EX_ex_time_core_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_LOAD_RING_VEC_EX_ex_time_eco_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LOAD_RING_VEC_EX_ex_time_eco_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_LOAD_RING_VEC_EX_ex_time_eco_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_LOAD_RING_VEC_EX_ex_repr_core_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LOAD_RING_VEC_EX_ex_repr_core_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_LOAD_RING_VEC_EX_ex_repr_core_ERROR_ADD_ERROR_INFO(RC) 

#define RC_SBE_LOAD_RING_VEC_EX_ex_repr_eco_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_SBE_LOAD_RING_VEC_EX_ex_repr_eco_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SBE_REGISTERS, RC); fapiCollectRegFfdc(CHIP_IN_ERROR, fapi::REG_FFDC_PROC_SLW_REGISTERS, RC); 
#define RC_SBE_LOAD_RING_VEC_EX_ex_repr_eco_ERROR_ADD_ERROR_INFO(RC) 

#define RC_OPT_MEMMAP_MEM_BASE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OPT_MEMMAP_MEM_BASE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OPT_MEMMAP_MEM_BASE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ADDR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDR), fapi::RC_OPT_MEMMAP_MEM_BASE_ERR_ADDR}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_OPT_MEMMAP_MIRROR_BASE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OPT_MEMMAP_MIRROR_BASE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OPT_MEMMAP_MIRROR_BASE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ADDR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDR), fapi::RC_OPT_MEMMAP_MIRROR_BASE_ERR_ADDR}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&GROUP, &MEM_BASES, &MEM_SIZES, &GROUP_BASE, &GROUP_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP), fapi::RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_GROUP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEM_BASES), fapi::RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_MEM_BASES}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEM_SIZES), fapi::RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_MEM_SIZES}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP_BASE), fapi::RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_GROUP_BASE}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP_SIZE), fapi::RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_GROUP_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_OPT_MEMMAP_MIRROR_GROUP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OPT_MEMMAP_MIRROR_GROUP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OPT_MEMMAP_MIRROR_GROUP_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&GROUP, &MIRROR_BASES, &MIRROR_SIZES, &GROUP_BASE, &GROUP_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP), fapi::RC_OPT_MEMMAP_MIRROR_GROUP_ERR_GROUP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIRROR_BASES), fapi::RC_OPT_MEMMAP_MIRROR_GROUP_ERR_MIRROR_BASES}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MIRROR_SIZES), fapi::RC_OPT_MEMMAP_MIRROR_GROUP_ERR_MIRROR_SIZES}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP_BASE), fapi::RC_OPT_MEMMAP_MIRROR_GROUP_ERR_GROUP_BASE}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP_SIZE), fapi::RC_OPT_MEMMAP_MIRROR_GROUP_ERR_GROUP_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_OPT_MEMMAP_GROUP_PARTNER_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OPT_MEMMAP_GROUP_PARTNER_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OPT_MEMMAP_GROUP_PARTNER_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&GROUP}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP), fapi::RC_OPT_MEMMAP_GROUP_PARTNER_ERR_GROUP}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_OPT_MEMMAP_ALLOC_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_OPT_MEMMAP_ALLOC_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_OPT_MEMMAP_ALLOC_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ALLOC_INDEX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ALLOC_INDEX), fapi::RC_OPT_MEMMAP_ALLOC_ERR_ALLOC_INDEX}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PMPROC_PFETLIB_BAD_DOMAIN_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_PFETLIB_BAD_DOMAIN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PMPROC_PFETLIB_BAD_DOMAIN_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&EX, &DOMAIN}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX), fapi::RC_PMPROC_PFETLIB_BAD_DOMAIN_EX}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DOMAIN), fapi::RC_PMPROC_PFETLIB_BAD_DOMAIN_DOMAIN}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_PMPROC_PFETLIB_BAD_OP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_PFETLIB_BAD_OP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PMPROC_PFETLIB_BAD_OP_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&EX, &DOMAIN, &OPERATION}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX), fapi::RC_PMPROC_PFETLIB_BAD_OP_EX}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DOMAIN), fapi::RC_PMPROC_PFETLIB_BAD_OP_DOMAIN}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OPERATION), fapi::RC_PMPROC_PFETLIB_BAD_OP_OPERATION}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PMPROC_PFETLIB_RAIL_ON_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_PFETLIB_RAIL_ON_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PMPROC_PFETLIB_RAIL_ON_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&EX, &DOMAIN, &OPERATION}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX), fapi::RC_PMPROC_PFETLIB_RAIL_ON_EX}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DOMAIN), fapi::RC_PMPROC_PFETLIB_RAIL_ON_DOMAIN}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OPERATION), fapi::RC_PMPROC_PFETLIB_RAIL_ON_OPERATION}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PMPROC_PFETLIB_RAIL_OFF_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_PFETLIB_RAIL_OFF_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PMPROC_PFETLIB_RAIL_OFF_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&EX, &DOMAIN, &OPERATION}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX), fapi::RC_PMPROC_PFETLIB_RAIL_OFF_EX}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DOMAIN), fapi::RC_PMPROC_PFETLIB_RAIL_OFF_DOMAIN}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OPERATION), fapi::RC_PMPROC_PFETLIB_RAIL_OFF_OPERATION}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PMPROC_PFETLIB_CODE_FAULT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PMPROC_PFETLIB_CODE_FAULT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PMPROC_PFETLIB_CODE_FAULT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&EX, &DOMAIN, &OPERATION}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX), fapi::RC_PMPROC_PFETLIB_CODE_FAULT_EX}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DOMAIN), fapi::RC_PMPROC_PFETLIB_CODE_FAULT_DOMAIN}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(OPERATION), fapi::RC_PMPROC_PFETLIB_CODE_FAULT_OPERATION}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROCPM_PFETLIB_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PFETLIB_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PFETLIB_TIMEOUT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ADDRESS, &PFETCONTROLVALUE, &DOMAIN}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ADDRESS), fapi::RC_PROCPM_PFETLIB_TIMEOUT_ADDRESS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(PFETCONTROLVALUE), fapi::RC_PROCPM_PFETLIB_TIMEOUT_PFETCONTROLVALUE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DOMAIN), fapi::RC_PROCPM_PFETLIB_TIMEOUT_DOMAIN}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_PROCPM_PFETLIB_BABYSTEPPER_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PFETLIB_BABYSTEPPER_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PFETLIB_BABYSTEPPER_TIMEOUT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&EX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX), fapi::RC_PROCPM_PFETLIB_BABYSTEPPER_TIMEOUT_EX}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_PROCPM_PFETLIB_BABYSTEPPER_WAKEUP_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROCPM_PFETLIB_BABYSTEPPER_WAKEUP_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROCPM_PFETLIB_BABYSTEPPER_WAKEUP_TIMEOUT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&EX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(EX), fapi::RC_PROCPM_PFETLIB_BABYSTEPPER_WAKEUP_TIMEOUT_EX}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_CPM_VPD_FUNC_INVALID_PARAMETER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CPM_VPD_FUNC_INVALID_PARAMETER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CPM_VPD_FUNC_INVALID_PARAMETER_ADD_ERROR_INFO(RC) 

#define RC_CPM_CAL_INVALID_PARAMETER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CPM_CAL_INVALID_PARAMETER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CPM_CAL_INVALID_PARAMETER_ADD_ERROR_INFO(RC) 

#define RC_CPM_PORE_GEN_INVALID_PARAMETER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CPM_PORE_GEN_INVALID_PARAMETER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CPM_PORE_GEN_INVALID_PARAMETER_ADD_ERROR_INFO(RC) 

#define RC_CPM_CAL_CPMS_NOT_ENABLED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CPM_CAL_CPMS_NOT_ENABLED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CPM_CAL_CPMS_NOT_ENABLED_ADD_ERROR_INFO(RC) 

#define RC_CPM_CAL_CALIBRATION_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CPM_CAL_CALIBRATION_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CPM_CAL_CALIBRATION_ERROR_ADD_ERROR_INFO(RC) 

#define RC_CPM_CAL_CHECKSTOP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CPM_CAL_CHECKSTOP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CPM_CAL_CHECKSTOP_ADD_ERROR_INFO(RC) 

#define RC_CPM_BEST_PATH_SELECT_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CPM_BEST_PATH_SELECT_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CPM_BEST_PATH_SELECT_FAILED_ADD_ERROR_INFO(RC) 

#define RC_NO_FAPI_CHIP_TARGETS_IN_VECTOR_RC_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_NO_FAPI_CHIP_TARGETS_IN_VECTOR_RC_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_NO_FAPI_CHIP_TARGETS_IN_VECTOR_RC_ADD_ERROR_INFO(RC) 

#define RC_PROC_FASTARRAY_FLUSH_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FASTARRAY_FLUSH_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FASTARRAY_FLUSH_FAIL_ADD_ERROR_INFO(RC) 

#define RC_PROC_FASTARRAY_INSUFFICIENT_ROWS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_PROC_FASTARRAY_INSUFFICIENT_ROWS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_PROC_FASTARRAY_INSUFFICIENT_ROWS_ADD_ERROR_INFO(RC) 

#define RC_CEN_GETTRACEARRAY_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_GETTRACEARRAY_INTERNAL_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_GETTRACEARRAY_INTERNAL_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&ERR_DATA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(ERR_DATA), fapi::RC_CEN_GETTRACEARRAY_INTERNAL_ERR_ERR_DATA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_CEN_GETTRACEARRAY_ARRAY_RUNNING_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_GETTRACEARRAY_ARRAY_RUNNING_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_GETTRACEARRAY_ARRAY_RUNNING_ERR_ADD_ERROR_INFO(RC) 

#define RC_CEN_DMI_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_DMI_SCOMINIT_INVALID_TARGET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_DMI_SCOMINIT_INVALID_TARGET_ADD_ERROR_INFO(RC) 

#define RC_CEN_XIPC_UNSPECIFIED_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_UNSPECIFIED_IMAGE_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_UNSPECIFIED_IMAGE_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_CEN_XIPC_UNSPECIFIED_IMAGE_ERR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_IMG_SIZE_INP, &DATA_IMG_SIZE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE_INP), fapi::RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_IMG_SIZE), fapi::RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_ATTRIBUTE_RING_SIZE, &DATA_MAX_PLL_RING_SIZE, &DATA_SIZE_OF_BUF1}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_ATTRIBUTE_RING_SIZE), fapi::RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_ATTRIBUTE_RING_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_MAX_PLL_RING_SIZE), fapi::RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_MAX_PLL_RING_SIZE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_OF_BUF1), fapi::RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_SIZE_OF_BUF1}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_CEN_XIPC_IMGBUILD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_IMGBUILD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_IMGBUILD_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&RC_LOCAL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RC_LOCAL), fapi::RC_CEN_XIPC_IMGBUILD_ERROR_RC_LOCAL}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_RING_BLOCK_SIZEOFTHIS, &DATA_SIZE_OF_BUF1}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_SIZEOFTHIS), fapi::RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_RING_BLOCK_SIZEOFTHIS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_SIZE_OF_BUF1), fapi::RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_SIZE_OF_BUF1}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DATA_RING_BLOCK_ENTRYOFFSET, &DATA_RING_BLOCK_SIZEOFTHIS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_ENTRYOFFSET), fapi::RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_ENTRYOFFSET}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DATA_RING_BLOCK_SIZEOFTHIS), fapi::RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_SIZEOFTHIS}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_MSS_PLACE_HOLDER_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_PLACE_HOLDER_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_PLACE_HOLDER_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_EFF_CONFIG_RANK_GROUP_RC_ERROR_001A_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RANK_GROUP_RC_ERROR_001A_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RANK_GROUP_RC_ERROR_001A_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNEXPECTED_MEM_CLK_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_MEM_CLK_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNEXPECTED_MEM_CLK_STATUS_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNEXPECTED_NEST_CLK_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_NEST_CLK_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNEXPECTED_NEST_CLK_STATUS_ADD_ERROR_INFO(RC) 

#define RC_MSS_INIT1_OPCG_DONE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INIT1_OPCG_DONE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INIT1_OPCG_DONE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_INIT1_FSISTATUS_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INIT1_FSISTATUS_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INIT1_FSISTATUS_FAIL_ADD_ERROR_INFO(RC) 

#define RC_MSS_INIT3_FSISTATUS_FAIL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INIT3_FSISTATUS_FAIL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INIT3_FSISTATUS_FAIL_ADD_ERROR_INFO(RC) 

#define RC_MSS_PLL_LOCK_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_PLL_LOCK_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_PLL_LOCK_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_MSS_THOLD_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_THOLD_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_THOLD_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_CCREG_MISMATCH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCREG_MISMATCH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CCREG_MISMATCH_ADD_ERROR_INFO(RC) 

#define RC_MSS_ARRAY_REPAIR_BUSY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ARRAY_REPAIR_BUSY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ARRAY_REPAIR_BUSY_ADD_ERROR_INFO(RC) 

#define RC_MSS_ARRAY_REPAIR_NOT_DONE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ARRAY_REPAIR_NOT_DONE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ARRAY_REPAIR_NOT_DONE_ADD_ERROR_INFO(RC) 

#define RC_MSS_ECC_TRAP_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_ECC_TRAP_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_ECC_TRAP_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_GENERAL_PUTSCOM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GENERAL_PUTSCOM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GENERAL_PUTSCOM_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_GENERAL_GETSCOM_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GENERAL_GETSCOM_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GENERAL_GETSCOM_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNEXPECTED_FIR_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_FIR_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNEXPECTED_FIR_STATUS_ADD_ERROR_INFO(RC) 

#define RC_MSS_INIT_CAL_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INIT_CAL_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INIT_CAL_FAILED_ADD_ERROR_INFO(RC) 

#define RC_MSS_GENERAL_SIMSTKFAC_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GENERAL_SIMSTKFAC_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GENERAL_SIMSTKFAC_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_GET_FAPI_ATTRIBUTE_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GET_FAPI_ATTRIBUTE_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GET_FAPI_ATTRIBUTE_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_GET_SIM_HIERARCHY_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_GET_SIM_HIERARCHY_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_GET_SIM_HIERARCHY_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_INVALID_FN_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INVALID_FN_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INVALID_FN_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_MCBIST_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MCBIST_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MCBIST_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_PORT_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_PORT_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_PORT_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_DRIVER_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRIVER_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRIVER_IMP_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_SLEW_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SLEW_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SLEW_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_WR_DRAM_VREF_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_WR_DRAM_VREF_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_WR_DRAM_VREF_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_READ_CEN_VREF_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_READ_CEN_VREF_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_READ_CEN_VREF_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_RECEIVER_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_RECEIVER_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_RECEIVER_IMP_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNABLE_TO_GROUP_MCS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNABLE_TO_GROUP_MCS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNABLE_TO_GROUP_MCS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&TARGET_MCS); fapi::fapiCheckType<const fapi::Target *>(&TARGET_MCS); {const void * l_objects[] = {&TARGET_MCS}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_DECONF, 0, 0, 0}, {fapi::ReturnCode::EI_TYPE_GARD, 0, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_ERROR_MSS_GROUPING_ATTRS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ERROR_MSS_GROUPING_ATTRS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_ERROR_MSS_GROUPING_ATTRS_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&_ATTR_PROC_POS, &_ATTR_CEN_POS, &_ATTR_CHIP_UNIT_POS_MBA0, &_ATTR_CHIP_UNIT_POS_MBA1, &_ATTR_EFF_DIMM_SIZE0, &_ATTR_EFF_DIMM_SIZE1, &_ATTR_MSS_INTERLEAVE_ENABLE, &_ATTR_ALL_MCS_IN_INTERLEAVING_GROUP, &_ATTR_PROC_MEM_BASE, &_ATTR_PROC_MIRROR_BASE, &_ATTR_MSS_MEM_MC_IN_GROUP, &_ATTR_PROC_MEM_BASES, &_ATTR_PROC_MEM_SIZES, &_ATTR_MSS_MCS_GROUP_32, &_ATTR_PROC_MIRROR_BASES, &_ATTR_PROC_MIRROR_SIZES}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_POS), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_POS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_CEN_POS), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_CEN_POS}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_CHIP_UNIT_POS_MBA0), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_CHIP_UNIT_POS_MBA0}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_CHIP_UNIT_POS_MBA1), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_CHIP_UNIT_POS_MBA1}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_EFF_DIMM_SIZE0), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_EFF_DIMM_SIZE0}, {fapi::ReturnCode::EI_TYPE_FFDC, 5, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_EFF_DIMM_SIZE1), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_EFF_DIMM_SIZE1}, {fapi::ReturnCode::EI_TYPE_FFDC, 6, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_MSS_INTERLEAVE_ENABLE), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_MSS_INTERLEAVE_ENABLE}, {fapi::ReturnCode::EI_TYPE_FFDC, 7, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_ALL_MCS_IN_INTERLEAVING_GROUP), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_ALL_MCS_IN_INTERLEAVING_GROUP}, {fapi::ReturnCode::EI_TYPE_FFDC, 8, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_MEM_BASE), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MEM_BASE}, {fapi::ReturnCode::EI_TYPE_FFDC, 9, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_MIRROR_BASE), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MIRROR_BASE}, {fapi::ReturnCode::EI_TYPE_FFDC, 10, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_MSS_MEM_MC_IN_GROUP), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_MSS_MEM_MC_IN_GROUP}, {fapi::ReturnCode::EI_TYPE_FFDC, 11, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_MEM_BASES), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MEM_BASES}, {fapi::ReturnCode::EI_TYPE_FFDC, 12, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_MEM_SIZES), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MEM_SIZES}, {fapi::ReturnCode::EI_TYPE_FFDC, 13, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_MSS_MCS_GROUP_32), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_MSS_MCS_GROUP_32}, {fapi::ReturnCode::EI_TYPE_FFDC, 14, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_MIRROR_BASES), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MIRROR_BASES}, {fapi::ReturnCode::EI_TYPE_FFDC, 15, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(_ATTR_PROC_MIRROR_SIZES), fapi::RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MIRROR_SIZES}}; RC.addErrorInfo(l_objects, l_entries, 16);}

#define RC_ERROR_MSS_FIRS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ERROR_MSS_FIRS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CENCHIP, fapi::REG_FFDC_DMI_FIR_REGS, RC); fapiCollectRegFfdc(CENCHIP, fapi::REG_FFDC_MBI_FIR_REGS, RC); fapiCollectRegFfdc(CENCHIP, fapi::REG_FFDC_MBS_FIR_REGS, RC); fapiCollectRegFfdc(CENCHIP, fapi::REG_FFDC_SCAC_FIR_REGS, RC); 
#define RC_ERROR_MSS_FIRS_ADD_ERROR_INFO(RC) 

#define RC_ERROR_MBA_FIRS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_ERROR_MBA_FIRS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(CENCHIP_MBA, fapi::REG_FFDC_MBA_FIR_REGS, RC); fapiCollectRegFfdc(CENCHIP_MBA, fapi::REG_FFDC_DDR_PHY_FIR_REGS, RC); 
#define RC_ERROR_MBA_FIRS_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNEXPECTED_CLOCK_STATUS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNEXPECTED_CLOCK_STATUS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNEXPECTED_CLOCK_STATUS_ADD_ERROR_INFO(RC) 

#define RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MEM_CHIP, &FFDC_DATA_1, &FFDC_DATA_2, &FFDC_DATA_3, &FFDC_DATA_4, &FFDC_DATA_5}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MEM_CHIP), fapi::RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_MEM_CHIP}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_1), fapi::RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_FFDC_DATA_1}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_2), fapi::RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_FFDC_DATA_2}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_3), fapi::RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_FFDC_DATA_3}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_4), fapi::RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_FFDC_DATA_4}, {fapi::ReturnCode::EI_TYPE_FFDC, 5, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_5), fapi::RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_FFDC_DATA_5}}; RC.addErrorInfo(l_objects, l_entries, 6);}

#define RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DP18_0_PLL_FAILED_TO_LOCK_ADD_ERROR_INFO(RC) 

#define RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DP18_1_PLL_FAILED_TO_LOCK_ADD_ERROR_INFO(RC) 

#define RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_AD32S_0_PLL_FAILED_TO_LOCK_ADD_ERROR_INFO(RC) 

#define RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_AD32S_1_PLL_FAILED_TO_LOCK_ADD_ERROR_INFO(RC) 

#define RC_MSS_DRAMINIT_TRAINING_INIT_CAL_STALLED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_INIT_CAL_STALLED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_INIT_CAL_STALLED_ADD_ERROR_INFO(RC) 

#define RC_MSS_DRAMINIT_TRAINING_INIT_CAL_FAILED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_INIT_CAL_FAILED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DRAMINIT_TRAINING_INIT_CAL_FAILED_ADD_ERROR_INFO(RC) 

#define RC_MSS_EFF_CONFIG_RC_ERROR_001A_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RC_ERROR_001A_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EFF_CONFIG_RC_ERROR_001A_ADD_ERROR_INFO(RC) 

#define RC_MSS_DIMM_POWER_CURVE_DATA_LAB_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DIMM_POWER_CURVE_DATA_LAB_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DIMM_POWER_CURVE_DATA_LAB_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEM_CHIP); {const void * l_objects[] = {&FFDC_DATA_1, &FFDC_DATA_2, &FFDC_DATA_3, &FFDC_DATA_4, &MEM_CHIP}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_1), fapi::RC_MSS_DIMM_POWER_CURVE_DATA_LAB_FFDC_DATA_1}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_2), fapi::RC_MSS_DIMM_POWER_CURVE_DATA_LAB_FFDC_DATA_2}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_3), fapi::RC_MSS_DIMM_POWER_CURVE_DATA_LAB_FFDC_DATA_3}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_4), fapi::RC_MSS_DIMM_POWER_CURVE_DATA_LAB_FFDC_DATA_4}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 4, fapi::CalloutPriorities::HIGH, 0}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEM_CHIP); {const void * l_objects[] = {&FFDC_DATA_1, &FFDC_DATA_2, &FFDC_DATA_3, &FFDC_DATA_4, &MEM_CHIP}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_1), fapi::RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_1}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_2), fapi::RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_2}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_3), fapi::RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_3}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_4), fapi::RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_4}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 4, fapi::CalloutPriorities::HIGH, 0}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MEM_DIMM); {const void * l_objects[] = {&FFDC_DATA_1, &FFDC_DATA_2, &FFDC_DATA_3, &MEM_DIMM}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_1), fapi::RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_FFDC_DATA_1}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_2), fapi::RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_FFDC_DATA_2}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(FFDC_DATA_3), fapi::RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_FFDC_DATA_3}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 3, fapi::CalloutPriorities::HIGH, 0}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_MSS_NON_CHECKER_BOARD_MODE_GROUPING_NOT_POSSIBLE_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, hwpCollectMemGrouping, PROC_CHIP, RC); }
#define RC_MSS_NON_CHECKER_BOARD_MODE_GROUPING_NOT_POSSIBLE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_NON_CHECKER_BOARD_MODE_GROUPING_NOT_POSSIBLE_ADD_ERROR_INFO(RC) 

#define RC_MSS_CHECKER_BOARD_MODE_GROUPING_NOT_POSSIBLE_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, hwpCollectMemGrouping, PROC_CHIP, RC); }
#define RC_MSS_CHECKER_BOARD_MODE_GROUPING_NOT_POSSIBLE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CHECKER_BOARD_MODE_GROUPING_NOT_POSSIBLE_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNABLE_TO_GROUP_SUMMARY_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNABLE_TO_GROUP_SUMMARY_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNABLE_TO_GROUP_SUMMARY_ADD_ERROR_INFO(RC) 

#define RC_MSS_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) { fapi::ReturnCode l_tempRc; FAPI_EXEC_HWP(l_tempRc, hwpCollectMemGrouping, PROC_CHIP, RC); }
#define RC_MSS_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_BASE_ADDRESS_OVERLAPS_MIRROR_ADDRESS_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNSUPPORTED_SPD_DATA_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_SPD_DATA_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_SPD_DATA_ADD_ERROR_INFO(RC) 

#define RC_MSS_MODULE_TYPE_MIX_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MODULE_TYPE_MIX_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MODULE_TYPE_MIX_ADD_ERROR_INFO(RC) 

#define RC_MSS_NO_COMMON_SUPPORTED_CL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_NO_COMMON_SUPPORTED_CL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_NO_COMMON_SUPPORTED_CL_ADD_ERROR_INFO(RC) 

#define RC_MSS_EXCEED_TAA_MAX_NO_CL_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_EXCEED_TAA_MAX_NO_CL_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_EXCEED_TAA_MAX_NO_CL_ADD_ERROR_INFO(RC) 

#define RC_MSS_UNSUPPORTED_FREQ_CALCULATED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_FREQ_CALCULATED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_UNSUPPORTED_FREQ_CALCULATED_ADD_ERROR_INFO(RC) 

#define RC_MSS_CCS_READ_MISCOMPARE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCS_READ_MISCOMPARE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CCS_READ_MISCOMPARE_ADD_ERROR_INFO(RC) 

#define RC_MSS_CCS_UE_SUE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCS_UE_SUE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CCS_UE_SUE_ADD_ERROR_INFO(RC) 

#define RC_MSS_CCS_CAL_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCS_CAL_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CCS_CAL_TIMEOUT_ADD_ERROR_INFO(RC) 

#define RC_MSS_CCS_HUNG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_CCS_HUNG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_CCS_HUNG_ADD_ERROR_INFO(RC) 

#define RC_MSS_RCD_PARITY_ERROR_LIMIT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_LIMIT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_LIMIT_ADD_ERROR_INFO(RC) 

#define RC_MSS_RCD_PARITY_ERROR_PORT0_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_PORT0_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_PORT0_ADD_ERROR_INFO(RC) 

#define RC_MSS_RCD_PARITY_ERROR_PORT1_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_PORT1_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_RCD_PARITY_ERROR_PORT1_ADD_ERROR_INFO(RC) 

#define RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); fapi::fapiCheckType<const fapi::Target *>(&MBA); fapi::fapiCheckType<const fapi::Target *>(&MBA); {const void * l_objects[] = {&MBMCC, &MBMSR, &CMD_TYPE, &MBA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCC), fapi::RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_MBMCC}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMSR), fapi::RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_MBMSR}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE), fapi::RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_CMD_TYPE}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 3, fapi::CalloutPriorities::HIGH, 0}, {fapi::ReturnCode::EI_TYPE_DECONF, 3, 0, 0}, {fapi::ReturnCode::EI_TYPE_GARD, 3, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 6);}

#define RC_MSS_MAINT_START_NOT_RESET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_START_NOT_RESET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_START_NOT_RESET_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); fapi::fapiCheckType<const fapi::Target *>(&MBA); fapi::fapiCheckType<const fapi::Target *>(&MBA); {const void * l_objects[] = {&MBMCC, &CMD_TYPE, &MBMCT, &MBA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCC), fapi::RC_MSS_MAINT_START_NOT_RESET_MBMCC}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE), fapi::RC_MSS_MAINT_START_NOT_RESET_CMD_TYPE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT), fapi::RC_MSS_MAINT_START_NOT_RESET_MBMCT}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 3, fapi::CalloutPriorities::HIGH, 0}, {fapi::ReturnCode::EI_TYPE_DECONF, 3, 0, 0}, {fapi::ReturnCode::EI_TYPE_GARD, 3, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 6);}

#define RC_MSS_MAINT_STOP_NOT_RESET_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_STOP_NOT_RESET_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_STOP_NOT_RESET_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); fapi::fapiCheckType<const fapi::Target *>(&MBA); fapi::fapiCheckType<const fapi::Target *>(&MBA); {const void * l_objects[] = {&MBMCC, &CMD_TYPE, &MBMCT, &MBA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCC), fapi::RC_MSS_MAINT_STOP_NOT_RESET_MBMCC}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE), fapi::RC_MSS_MAINT_STOP_NOT_RESET_CMD_TYPE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT), fapi::RC_MSS_MAINT_STOP_NOT_RESET_MBMCT}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 3, fapi::CalloutPriorities::HIGH, 0}, {fapi::ReturnCode::EI_TYPE_DECONF, 3, 0, 0}, {fapi::ReturnCode::EI_TYPE_GARD, 3, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 6);}

#define RC_MSS_MAINT_CMD_IN_PROGRESS_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_CMD_IN_PROGRESS_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_CMD_IN_PROGRESS_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); fapi::fapiCheckType<const fapi::Target *>(&MBA); fapi::fapiCheckType<const fapi::Target *>(&MBA); {const void * l_objects[] = {&MBMSR, &CMD_TYPE, &MBMCT, &MBA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMSR), fapi::RC_MSS_MAINT_CMD_IN_PROGRESS_MBMSR}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE), fapi::RC_MSS_MAINT_CMD_IN_PROGRESS_CMD_TYPE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT), fapi::RC_MSS_MAINT_CMD_IN_PROGRESS_MBMCT}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 3, fapi::CalloutPriorities::LOW, 0}, {fapi::ReturnCode::EI_TYPE_DECONF, 3, 0, 0}, {fapi::ReturnCode::EI_TYPE_GARD, 3, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 6);}

#define RC_MSS_MAINT_NO_MEM_CNFG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_NO_MEM_CNFG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_NO_MEM_CNFG_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &MBAXCR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_NO_MEM_CNFG_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBAXCR), fapi::RC_MSS_MAINT_NO_MEM_CNFG_MBAXCR}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &CCS_MODE, &CMD_TYPE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CCS_MODE), fapi::RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CCS_MODE}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE), fapi::RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CMD_TYPE}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_MSS_MAINT_ECC_DISABLED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_ECC_DISABLED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_ECC_DISABLED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &MBSECC, &CMD_TYPE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_ECC_DISABLED_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBSECC), fapi::RC_MSS_MAINT_ECC_DISABLED_MBSECC}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE), fapi::RC_MSS_MAINT_ECC_DISABLED_CMD_TYPE}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_MSS_MAINT_INVALID_CMD_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_CMD_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_CMD_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &MBAFIR, &CMD_TYPE, &MBMCT}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_INVALID_CMD_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBAFIR), fapi::RC_MSS_MAINT_INVALID_CMD_MBAFIR}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE), fapi::RC_MSS_MAINT_INVALID_CMD_CMD_TYPE}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT), fapi::RC_MSS_MAINT_INVALID_CMD_MBMCT}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_MSS_MAINT_INVALID_ADDR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_ADDR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(MBA, fapi::REG_FFDC_INVALID_ADDR, RC); 
#define RC_MSS_MAINT_INVALID_ADDR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &MBAFIR, &CMD_TYPE, &MBMCT}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_INVALID_ADDR_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBAFIR), fapi::RC_MSS_MAINT_INVALID_ADDR_MBAFIR}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE), fapi::RC_MSS_MAINT_INVALID_ADDR_CMD_TYPE}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT), fapi::RC_MSS_MAINT_INVALID_ADDR_MBMCT}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_MSS_MAINT_CMD_TIMEOUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_CMD_TIMEOUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) fapiCollectRegFfdc(MBA, fapi::REG_FFDC_CMD_TIMEOUT_MBA_REGS, RC); fapiCollectRegFfdc(CENTAUR, fapi::REG_FFDC_CMD_TIMEOUT_MBS_REGS, RC); 
#define RC_MSS_MAINT_CMD_TIMEOUT_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); fapi::fapiCheckType<const fapi::Target *>(&MBA); fapi::fapiCheckType<const fapi::Target *>(&MBA); {const void * l_objects[] = {&CMD_TYPE, &MBA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE), fapi::RC_MSS_MAINT_CMD_TIMEOUT_CMD_TYPE}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 1, fapi::CalloutPriorities::LOW, 0}, {fapi::ReturnCode::EI_TYPE_DECONF, 1, 0, 0}, {fapi::ReturnCode::EI_TYPE_GARD, 1, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_MSS_MAINT_ZERO_DDR_FREQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_ZERO_DDR_FREQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_ZERO_DDR_FREQ_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &CMD_TYPE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_ZERO_DDR_FREQ_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CMD_TYPE), fapi::RC_MSS_MAINT_ZERO_DDR_FREQ_CMD_TYPE}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &MBAXCR, &DRAM_WIDTH, &DRAM_GEN}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBAXCR), fapi::RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_MBAXCR}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH), fapi::RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_DRAM_WIDTH}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_GEN), fapi::RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_DRAM_GEN}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_MSS_MAINT_INVALID_DIMM_CNFG_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_DIMM_CNFG_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_DIMM_CNFG_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &MBAXCR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_INVALID_DIMM_CNFG_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBAXCR), fapi::RC_MSS_MAINT_INVALID_DIMM_CNFG_MBAXCR}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &RANK}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_RANK}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &RANK}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_RANK}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_MSS_MAINT_X4_SYMBOL_ON_READ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_X4_SYMBOL_ON_READ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_X4_SYMBOL_ON_READ_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &MARKSTORE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_X4_SYMBOL_ON_READ_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH), fapi::RC_MSS_MAINT_X4_SYMBOL_ON_READ_DRAM_WIDTH}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_X4_SYMBOL_ON_READ_RANK}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MARKSTORE), fapi::RC_MSS_MAINT_X4_SYMBOL_ON_READ_MARKSTORE}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_MSS_MAINT_INVALID_MARKSTORE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_MARKSTORE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_MARKSTORE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &MARKSTORE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_INVALID_MARKSTORE_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH), fapi::RC_MSS_MAINT_INVALID_MARKSTORE_DRAM_WIDTH}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_INVALID_MARKSTORE_RANK}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MARKSTORE), fapi::RC_MSS_MAINT_INVALID_MARKSTORE_MARKSTORE}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &RANK}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_RANK}}; RC.addErrorInfo(l_objects, l_entries, 2);}

#define RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &SYMBOL_MARK, &CHIP_MARK}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH), fapi::RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_DRAM_WIDTH}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_RANK}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL_MARK), fapi::RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_SYMBOL_MARK}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_MARK), fapi::RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_CHIP_MARK}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_MSS_MAINT_INVALID_SYMBOL_INDEX_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_SYMBOL_INDEX_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_SYMBOL_INDEX_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &SYMBOL_MARK, &CHIP_MARK}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_INVALID_SYMBOL_INDEX_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH), fapi::RC_MSS_MAINT_INVALID_SYMBOL_INDEX_DRAM_WIDTH}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_INVALID_SYMBOL_INDEX_RANK}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL_MARK), fapi::RC_MSS_MAINT_INVALID_SYMBOL_INDEX_SYMBOL_MARK}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_MARK), fapi::RC_MSS_MAINT_INVALID_SYMBOL_INDEX_CHIP_MARK}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_MSS_MAINT_INVALID_CHIP_INDEX_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_CHIP_INDEX_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_CHIP_INDEX_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &SYMBOL_MARK, &CHIP_MARK}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_INVALID_CHIP_INDEX_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH), fapi::RC_MSS_MAINT_INVALID_CHIP_INDEX_DRAM_WIDTH}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_INVALID_CHIP_INDEX_RANK}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL_MARK), fapi::RC_MSS_MAINT_INVALID_CHIP_INDEX_SYMBOL_MARK}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_MARK), fapi::RC_MSS_MAINT_INVALID_CHIP_INDEX_CHIP_MARK}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &SYMBOL_MARK, &CHIP_MARK, &MBECCFIR}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH), fapi::RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_DRAM_WIDTH}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_RANK}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL_MARK), fapi::RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_SYMBOL_MARK}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(CHIP_MARK), fapi::RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_CHIP_MARK}, {fapi::ReturnCode::EI_TYPE_FFDC, 5, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBECCFIR), fapi::RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_MBECCFIR}}; RC.addErrorInfo(l_objects, l_entries, 6);}

#define RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &RANK, &MUX_TYPE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_RANK}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MUX_TYPE), fapi::RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_MUX_TYPE}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_MSS_MAINT_INVALID_STEER_MUX_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_STEER_MUX_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_STEER_MUX_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &MUX_TYPE, &STEER_MUX}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_INVALID_STEER_MUX_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH), fapi::RC_MSS_MAINT_INVALID_STEER_MUX_DRAM_WIDTH}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_INVALID_STEER_MUX_RANK}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MUX_TYPE), fapi::RC_MSS_MAINT_INVALID_STEER_MUX_MUX_TYPE}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STEER_MUX), fapi::RC_MSS_MAINT_INVALID_STEER_MUX_STEER_MUX}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &RANK, &MUX_TYPE, &STEER_TYPE, &SYMBOL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_RANK}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MUX_TYPE), fapi::RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_MUX_TYPE}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STEER_TYPE), fapi::RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_STEER_TYPE}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL), fapi::RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_SYMBOL}}; RC.addErrorInfo(l_objects, l_entries, 5);}

#define RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &MUX_TYPE, &STEER_TYPE, &SYMBOL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH), fapi::RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_DRAM_WIDTH}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_RANK}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MUX_TYPE), fapi::RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_MUX_TYPE}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STEER_TYPE), fapi::RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_STEER_TYPE}, {fapi::ReturnCode::EI_TYPE_FFDC, 5, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL), fapi::RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_SYMBOL}}; RC.addErrorInfo(l_objects, l_entries, 6);}

#define RC_MSS_MAINT_NO_X8_ECC_SPARE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_NO_X8_ECC_SPARE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_NO_X8_ECC_SPARE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &DRAM_WIDTH, &RANK, &MUX_TYPE, &STEER_TYPE, &SYMBOL}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_NO_X8_ECC_SPARE_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DRAM_WIDTH), fapi::RC_MSS_MAINT_NO_X8_ECC_SPARE_DRAM_WIDTH}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_NO_X8_ECC_SPARE_RANK}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MUX_TYPE), fapi::RC_MSS_MAINT_NO_X8_ECC_SPARE_MUX_TYPE}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(STEER_TYPE), fapi::RC_MSS_MAINT_NO_X8_ECC_SPARE_STEER_TYPE}, {fapi::ReturnCode::EI_TYPE_FFDC, 5, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL), fapi::RC_MSS_MAINT_NO_X8_ECC_SPARE_SYMBOL}}; RC.addErrorInfo(l_objects, l_entries, 6);}

#define RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA, &RANK, &SYMBOL, &X4ECCSPARE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_MBA}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(RANK), fapi::RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_RANK}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(SYMBOL), fapi::RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_SYMBOL}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(X4ECCSPARE), fapi::RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_X4ECCSPARE}}; RC.addErrorInfo(l_objects, l_entries, 4);}

#define RC_MSS_MAINT_NO_UE_TRAP_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MAINT_NO_UE_TRAP_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MAINT_NO_UE_TRAP_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MBA); fapi::fapiCheckType<const fapi::Target *>(&MBA); fapi::fapiCheckType<const fapi::Target *>(&MBA); {const void * l_objects[] = {&UE_TRAP0, &UE_TRAP1, &MBMCT, &MBMMR, &MBSTR, &MBA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UE_TRAP0), fapi::RC_MSS_MAINT_NO_UE_TRAP_UE_TRAP0}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(UE_TRAP1), fapi::RC_MSS_MAINT_NO_UE_TRAP_UE_TRAP1}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMCT), fapi::RC_MSS_MAINT_NO_UE_TRAP_MBMCT}, {fapi::ReturnCode::EI_TYPE_FFDC, 3, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBMMR), fapi::RC_MSS_MAINT_NO_UE_TRAP_MBMMR}, {fapi::ReturnCode::EI_TYPE_FFDC, 4, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBSTR), fapi::RC_MSS_MAINT_NO_UE_TRAP_MBSTR}, {fapi::ReturnCode::EI_TYPE_CALLOUT, 5, fapi::CalloutPriorities::HIGH, 0}, {fapi::ReturnCode::EI_TYPE_DECONF, 5, 0, 0}, {fapi::ReturnCode::EI_TYPE_GARD, 5, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 8);}

#define RC_MSS_MCBIST_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MCBIST_TIMEOUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MCBIST_TIMEOUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_MEMDIAGS_RESTORE_REPAIRS_EXCEEDED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MEMDIAGS_RESTORE_REPAIRS_EXCEEDED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MEMDIAGS_RESTORE_REPAIRS_EXCEEDED_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MEMDIAGS_RESTORE_REPAIRS_EXCEEDED_MBA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_MSS_MEMDIAGS_UE_OR_SUE_IN_LAST_PATTERN_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_MEMDIAGS_UE_OR_SUE_IN_LAST_PATTERN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_MEMDIAGS_UE_OR_SUE_IN_LAST_PATTERN_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MBA}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MBA), fapi::RC_MSS_MEMDIAGS_UE_OR_SUE_IN_LAST_PATTERN_MBA}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_MSS_NUM_MBA_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_NUM_MBA_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_NUM_MBA_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SETUP_BARS_NM_ALT_BAR_ERR_ADD_ERROR_INFO(RC) 

#define RC_MSS_SETUP_BARS_M_ALT_BAR_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SETUP_BARS_M_ALT_BAR_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SETUP_BARS_M_ALT_BAR_ERR_ADD_ERROR_INFO(RC) 

#define RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&MCS_POS, &GROUP_INDEX_A, &GROUP_INDEX_B}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(MCS_POS), fapi::RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_MCS_POS}, {fapi::ReturnCode::EI_TYPE_FFDC, 1, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP_INDEX_A), fapi::RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_GROUP_INDEX_A}, {fapi::ReturnCode::EI_TYPE_FFDC, 2, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(GROUP_INDEX_B), fapi::RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_GROUP_INDEX_B}}; RC.addErrorInfo(l_objects, l_entries, 3);}

#define RC_MSS_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_IMP_INPUT_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_IMP_INPUT_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_INVALID_DRAM_GEN_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INVALID_DRAM_GEN_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INVALID_DRAM_GEN_ADD_ERROR_INFO(RC) 

#define RC_MSS_INVALID_FREQ_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_INVALID_FREQ_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_INVALID_FREQ_ADD_ERROR_INFO(RC) 

#define RC_MSS_SLEW_CAL_ERROR_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_SLEW_CAL_ERROR_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_SLEW_CAL_ERROR_ADD_ERROR_INFO(RC) 

#define RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_ADD_ERROR_INFO(RC) {const void * l_objects[] = {&DEVICE_TYPE}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_FFDC, 0, fapi::ReturnCodeFfdc::getErrorInfoFfdcSize(DEVICE_TYPE), fapi::RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_DEVICE_TYPE}}; RC.addErrorInfo(l_objects, l_entries, 1);}

#define RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_MIXING_UNSUPPORTED_ADD_ERROR_INFO(RC) 

#define RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_DDR_TYPE_REQUIRED_VOLTAGE_ADD_ERROR_INFO(RC) 

#define RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION_CALL_FUNCS_TO_COLLECT_FFDC(RC) 
#define RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION_CALL_FUNCS_TO_COLLECT_REG_FFDC(RC) 
#define RC_MSS_VOLT_TOLERATED_VOLTAGE_VIOLATION_ADD_ERROR_INFO(RC) fapi::fapiCheckType<const fapi::Target *>(&MASTER_CHIP); {const void * l_objects[] = {&MASTER_CHIP}; fapi::ReturnCode::ErrorInfoEntry l_entries[] = {{fapi::ReturnCode::EI_TYPE_DECONF, 0, 0, 0}}; RC.addErrorInfo(l_objects, l_entries, 1);}

namespace fapi
{

/**
 * @brief Enumeration of FFDC identifiers
 */
enum HwpFfdcId
{
    RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_DATA_EXISTING_RING_BYTE = 0x70590291,
    RC_HWP_EXEC_INITFILE_TEST_INCORRECT_NUM_MBAS_FOUND_FFDC_IF_TEST_NUM_MBAS_FOUND = 0xd07646d2,
    RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_SIZE = 0xb90d6a25,
    REG_FFDC_MBS_FIR_REGS = 0xfb8d9f71,
    RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_MBMCC = 0x632db60f,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_EFF_DIMM_SIZE0 = 0x0b65b4f2,
    RC_PROC_XIPC_RS4_COMPRESS_ERROR_RC_LOCAL = 0xedce541d,
    RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_STATUS_REG = 0xd5280d51,
    RC_PROC_PREP_MASTER_WINKLE_SBE_NOT_RUNNING_SBE_STATUS = 0xea4c31d6,
    RC_PROC_FAB_SMP_FABRIC_NODE_ID_ATTR_ERR_ATTR_DATA = 0x8337f2a5,
    RC_PROCPM_SPCWKUP_CODE_BAD_ENTITY_I_ENTITY = 0xd81da3dc,
    RC_PMPROC_PFETLIB_CODE_FAULT_EX = 0x6a51407c,
    RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_BASE_ADDR = 0x41da23fd,
    RC_MSS_MAINT_INVALID_CMD_MBA = 0xbad5c4db,
    RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_I_OPERATION = 0xa598b7ab,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_RING_SIZE = 0xf03580fe,
    RC_PMPROC_PFETLIB_RAIL_OFF_OPERATION = 0x01d4da3a,
    RC_MSS_MAINT_X4_SYMBOL_ON_READ_MARKSTORE = 0xed834ffb,
    RC_PROC_SLWB_MEMORY_ERROR_RC_LOCAL = 0xb8accba9,
    REG_FFDC_PROC_FIRST_OTPROM_INSTRUCTIONS = 0xb19e9faf,
    RC_MSS_MAINT_START_NOT_RESET_CMD_TYPE = 0x1cb88804,
    RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_ENTRYOFFSET = 0x5a947850,
    IO_FIR_SPARES_DEPLOYED_FIR_RC_CHIP_TARGET = 0x85c5bd90,
    RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_PASSED_SIZE = 0xd9ea036e,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_NUM_POLLS = 0x42062d47,
    RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_MBA = 0x8f52e7af,
    RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_RANK = 0x6dd2d2a7,
    RC_PROC_XIPC_INTERNAL_IMAGE_ERR_RC_LOCAL = 0x6cfa062b,
    RC_PROC_XIPC_GEN_SCOM_ERROR_RC_LOCAL = 0xbbe42699,
    RC_PROC_FAB_SMP_MCS_INTERLEAVED_ATTR_ERR_ATTR_DATA = 0x5f17eb4c,
    RC_PROC_XIPC_PG_RING_TOO_LARGE_DATA_RING_SIZE_MAX = 0x31757138,
    RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_SIZE_OF_BUF1 = 0x798b8a19,
    RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_END_ADDRESS = 0x86c623de,
    RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_MBA = 0x4dd51821,
    RC_PROC_STOP_DEADMAN_TIMER_BAD_ISTEP_NUM_SBE_VITAL = 0xc8383508,
    RC_PROC_EXTRACT_SBE_RC_IMAGE_POINTER_NULL_CHIP_IN_ERROR = 0x1d404a99,
    RC_PROC_GETTRACEARRAY_INTERNAL_ERR_ERR_DATA = 0x5fde62f0,
    RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_MBA_TARGET = 0xab70075e,
    RC_MSS_MAINT_INVALID_CHIP_INDEX_MBA = 0x34a020f5,
    RC_MSS_MAINT_X4_SYMBOL_ON_READ_MBA = 0x5ffd7a23,
    RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_NODE_SIZE = 0x404ec1b7,
    RC_PROC_START_CLOCKS_XBUS_CHIPLET_CLK_STATUS_ERR_EXPECTED_REG = 0xba96e7df,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_MSS_INTERLEAVE_ENABLE = 0xf8468e45,
    RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_SETTING_SEEPROM_ADDR_CHIP_IN_ERROR = 0x4cb9842a,
    RC_PROC_STOP_DEADMAN_TIMER_BAD_SUBSTEP_NUM_SBE_VITAL = 0xdfdc0603,
    RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_CMD_TYPE = 0x610dbf11,
    RC_PROC_EXTRACT_SBE_RC_IMAGE_POINTER_NULL_ADDRESS = 0x0781b85d,
    RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_READING_SEEPROM_ADDRESS = 0xf4519682,
    RC_PROC_XIPC_PR_RING_TOO_LARGE_DATA_RING_SIZE_REQ = 0xbf4b9853,
    RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_MAX = 0xd344d648,
    RC_OPT_MEMMAP_MIRROR_GROUP_ERR_GROUP_SIZE = 0xcbfcf94e,
    RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_EXPECTED_REG = 0xfe7ba21b,
    IO_FIR_LANE_RX_PARITY_ERROR_RC_LANE_ID = 0xcafab7ef,
    RC_PROC_SELECT_CLOCK_CONFIG_ERR_ATTACHED = 0x02458c5d,
    REG_FFDC_DDR_PHY_FIR_REGS = 0xa4f8cd85,
    IO_FIR_GROUP_TX_PARITY_ERROR_RC_TX_ERROR_REG = 0xca53bfcb,
    RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_MBA = 0xc3560774,
    RC_PROC_A_X_PCI_DMI_PLL_SETUP_PCIE_PLL_NO_LOCK_LOCK_STATUS = 0xadc32093,
    RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_DATA_IMG_SIZE_FIXED = 0x3fe29fa0,
    RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_MCS_POS = 0x1f419391,
    RC_PROCPM_PFETLIB_BABYSTEPPER_WAKEUP_TIMEOUT_EX = 0x1cd705e7,
    RC_PROC_EXTRACT_SBE_RC_SEEPROM_MAGIC_NUMBER_MISMATCH_CHIP_IN_ERROR = 0xf99834c2,
    RC_P8_FORCE_FREQ_TARGET_MODE_ERROR_FMAX = 0x28196d78,
    RC_PROC_XIPC_CHIPLET_ID_MESS_DATA_CHIPLET_ID_REQ = 0x216a28ae,
    REG_FFDC_PROC_CFAM_REGISTERS = 0x5d934cc9,
    RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_SLW_SBE_ADDRESS = 0x23f71d98,
    IO_FIR_BUS_RX_PARITY_ERROR_RC_RX_ERROR_REG = 0x967befff,
    RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_MAX_PLL_RING_SIZE = 0xbacdaf95,
    RC_PROC_XIPC_APPEND_SLW_SECTION_ERROR_RC_LOCAL = 0x8e1e771c,
    RC_MSS_MAINT_INVALID_CMD_CMD_TYPE = 0xd9b279b4,
    RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_DATA0 = 0x408ef566,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MIRROR_BASES = 0xcd2a6259,
    RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_SIZE = 0x03e922dd,
    RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_CHIP_SIZE = 0x72f2f851,
    RC_PROC_ADU_COHERENT_UTILS_STATUS_MISMATCH_STATUS_DATA = 0xad834f1d,
    RC_MSS_MAINT_ZERO_DDR_FREQ_MBA = 0x8858ad83,
    RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_RING_BLOCK_SIZEOFTHIS = 0xeb2c0baf,
    REG_FFDC_PROC_XBUS_CLOCK_CONTROLLER = 0x762052bc,
    RC_PROC_BUILD_SMP_F_CMD_RATE_ERR_CMD_RATE = 0x0048cfdd,
    REG_FFDC_PROC_ABUS_CLOCK_CONTROLLER = 0x6efafc00,
    RC_PROC_SLWB_UNKNOWN_XIP_ERROR_RC_LOCAL = 0xd0c4cc96,
    RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0xd6c027ea,
    RC_PROCPM_ACTIVATE_CORES_TIMEOUT_POLLCOUNT = 0x2a6dcfdd,
    RC_PROC_XIPC_IMAGE_UPDATE_ERROR_RC_LOCAL = 0xd15f7cce,
    RC_PROC_XIPC_CHIPLET_ID_MESS_DATA_CHIPLET_ID_VPD = 0xc77a31e6,
    RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_CHIP_BASE_ADDR = 0x86fd75d5,
    RC_PROCPM_ACTIVATE_CORES_BREAKPOINT_SCOREBOARD = 0x87050794,
    RC_PROC_SLWB_IMGBUILD_ERROR_RC_LOCAL = 0x41603bd6,
    RC_PROC_ADU_COHERENT_UTILS_INVALID_TSIZE_TSIZE = 0x2e7c2061,
    RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_SIZE = 0x74f81552,
    RC_OPT_MEMMAP_MIRROR_BASE_ERR_ADDR = 0xb46436be,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_OP = 0x70a4f7cf,
    RC_MBVPD_INSUFFICIENT_VPD_RETURNED_KEYWORD = 0xcfdb2d97,
    RC_PROC_XIPC_XIP_DELETE_SECTION_ERROR_RC_LOCAL = 0x218e0f83,
    RC_MSS_MAINT_INVALID_STEER_MUX_RANK = 0x564415b9,
    RC_PROC_SETUP_BARS_AS_MMIO_BAR_ATTR_ERR_SIZE = 0xfdccf2bf,
    RC_PROC_ADU_UTILS_INVALID_ARGS_ARGS = 0x94612d0b,
    RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_DATA_BUF2_SIZE = 0xf4175681,
    RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_CHIP_ID = 0xa36cab2d,
    RC_PROC_L2_FLUSH_UNKNOWN_PLATFORM_RC_PLATFORM = 0x49c484ea,
    RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_FIR_DATA = 0xf6d684a9,
    RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_DATA_OVERLAY_RING_BYTE = 0x1dc83fde,
    RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_STATUS0_DATA = 0x5a8964df,
    REG_FFDC_MBA_FIR_REGS = 0x499487ab,
    RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_READING_SEEPROM_CHIP_IN_ERROR = 0x018582c7,
    RC_PROC_XIPC_WRITE_VPD_RING_TO_SLW_IMAGE_ERROR_RC_LOCAL = 0x15ffc277,
    RC_CEN_XIPC_UNSPECIFIED_IMAGE_ERR_RC_LOCAL = 0x6c4ebfdc,
    RC_PROC_XIPC_IMGBUILD_ERROR_RC_LOCAL = 0x535916c1,
    RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_SIZE = 0x0721bf7c,
    RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_MBA = 0x85f0b0ac,
    RC_PROC_GETL3CAC_INVALID_CGC_ARGS = 0xcb32111d,
    RC_PMPROC_PFETLIB_RAIL_ON_DOMAIN = 0xf185c4b2,
    IO_GCR_WRITE_MISMATCH_RC_WRITE_BUF = 0xbc7b90a4,
    RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_SIZE_OF_BUF1 = 0x0631ac08,
    RC_MSS_MAINT_INVALID_SYMBOL_INDEX_DRAM_WIDTH = 0x078ce5ed,
    RC_PROC_START_SBE_FAILED_TO_AUTO_START_SBE_SBE_VITAL = 0xf97e114f,
    RC_PROC_SLWB_APPEND_SLW_SECTION_ERROR_RC_LOCAL = 0xa79bbe0d,
    RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_MUX_TYPE = 0xbce1fbea,
    RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_CHIP_ID = 0x61bae87c,
    RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_FFDC_DATA_4 = 0xfbe823f5,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MIRROR_BASE = 0x482fd223,
    RC_PROC_A_X_PCI_DMI_PLL_SETUP_DMI_PLL_NO_LOCK_LOCK_STATUS = 0x1a630cb6,
    RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CMD_TYPE = 0xf3ca9411,
    RC_PROCPM_SPCWKUP_TIMEOUT_EX = 0xea3e3932,
    RC_MSS_MAINT_INVALID_DIMM_CNFG_MBA = 0xf7221f0a,
    RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_CMD_REG = 0x813ca7a0,
    REG_FFDC_PROC_SLW_REGISTERS = 0x01da27ff,
    RC_MSS_MAINT_CMD_IN_PROGRESS_CMD_TYPE = 0x502d5a72,
    REG_FFDC_PROC_PCIE_CLOCK_CONTROLLER = 0x3f383e12,
    RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_FIR_REG = 0xcd023ceb,
    RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_MBA = 0x553bd9e3,
    RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_CHIP_BASE_ADDR = 0xee101ab2,
    RC_PROC_XIPC_XIP_FIND_ERROR_RC_LOCAL = 0xc6002377,
    RC_PROC_PBA_UTILS_BAD_PBA_REGION_ERR_DATA = 0x2f241221,
    RC_PROCPM_ACTIVATE_CORES_BREAKPOINT_SLWCONTROL = 0x3e6dc755,
    RC_PROC_BUILD_SMP_X_CMD_RATE_ERR_CMD_RATE = 0xa5c9d9ef,
    IO_FIR_GROUP_RX_PARITY_ERROR_RC_CHIP_TARGET = 0xb7f9414a,
    RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_MAX_PLL_RING_SIZE = 0x86c5c24b,
    RC_PROC_BUILD_SMP_INVALID_OPERATION_ERR_OP = 0x8e9931be,
    RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_NODE_SIZE = 0x8534f570,
    RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_NODE_BASE_ADDR = 0x2106cb16,
    RC_MSS_MEMDIAGS_RESTORE_REPAIRS_EXCEEDED_MBA = 0x94e556b5,
    RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_UNIT = 0xc1bc569b,
    RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_DATA1 = 0x08628ff9,
    RC_TEST_ERROR_A_UNIT_TEST_FFDC_DATA_INTEGER = 0x8e6db82f,
    RC_MSS_MAINT_INVALID_CMD_MBAFIR = 0xd81d755c,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_CHIP_UNIT_POS_MBA0 = 0x9261dda2,
    RC_PROC_CEN_FRAMELOCK_FL_P8_FIR_ERR_FIR_REG = 0xd9d11644,
    RC_PROC_CONTINUE_SBE_SECURITY_BLOCKS_CONTINUE_SECURITY_SETUP = 0x09025005,
    RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_ERROR = 0xe5e32a3d,
    RC_PROCPM_SPCWKUP_TIMEOUT_ENTITY = 0x4615bbb6,
    RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_RANK = 0xe40808c8,
    RC_MSS_MAINT_CMD_IN_PROGRESS_MBMSR = 0x8578f104,
    RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_MUX_TYPE = 0x5e0072aa,
    RC_PROC_BUILD_SMP_INVALID_GROUP_SIZE_ERR_SIZE = 0x72f511c3,
    RC_MSS_MAINT_INVALID_ADDR_MBMCT = 0xedf546e1,
    RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_FIR_REG = 0x3b2a2cf9,
    RC_CEN_XIPC_IMGBUILD_ERROR_RC_LOCAL = 0xbc2b152e,
    RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_DATA_BUF1_SIZE = 0x183611de,
    IO_FIR_RECALIBRATION_ERROR_RC_CHIP_TARGET = 0xd60380c8,
    RC_MSS_MAINT_INVALID_ADDR_MBAFIR = 0xa9010474,
    RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_SYMBOL_MARK = 0x7382998c,
    RC_OPT_MEMMAP_MIRROR_GROUP_ERR_GROUP_BASE = 0xb7834299,
    RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_SIZE = 0x63e7ab7a,
    RC_PROC_XIPC_UNKNOWN_ERROR_RC_LOCAL = 0x1cded477,
    IO_GCR_WRITE_MISMATCH_RC_READ_BUF = 0x2baf3c63,
    REG_FFDC_PROC_MBOX_REGISTERS = 0x0a10fb43,
    RC_MVPD_EX_L2_SINGLE_MEMBER_ENABLE_BAD_FIELD_SIZE_FIELD_SIZE = 0x98d5b572,
    REG_FFDC_DMI_FIR_REGS = 0x1ac6556d,
    IO_FIR_GROUP_TX_PARITY_ERROR_RC_CHIP_TARGET = 0x28b78ae3,
    RC_OPT_MEMMAP_MIRROR_GROUP_ERR_GROUP = 0xc69a74e3,
    RC_PROC_EXTRACT_SBE_RC_MODEL_ERROR_GETTING_SCOM_ERROR = 0x43fc27e9,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_MSS_MEM_MC_IN_GROUP = 0xd9ac1efc,
    RC_PROC_XIPC_PR_RING_TOO_LARGE_DATA_RING_SIZE_MAX = 0xe15a6e5c,
    RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_FREQ_CORE_FLOOR = 0xa43e0b38,
    RC_MSS_MAINT_INVALID_SYMBOL_INDEX_SYMBOL_MARK = 0xe95533ee,
    RC_MSS_MAINT_INVALID_STEER_MUX_STEER_MUX = 0x8ae4e8c1,
    RC_PROC_XIPC_VPD_KEYWORD_RESOLVE_ERROR_DATA_RING_LIST_VPD_KEYWORD = 0xd097cb88,
    RC_PROC_FAB_SMP_PCIE_NOT_F_LINK_ATTR_ERR_ATTR_DATA = 0x6660e7f8,
    RC_PROC_EXTRACT_SBE_RC_MODEL_ERROR_GETTING_SCOM_ADDRESS = 0xff364219,
    RC_PROCPM_SPCWKUP_TIMEOUT_PMGP0 = 0xedeb6fce,
    RC_PROCPM_PFETLIB_TIMEOUT_DOMAIN = 0x88752471,
    RC_PROCPM_SPCWKUP_TIMEOUT_POLLCOUNT = 0x55b45e2e,
    RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_DRAM_WIDTH = 0x887dd493,
    RC_PROC_SETUP_BARS_INTP_BAR_ATTR_ERR_BASE_ADDR = 0x119e2ec1,
    RC_PROC_XIPC_BUF_SIZE_NOT_FIXED_DATA_BUF_SIZE_FIXED = 0x20eed4f2,
    RC_OPT_MEMMAP_MIRROR_GROUP_ERR_MIRROR_BASES = 0x7440e655,
    RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_MEM_BASES = 0x320cf4ba,
    REG_FFDC_PROC_SBE_REGISTERS = 0xd767afc2,
    RC_PMPROC_PFETLIB_RAIL_ON_OPERATION = 0x334bcfe5,
    RC_PMPROC_PFETLIB_BAD_OP_EX = 0x15f5405b,
    RC_PROC_CEN_FRAMELOCK_FRTL_CEN_FIR_ERR_FIR_REG = 0x21d1f7bd,
    RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_STATUS_DATA = 0x2b61a912,
    REG_FFDC_PROC_L2_REGISTERS = 0x4c622f4f,
    RC_PROC_SLWB_MS_INTERNAL_IMAGE_ERR_RC_LOCAL = 0x8478d062,
    RC_PROC_SLWB_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0x4c2a2140,
    REG_FFDC_PROC_NEST_CLOCK_CONTROLLER = 0xfe5c1c9d,
    RC_PROC_XIPC_PORE_INLINE_RS4_LAUNCH_CREATE_ERROR_RC_LOCAL = 0x28fbee0e,
    RC_PROC_SETUP_BARS_MIRRORED_RANGE_ATTR_ERR_BASE_ADDR = 0x105f0b20,
    RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_MBA = 0xcc7e644f,
    RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_RANK = 0xbc554097,
    RC_OPT_MEMMAP_MIRROR_GROUP_ERR_MIRROR_SIZES = 0x52370939,
    RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_DRAM_WIDTH = 0x24383396,
    RC_MSS_MAINT_X4_SYMBOL_ON_READ_DRAM_WIDTH = 0xdb94dba2,
    RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_FFDC_DATA_1 = 0xc2d4016e,
    RC_OPT_MEMMAP_GROUP_PARTNER_ERR_GROUP = 0xfabdbe1c,
    RC_PROC_PCBS_CODE_BAD_MODE_MODE = 0x63e7c8ce,
    RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_DIMM = 0x965649ec,
    RC_MSS_MAINT_PUT_MARK_STORE_BAD_INPUT_RANK = 0xff72b733,
    RC_MSS_MAINT_NO_X8_ECC_SPARE_SYMBOL = 0xb204c9cd,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MEM_BASES = 0x3b80efb5,
    RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_OLD = 0x12ea4e49,
    RC_INITFILE_TGT_NUM_OUT_OF_RANGE_FFDC_IF_NUM_TGTS_PASSED_IN = 0x9e4ca7d3,
    RC_MSS_MAINT_STOP_NOT_RESET_MBMCC = 0x69f7f099,
    RC_PROC_SLWB_WF_CREATION_ERROR_RC_LOCAL = 0x631c839b,
    RC_PROC_SETUP_BARS_FSP_MMIO_MASK_ATTR_ERR_SIZE = 0xe9c839d8,
    IO_FIR_TOO_MANY_BUS_ERROR_RC_CHIP_TARGET = 0xd1dc3fcd,
    REG_FFDC_INVALID_ADDR = 0x67d6d7a6,
    RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_NUMBER_OF_ATTEMPTS = 0x60e7e5e9,
    RC_PROC_PBA_UTILS_INVALID_ARGS_ARGS = 0xb0a96f65,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MEM_SIZES = 0x5a6b4012,
    RC_PROC_MANUAL_SBE_START_FAILED_TO_START_SBE_SBE_VITAL = 0x90031801,
    RC_PROC_FAB_SMP_EPSILON_TABLE_TYPE_ATTR_ERR_ATTR_DATA = 0x18f2de51,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_CEN_POS = 0x0d0eecb6,
    RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_ISTEP_NUM = 0x3f38555e,
    RC_REPAIR_RING_INVALID_MAGIC_MAGIC = 0x44353af3,
    RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_SYMBOL_MARK = 0xcace50fd,
    RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_GROUP_INDEX_A = 0x8c4a4994,
    RC_PROC_GETL3CAC_INVALID_MEMBER_ARGS = 0x2f085ac9,
    RC_PROC_SELECT_CLOCK_MUX_SWIZZLE_ERR_REFCLOCK_BIT = 0xd2bbf72e,
    RC_PROC_EXTRACT_SBE_RC_UNEXPECTED_OTPROM_HALT_CHIP_IN_ERROR = 0x809401ea,
    RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_VALUE = 0xba62f5bb,
    RC_PMPROC_PFETLIB_CODE_FAULT_DOMAIN = 0xa6b2d85c,
    RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_DATA_SIZE_OF_BUF1 = 0x73d96070,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_NODE_CURR = 0x6e1220c0,
    RC_MSS_MAINT_X4_SYMBOL_ON_WRITE_CHIP_MARK = 0x0069d6b3,
    RC_MSS_MAINT_INVALID_ADDR_CMD_TYPE = 0xb820b2e4,
    RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_SIZE = 0xa0a6c7d7,
    RC_MSS_MAINT_NO_UE_TRAP_MBMMR = 0x9d6c8219,
    RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_MBA = 0xcf0d284b,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_CHIP_UNIT_POS_MBA1 = 0xd593b1bb,
    RC_PROC_EXTRACT_SBE_RC_UNKNOWN_ENGINE_ENGINE = 0x5c1289c8,
    RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0xef5303ba,
    RC_PROC_SLWB_RING_BLOCK_TOO_LARGE_DATA_RING_BLOCK_SIZEOFTHIS = 0x82695fae,
    RC_PROC_XIPC_BUF_PTR_ERROR_DATA_BUF2_PTR = 0xb0f1141f,
    RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_MBECCFIR = 0xd2750b08,
    RC_MSS_SETUP_BARS_MULTIPLE_GROUP_ERR_GROUP_INDEX_B = 0xef394c89,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_RING_ID = 0xba81479b,
    RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_SETTING_SEEPROM_ADDR_ADDRESS = 0x6d4a9a3b,
    RC_MSS_MAINT_NO_UE_TRAP_MBMCT = 0x875f4850,
    RC_TEST_ERROR_A_UNIT_TEST_FFDC_DATA_BUF = 0xbfc180c9,
    RC_MSS_MAINT_ECC_DISABLED_MBSECC = 0xb7d0b6bf,
    RC_MSS_MAINT_CCS_MUX_NOT_MAINLINE_CCS_MODE = 0xd4933fd8,
    RC_PROC_SLWB_IMAGE_SIZE_NOT_FIXED_DATA_IMG_SIZE_MAX = 0xae8aff0e,
    RC_PROC_SLWB_RING_RETRIEVAL_ERROR_RC_LOCAL = 0xfafdb4b0,
    RC_PROC_XIPC_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL = 0x85737c0a,
    RC_PROC_SETUP_BARS_MIRRORED_RANGE_ERR_BASE_ADDR = 0x958c7034,
    RC_MSS_MAINT_NO_UE_TRAP_MBSTR = 0xc6f50f95,
    RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_ATTRIBUTE_RING_SIZE = 0xff7dc991,
    RC_MSS_MAINT_NO_X8_ECC_SPARE_MUX_TYPE = 0x51861da7,
    RC_PROC_SETUP_BARS_NODE_MIRRORED_RANGE_OVERLAP_ERR_NODE_BASE_ADDR = 0x88835e64,
    RC_PROC_XIPC_MS_INTERNAL_IMAGE_ERR_RC_LOCAL = 0xee1d1c92,
    IO_FIR_LANE_TX_PARITY_ERROR_RC_CHIP_TARGET = 0x95726da8,
    RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_PORT = 0xc1843f4c,
    RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_MAX = 0x37ce83d3,
    RC_PROC_START_CLOCKS_ABUS_CHIPLET_CLK_STATUS_ERR_STATUS_REG = 0x836b3f7e,
    RC_PROC_SLWB_INTERNAL_IMAGE_ERR_RC_LOCAL = 0x733fb976,
    RC_TEST_DQ_BAD_DATA_FFDC_DATA1 = 0xb03bd885,
    RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_SYMBOL = 0xd51ca8e5,
    RC_PROC_PBA_COHERENT_UTILS_INVALID_ARGS_START_ADDRESS = 0x4d45d26c,
    RC_PROC_EXTRACT_SBE_RC_FROM_ADDR_CODE_BUG_SBE_ADDRESS = 0x3e0d5fb5,
    RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_SIZE_OF_RS4_LAUNCH = 0x14c00ada,
    RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_BASE_ADDR = 0x65807715,
    IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_CHIP_TARGET = 0xa696d29d,
    IO_FIR_TOO_MANY_BUS_ERROR_RC_BUS_ERROR_REG = 0xe6454293,
    RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_LOOPCOUNT = 0x66729be8,
    RC_PMPROC_PFETLIB_RAIL_OFF_EX = 0x92dbcc6d,
    RC_PROC_FAB_SMP_ASYNC_SAFE_MODE_ATTR_ERR_ATTR_DATA = 0x9e1cb122,
    RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_STATUS_REG = 0xb5ad3d7c,
    RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_DATA_SIZE_RS4_COMPRESS_CONTAINER = 0xb3d3f077,
    RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_START_ADDRESS = 0x0cb69fae,
    RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_FFDC_DATA_2 = 0x4dcd0902,
    RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ERRPT0_DATA = 0xa3d264ad,
    RC_PROC_SETUP_BARS_PSI_BAR_ATTR_ERR_BASE_ADDR = 0x7f6fde45,
    RC_MSS_MAINT_NO_X8_ECC_SPARE_DRAM_WIDTH = 0x05b91081,
    RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_DATA_BUF_SIZE_FIXED = 0x8d852e31,
    RC_MSS_MAINT_INVALID_CHIP_INDEX_SYMBOL_MARK = 0x3b13bd07,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_POS = 0xdc09f88d,
    RC_PROC_SLWB_BUF_PTR_ERROR_DATA_BUF2_PTR = 0x9488ef75,
    RC_PROC_XIPC_UNEXPECTED_FIELD_SIZE_DATA_SIZE_VPD_FIELD = 0x51354ed8,
    RC_INITFILE_INCORRECT_VER_FFDC_IF_VER = 0x4002ab96,
    RC_PROCPM_ACTIVATE_ERROR_SCOREBOARD = 0x4d7c3193,
    RC_MSS_MAINT_ECC_DISABLED_CMD_TYPE = 0x2b5f2104,
    RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_SYMBOL = 0xd2bf15db,
    RC_PROC_BUILD_SMP_EPSILON_RANGE_ERR_MAX_HW_VALUE = 0x5e902604,
    IO_FIR_LANE_RX_PARITY_ERROR_RC_CHIP_TARGET = 0x7a54e0fa,
    RC_MBVPD_INVALID_ATTRIBUTE_ID_ATTR_ID = 0x1d96f502,
    RC_OPT_MEMMAP_ALLOC_ERR_ALLOC_INDEX = 0x6bedbb42,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_IMAGE_SIZE = 0x1d35d1b7,
    RC_MSS_MAINT_ZERO_DDR_FREQ_CMD_TYPE = 0x0a1d8195,
    RC_PROC_START_CLOCKS_PCIE_CHIPLET_CLK_STATUS_ERR_EXPECTED_REG = 0x5959199a,
    RC_PROC_BUILD_SMP_ADU_STATUS_MISMATCH_STATUS_DATA = 0x6bdb967c,
    RC_MSS_DIMM_POWER_CURVE_DATA_LAB_FFDC_DATA_2 = 0xe03f98c0,
    RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_FIR_EXP_REG = 0x2a518502,
    RC_PROC_PCBS_CODE_SAFE_FSM_TIMEOUT_PMSR = 0xb1e45665,
    RC_PROC_OHA_CODE_PUTGETSCOM_FAILED_ERRORS = 0xd1ed366a,
    RC_MSS_MAINT_NO_MEM_CNFG_MBAXCR = 0xf68c7d97,
    RC_MSS_MAINT_CMD_TIMEOUT_CMD_TYPE = 0x8e548b74,
    RC_PROC_XIPC_RS4_COMPRESS_SIZE_MESS_DATA_SIZE_RS4_COMPRESS_RETURN = 0xa335905d,
    RC_MSS_MAINT_INVALID_ADDR_MBA = 0xc3b5a390,
    RC_MSS_MAINT_CMD_IN_PROGRESS_MBMCT = 0x89e80c30,
    RC_PROCPM_SPCWKUP_PUTGETSCOM_FAILED_ERRORS = 0xa4fb9f7c,
    RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0xa93b020c,
    RC_BAD_DQ_DIMM_BAD_PARAM_FFDC_RANK = 0x0c386e0b,
    RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_IOP_DATA = 0x3e4711ab,
    RC_PROC_L2_FLUSH_CMD_TIMEOUT_RC_CMD_REG_ADDR = 0x6b14227b,
    RC_PROC_L2_FLUSH_CMD_ERROR_RC_CMD_REG = 0x2178c238,
    IO_FIR_GROUP_RX_PARITY_ERROR_RC_RX_ERROR_REG = 0x87332347,
    RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_DATA_IMG_SIZE_WORK_SPACE = 0x0c01c73b,
    RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADDRESS1 = 0x496c6a84,
    RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_RANGE = 0x044983c7,
    RC_MSS_MAINT_ECC_DISABLED_MBA = 0xcdf9108b,
    RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_CHIP_MARK = 0xaa6d906e,
    RC_MSS_MAINT_INVALID_SYMBOL_INDEX_RANK = 0x30a8a8e9,
    RC_PROC_PREP_MASTER_WINKLE_BAD_SUBSTEP_NUM_SBE_VITAL = 0x452274c9,
    RC_MSS_DIMM_NOT_FOUND_IN_POWER_TABLE_FFDC_DATA_3 = 0x47049850,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_RC_LOCAL = 0x656ac84d,
    RC_PROC_XIPC_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_NEW = 0x5044796d,
    RC_PROC_XIPC_PERFORM_RING_DATACARE_ERROR_RC_LOCAL = 0xbdbd1f51,
    RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_DATA_BUF2_SIZE = 0x46c52ac2,
    RC_MSS_MAINT_INVALID_SYMBOL_TO_STEER_STEER_TYPE = 0x46825997,
    RC_PROC_FAB_SMP_EPSILON_GB_DIRECTION_ATTR_ERR_ATTR_DATA = 0x186833da,
    RC_PROC_XIPC_PG_RING_TOO_LARGE_DATA_RING_SIZE_REQ = 0xf6427c80,
    RC_REPAIR_RING_NOT_FOUND_RING_MODIFIER = 0x121ad260,
    RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_FFDC_DATA_1 = 0xb06c49e0,
    RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_SLW_SBE_ADDRESS = 0xca66d402,
    RC_SBE_FABRICINIT_FBC_STOPPED_ERR_ADU_PMISC_MODE_0x0202000B = 0x31c68ef4,
    RC_MSS_MAINT_NO_MEM_CNFG_MBA = 0x353b62b4,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MEM_BASE = 0x1e0b22ac,
    RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_SIZEOFTHIS = 0x4c8ab1d0,
    RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_EST = 0xbc82b047,
    RC_PROC_START_CLOCKS_ABUS_CHIPLET_FIR_ERR_FIR_REG = 0x304b1c5f,
    RC_PROC_SELECT_CLOCK_MUX_SWIZZLE_ERR_POSITION = 0x6db3a8bf,
    RC_PROC_XIPC_CREATE_FIXED_IMAGE_ERROR_RC_LOCAL = 0xc3c51f8b,
    RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0x840894bc,
    RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_ENTITY = 0xd0c26314,
    RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_RANK = 0x5295a95e,
    RC_PROC_SLWB_CREATE_FIXED_IMAGE_ERROR_RC_LOCAL = 0xfaaf44c6,
    RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_READING_SEEPROM_ERROR = 0x430cac44,
    RC_MSS_MAINT_GET_STEER_MUX_BAD_INPUT_RANK = 0x1f0a1521,
    IO_FIR_LANE_RX_PARITY_ERROR_RC_RX_ERROR_REG = 0x659e3cc4,
    RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_SIZE = 0x2bbaf23a,
    RC_PROC_SETUP_BARS_SIZE_XLATE_ERR_SIZE = 0x6a2ea7a2,
    RC_PROC_PCIE_SCOMINIT_IOP_CONFIG_ATTR_ERR_ATTR_DATA = 0xebf8ee3c,
    RC_PROC_FAB_SMP_PUMP_MODE_ATTR_ERR_ATTR_DATA = 0xb8f37507,
    RC_PROC_BUILD_SMP_HOTPLUG_SHADOW_ERR_ADDRESS0 = 0x2037586d,
    RC_REPAIR_RING_NOT_FOUND_CHIPLET_ID = 0xf7283a7e,
    RC_MSS_MAINT_INVALID_MARKSTORE_MBA = 0xd2f36934,
    RC_MSS_MAINT_INVALID_MARKSTORE_RANK = 0xa517a607,
    RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_SYMBOL = 0x6ce9549a,
    RC_MSS_MAINT_NO_X8_ECC_SPARE_STEER_TYPE = 0x4663bdb9,
    RC_MSS_MAINT_INVALID_STEER_MUX_DRAM_WIDTH = 0xd607d98b,
    RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_DIMM = 0xe6cb4d12,
    RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_DRAM_WIDTH = 0xa0373d80,
    RC_MSS_MAINT_INVALID_STEER_MUX_MBA = 0x6bcfc305,
    RC_PROC_SLWB_DELETE_IMAGE_SECTION_ERROR_RC_LOCAL = 0xf3d3e245,
    RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_BASE_ADDR = 0xecbd0081,
    RC_PROC_SETUP_BARS_PCIE_BAR_ATTR_ERR_BASE_ADDR = 0x950a9f6d,
    RC_PROC_SLWB_IMAGE_UPDATE_ERROR_RC_LOCAL = 0x526e6893,
    RC_PROC_EXTRACT_SBE_RC_BRANCH_TO_SEEPROM_FAIL_CHIP_IN_ERROR = 0x29bd34ff,
    RC_PROC_BUILD_SMP_CORE_FLOOR_RATIO_ERR_CORE_FLOOR_RATIO = 0xad8d2c1e,
    RC_PROC_SETUP_BARS_DUPLICATE_FABRIC_ID_ERR_NODE_ID = 0xef045ec8,
    RC_PROC_FAB_SMP_X_BUS_WIDTH_ATTR_ERR_ATTR_DATA = 0x3f7cd63c,
    RC_PROC_XIPC_IMAGE_WORK_SPACE_MESS_DATA_IMG_SIZE_MAX = 0x90f9cb4e,
    RC_PROC_SLWB_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0xebcd3edf,
    RC_PROC_EXTRACT_SBE_RC_ADDR_UNALIGNED_SBE_SBE_ADDRESS = 0x2fe26c88,
    RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_MBA = 0x4cac0332,
    RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0xd2e5250e,
    RC_PROC_SLWB_BUF_SIZE_NOT_FIXED_DATA_BUF1_SIZE = 0x38da5bfd,
    RC_MSS_MAINT_START_NOT_RESET_MBMCC = 0x7a8498ef,
    RC_CEN_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0x147f964c,
    RC_PROC_PBA_COHERENT_UTILS_PBA_WRITE_STATUS_MISMATCH_STATUS1_DATA = 0x2065e845,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_FIRST_CHIP_IN_SYS = 0x7433aec4,
    RC_PROC_XIPC_MS_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE = 0x6d7cc1cd,
    RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_3 = 0x8a0b6dd3,
    RC_MSS_MAINT_NO_X8_ECC_SPARE_RANK = 0x26ab39e9,
    IO_FIR_GCR_HANG_ERROR_RC_CHIP_TARGET = 0xad54f7cb,
    REG_FFDC_MBI_FIR_REGS = 0xed8fa221,
    RC_PROC_CONTINUE_SBE_BAD_STATE_SM_STATE = 0x2e63aa71,
    REG_FFDC_TEST_X_PROC_REGISTERS = 0x975d53e4,
    RC_PROC_SLWB_RS4_DECOMPRESSION_ERROR_RC_LOCAL = 0x7a654e95,
    RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_CHIP_IN_ERROR = 0x3b92075a,
    RC_PROC_XIPC_IMAGE_SIZE_MISMATCH_DATA_IMG_SIZE_INP = 0xb32ee59c,
    REG_FFDC_CMD_TIMEOUT_MBA_REGS = 0x45611bb6,
    RC_PROCPM_SPCWKUP_TIMEOUT_I_OPERATION = 0x592c11e6,
    RC_TEST_DQ_BAD_DATA_FFDC_DATA2 = 0x4d059579,
    RC_MSS_MAINT_STOP_NOT_RESET_MBMCT = 0x858f7a88,
    RC_CEN_GETTRACEARRAY_INTERNAL_ERR_ERR_DATA = 0x1d0dc4df,
    RC_MSS_MAINT_NO_X8_ECC_SPARE_MBA = 0xb5fbe5c7,
    RC_PROCPM_PFETLIB_TIMEOUT_PFETCONTROLVALUE = 0x2036cc42,
    RC_OPT_MEMMAP_MEM_BASE_ERR_ADDR = 0xef0614d5,
    IO_FIR_RECALIBRATION_ERROR_RC_RECAL_ERROR_REG = 0x3b133b64,
    RC_PROCPM_PFETLIB_TIMEOUT_ADDRESS = 0x77d4dceb,
    RC_P8_FORCE_FREQ_TARGET_MODE_ERROR_FMIN = 0xb9c401ec,
    RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_X4ECCSPARE = 0x05c091d8,
    RC_BAD_DQ_DIMM_NOT_FOUND_FFDC_PORT = 0x814769c8,
    RC_PROCPM_ACTIVATE_CORES_BREAKPOINT_SLWSTATUS = 0x872103f2,
    RC_PROC_START_SBE_FAILED_TO_FINISH_AUTO_POR_SBE_STATUS = 0xa4f74375,
    RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ATTR_ERR_SIZE = 0x9b9e73a2,
    RC_PMPROC_PFETLIB_BAD_OP_DOMAIN = 0xf22af26c,
    RC_PMPROC_PFETLIB_BAD_OP_OPERATION = 0x8505ea95,
    RC_PMPROC_PFETLIB_RAIL_ON_EX = 0x25ec7712,
    RC_PROC_SLWB_L3_FUNC_OVERLAY_ERROR_DATA_FAIL_BYTE_NO = 0xbc57418c,
    RC_PROC_PBA_UTILS_PBA_SLAVE_RESET_FAIL_ERR_DATA = 0x60e8784c,
    RC_PROC_SLWB_IMG_PTR_ERROR_DATA_BUF2_PTR = 0xfc9fba2d,
    RC_PROCPM_ACTIVATE_ERROR_POLLCOUNT = 0xc6a9d780,
    RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_PHYP_SPCWKUP_COUNT = 0x28fe24d3,
    RC_INITFILE_LIT_ID_OUT_OF_RANGE_FFDC_IF_LIT_ID_OUT_OF_RANGE = 0xd819f781,
    REG_FFDC_CMD_TIMEOUT_MBS_REGS = 0x65d21927,
    RC_PROC_XIPC_BUF_PTR_ERROR_DATA_BUF1_PTR = 0x81839a59,
    RC_CEN_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_SIZE_OF_BUF1 = 0xb8120534,
    RC_PROC_SETUP_BARS_NON_MIRRORED_RANGE_ERR_BASE_ADDR = 0x90583028,
    RC_MSS_DIMM_POWER_CURVE_DATA_LAB_FFDC_DATA_4 = 0x8b490fae,
    RC_MSS_MAINT_INVALID_MARKSTORE_DRAM_WIDTH = 0x66c1b88f,
    RC_PROC_SETUP_BARS_NODE_NON_MIRRORED_RANGE_OVERLAP_ERR_CHIP_SIZE = 0xd49d2435,
    RC_PROCPM_PSS_CODE_BAD_MODE_MODE = 0xb0ab34d8,
    RC_PROC_XIPC_ILLEGAL_RS4_DECOMPRESS_ADDR_DATA_RS4_DECOMPRESS_ADDR = 0x442de850,
    RC_PROC_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_ENTRYOFFSET = 0xfd1c9c0f,
    RC_PROC_PBA_COHERENT_UTILS_OCB_STATUS_MISMATCH_ERR_DATA = 0x7817f4f3,
    RC_PROC_SLWB_MAX_IMAGE_SIZE_EXCEEDED_DATA_IMG_SIZE_MAX = 0x3bbf309d,
    RC_PROC_START_CLOCKS_XBUS_CHIPLET_FIR_ERR_FIR_EXP_REG = 0x9a539c16,
    RC_PROC_PREP_MASTER_WINKLE_BAD_ISTEP_NUM_SBE_VITAL = 0x973c13b2,
    RC_MSS_DIMM_POWER_CURVE_DATA_LAB_FFDC_DATA_1 = 0x78391a66,
    RC_MSS_MAINT_INVALID_SYMBOL_INDEX_MBA = 0x73b0c01c,
    RC_MSS_MAINT_NO_UE_TRAP_UE_TRAP1 = 0xb853302e,
    RC_PROC_SETUP_BARS_NX_MMIO_BAR_ATTR_ERR_BASE_ADDR = 0x6181d774,
    RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_EX = 0x7ab5ca96,
    RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_MUX_TYPE = 0x00f45ccd,
    IO_FIR_LANE_TX_PARITY_ERROR_RC_LANE_ID = 0x9bc3a7ce,
    RC_PROCPM_ACTIVATE_CORES_TIMEOUT_SLWCONTROL = 0x829707e0,
    RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_STATUS2_DATA = 0x47ad3c13,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_PROC_MIRROR_SIZES = 0xe488b9c6,
    RC_PROC_XIPC_PLL_RING_SIZE_TOO_LARGE_DATA_ATTRIBUTE_RING_SIZE = 0x4ed4b521,
    RC_TEST_ERROR_A_UNIT_TEST_FFDC_MASTER_CHIP_TARGET = 0x94c5d4b4,
    REG_FFDC_PROC_EX_CLOCK_CONTROLLER = 0xf03a2975,
    RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_MBAXCR = 0x828373d2,
    RC_PROC_START_CLOCKS_PCIE_CHIPLET_FIR_ERR_FIR_EXP_REG = 0xe1054038,
    RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_FSP_SPCWKUP_COUNT = 0x0a011f9d,
    RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_DRAM_WIDTH = 0x22b4d203,
    RC_MSS_MAINT_INVALID_CHIP_INDEX_RANK = 0x9cf4d07e,
    RC_PROC_EXTRACT_SBE_RC_SCOM_ERROR_ADDRESS = 0x210b9e99,
    REG_FFDC_SCAC_FIR_REGS = 0x4659d2c2,
    RC_PROC_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_RING_BLOCK_SIZEOFTHIS = 0x562a2e28,
    RC_MSS_MAINT_INVALID_CMD_MBMCT = 0x6489cbe4,
    RC_PROC_CEN_FRAMELOCK_FRTL_P8_FIR_ERR_FIR_REG = 0x744593f6,
    RC_SBE_UNKNOWN_ERROR_CHIP_IN_ERROR = 0x6c9d7bea,
    RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_FFDC_DATA_3 = 0xd5bcf317,
    RC_MSS_MAINT_PUT_STEER_MUX_BAD_INPUT_STEER_TYPE = 0x98dd93bf,
    RC_MSS_MAINT_INVALID_STEER_MUX_MUX_TYPE = 0x4c3770aa,
    RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_4 = 0x3e86e8b4,
    RC_PROC_SLWB_UNKNOWN_ERROR_RC_LOCAL = 0xfd3729c2,
    RC_PROC_SETUP_BARS_FOREIGN_FAR_RANGE_ATTR_ERR_SIZE = 0xd18dafcc,
    RC_MSS_MAINT_INVALID_CHIP_INDEX_CHIP_MARK = 0x0f6b1155,
    RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_BASE_ADDR = 0x8ecdd8ba,
    RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_RANK = 0xb2d644e3,
    RC_PROC_EXTRACT_SBE_RC_MODEL_ERROR_GETTING_SCOM_CHIP_IN_ERROR = 0xf2036c6d,
    RC_MSS_MAINT_INVALID_DRAM_SIZE_WIDTH_DRAM_GEN = 0x1a3a0e40,
    RC_SBE_UNKNOWN_ERROR_ERROR_CODE = 0x9f4b6f68,
    RC_MSS_MAINT_INVALID_MARKSTORE_MARKSTORE = 0x76ff742d,
    RC_MSS_MAINT_INVALID_CHIP_INDEX_DRAM_WIDTH = 0x8994e37a,
    RC_PROC_EXTRACT_SBE_RC_MODEL_ERRROR_SETTING_SEEPROM_ADDR_ERROR = 0x323916da,
    RC_PROC_XIPC_IMAGE_SIZE_MESS_DATA_IMG_SIZE_MAX = 0x2ea95396,
    RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_MEM_SIZES = 0x700c48b1,
    RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_ISTEP_NUM_SUBSTEP_NUM = 0xd6b7a1e7,
    RC_PROC_ADU_UTILS_INTERNAL_ERR_ERR_DATA = 0xe43d9ed2,
    RC_PROC_BUILD_SMP_CORE_FLOOR_FREQ_RATIO_ERR_FREQ_PB = 0xeb903578,
    RC_PROC_XIPC_RING_WRITE_WOULD_OVERFLOW_CHIPLET_ID = 0x029ab904,
    RC_MSS_MEMDIAGS_UE_OR_SUE_IN_LAST_PATTERN_MBA = 0x7858ef2b,
    RC_PROC_SELECT_CLOCK_CONFIG_ERR_CONFIGURED = 0x9937c6bb,
    RC_MBVPD_INVALID_OUTPUT_VARIABLE_SIZE_EXPECTED_SIZE = 0x55c488ab,
    RC_MSS_MAINT_INVALID_SYMBOL_INDEX_CHIP_MARK = 0x7eb77498,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_MASTER_CHIP_SYS_CURR = 0xad1d23d1,
    RC_MSS_MAINT_STOP_NOT_RESET_CMD_TYPE = 0x0e7b7a5c,
    RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_RANK = 0x43bc4d22,
    RC_PROC_MANUAL_SBE_START_SECURITY_BLOCKS_START_SECURITY_SETUP = 0x97389980,
    RC_MSS_DIMM_POWER_CURVE_DATA_LAB_FFDC_DATA_3 = 0x7a5675fa,
    RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_1 = 0x37c03a2a,
    RC_PROC_XIPC_GEN_RAM_ERROR_RC_LOCAL = 0xe92b1213,
    IO_FIR_LANE_TX_PARITY_ERROR_RC_TX_ERROR_REG = 0x5d6acf80,
    RC_PROC_PCIE_SCOMINIT_IOP_SWAP_ATTR_ERR_ATTR_DATA = 0xd1b045f1,
    RC_PROCPM_SPCWKUP_TIMEOUT_SP_WKUP_REG_ADDRESS = 0x7eda3623,
    RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_GROUP_BASE = 0xbe4b30f7,
    RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_MEM_CHIP = 0x530d07c0,
    RC_PROC_BUILD_SMP_MASTER_DESIGNATION_ERR_FIRST_CHIP_IN_NODE = 0x7807d5ad,
    RC_MSS_MAINT_MARKSTORE_WRITE_BLOCKED_MBA = 0x327e86b9,
    RC_EREPAIR_RESTORE_THRESHOLD_EXCEED_FFDC_LANES = 0x80f9cd2d,
    RC_PROC_CEN_FRAMELOCK_INVALID_ARGS_ARGS = 0x772b30bc,
    RC_PROC_L2_FLUSH_CMD_ERROR_RC_CMD_REG_ADDR = 0xe7d47942,
    RC_PROC_EXTRACT_SBE_RC_BAD_CHIP_TYPE_CHIP_IN_ERROR = 0x60f96cf2,
    REG_FFDC_PROC_STATUS_AND_SBE_VITAL_REGISTERS = 0xb7d0b9a0,
    RC_PROC_START_CLOCKS_CHIPLETS_PARTIAL_GOOD_ERR_CHIPLET_BASE_SCOM_ADDR = 0xbfd3b640,
    RC_PROCPM_SPCWKUP_CODE_BAD_OP_I_OPERATION = 0xcc7fe5a4,
    RC_PROCPM_ACTIVATE_ERROR_SLWSTATUS = 0x710cf821,
    RC_PROCPM_SPCWKUP_OHA_FLAG_SET_ON_EXIT_OCC_SPCWKUP_COUNT = 0x2f60eb17,
    RC_PROC_ADU_COHERENT_UTILS_INVALID_ARGS_END_ADDRESS = 0x31e546b6,
    RC_PROC_XIPC_WRITE_VPD_RING_TO_IPL_IMAGE_ERROR_RC_LOCAL = 0x6cbdca8e,
    RC_PMPROC_PFETLIB_BAD_DOMAIN_EX = 0x3dbbadc1,
    RC_PROC_SETUP_BARS_FOREIGN_NEAR_RANGE_ATTR_ERR_SIZE = 0x6f60ff74,
    RC_MSS_MAINT_UNSUCCESSFUL_FORCED_MAINT_CMD_STOP_MBMSR = 0x00fcafc5,
    RC_PROCPM_ACTIVATE_CORES_TIMEOUT_SCOREBOARD = 0xf28bc150,
    RC_PROC_A_X_PCI_DMI_PLL_SETUP_ABUS_PLL_NO_LOCK_LOCK_STATUS = 0xc90a9567,
    RC_PROC_SLWB_BUF_PTR_ERROR_DATA_BUF1_PTR = 0x9e214ed0,
    RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_SUBSTEP_NUM_ISTEP_NUM = 0x8bab7d92,
    RC_MSS_MAINT_NO_UE_TRAP_UE_TRAP0 = 0x9749e072,
    RC_EREPAIR_RESTORE_THRESHOLD_EXCEED_FFDC_SUB_IFACE = 0x4d8cb819,
    RC_MSS_DIMM_POWER_CURVE_DATA_INVALID_FFDC_DATA_2 = 0x87e515d2,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_ALL_MCS_IN_INTERLEAVING_GROUP = 0x655f6b93,
    REG_FFDC_PROC_TP_CLOCK_CONTROLLER = 0xf0ef5248,
    RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_FFDC_DATA_2 = 0xda4bf3c7,
    RC_PROCPM_ACTIVATE_ERROR_SLWCONTROL = 0x6f2fee93,
    RC_EREPAIR_RESTORE_THRESHOLD_EXCEED_FFDC_ENDP_TARGET = 0x7855445b,
    RC_PROC_BUILD_SMP_A_CMD_RATE_ERR_CMD_RATE = 0x0928073f,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_MSS_MCS_GROUP_32 = 0x72f8622a,
    RC_PROC_XIPC_INVALID_VPD_TYPE_DATA_VPD_TYPE = 0x071c3ea6,
    RC_PROC_XIPC_CHECK_REDUNDANT_ERROR_RC_LOCAL = 0x43bdf227,
    RC_ERROR_MSS_GROUPING_ATTRS__ATTR_EFF_DIMM_SIZE1 = 0x5684567a,
    RC_PMPROC_PFETLIB_BAD_DOMAIN_DOMAIN = 0x5e9fd070,
    RC_PROC_XIPC_IMAGE_SIZE_MESS_DATA_IMG_SIZE = 0x1351ca3d,
    RC_PROC_SLWB_KEYWORD_NOT_FOUND_ERROR_RC_LOCAL = 0x90b26d5f,
    RC_INITFILE_ATTR_ID_OUT_OF_RANGE_FFDC_IF_ATTR_ID_OUT_OF_RANGE = 0x2feb6247,
    RC_MSS_MAINT_GET_MARK_STORE_BAD_INPUT_MBA = 0xcba817c9,
    RC_PROC_SETUP_BARS_FSP_BAR_ATTR_ERR_SIZE = 0x92d7ca9a,
    RC_PROC_PREP_SBE_RESET_FAILED_TO_FINISH_AUTO_SCAN0_SBE_STATUS = 0x176d3ffd,
    RC_PROC_SLWB_IMG_PTR_ERROR_DATA_BUF1_PTR = 0x63eeeca1,
    RC_PROC_EXTRACT_SBE_RC_ADDR_NOT_RECOGNIZED_SBE_SBE_ADDRESS = 0xa644eb95,
    IO_FIR_MAX_SPARES_EXCEEDED_FIR_RC_SPARE_ERROR_REG = 0x8c5cb972,
    RC_PROCPM_PMC_CODE_BAD_MODE_MODE = 0x294b335f,
    RC_PROC_SETUP_BARS_AS_MMIO_BAR_ATTR_ERR_BASE_ADDR = 0xda84a966,
    RC_PROC_FAB_SMP_FABRIC_CHIP_ID_ATTR_ERR_ATTR_DATA = 0x6a16785a,
    RC_PMPROC_PFETLIB_RAIL_OFF_DOMAIN = 0x63fae357,
    RC_PROCPM_PFETLIB_BABYSTEPPER_TIMEOUT_EX = 0x8bdf520f,
    RC_PMPROC_PFETLIB_CODE_FAULT_OPERATION = 0x01676cb4,
    RC_TEST_ERROR_B_UNIT_TEST_FFDC_DATA = 0x5186f9b2,
    RC_MSS_MAINT_START_NOT_RESET_MBMCT = 0xed0bb517,
    RC_PROC_GETTRACEARRAY_INVALID_ARGS_ARGS = 0xc10d7a9f,
    RC_MSS_MAINT_GET_ADDRESS_RANGE_BAD_INPUT_MBA = 0xb6e00ecf,
    RC_PROCPM_ACTIVATE_CORES_BREAKPOINT_POLLCOUNT = 0x1bdf1b7c,
    RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_GROUP_SIZE = 0x975d70ac,
    RC_PROC_PBA_COHERENT_UTILS_PBA_READ_STATUS_MISMATCH_STATUS3_DATA = 0x1c30100b,
    RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_ENTRYOFFSET = 0xc6e19582,
    RC_MSS_VOLT_UNRECOGNIZED_DRAM_DEVICE_TYPE_DEVICE_TYPE = 0x8c4547c3,
    RC_PROC_CEN_FRAMELOCK_FL_CEN_FIR_ERR_FIR_REG = 0xffb42227,
    RC_MBVPD_INSUFFICIENT_VPD_RETURNED_RETURNED_SIZE = 0x508e64d8,
    RC_PROC_CHECK_SLAVE_SBE_SEEPROM_COMPLETE_BAD_SUBSTEP_NUM_SUBSTEP_NUM = 0xbdbda99c,
    RC_PROCPM_SPCWKUP_TIMEOUT_SP_WKUP_REG_VALUE = 0xfa629e9c,
    RC_OPT_MEMMAP_NON_MIRROR_GROUP_ERR_GROUP = 0xabe06cd1,
    RC_PROC_SLWB_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_SIZEOFTHIS = 0xfd5b3933,
    RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ERRPT2_DATA = 0x3d9c895f,
    RC_MSS_MAINT_DO_STEER_INPUT_OUT_OF_RANGE_RANK = 0x761698e1,
    RC_CEN_XIPC_PLL_RING_BLOCK_TOO_LARGE_DATA_SIZE_OF_BUF1 = 0x19f9cda2,
    RC_MSS_MAINT_INVALID_DIMM_CNFG_MBAXCR = 0xfc37f457,
    RC_SBE_FABRICINIT_ERR_ADU_STATUS_0x02020002 = 0x7fa5bf33,
    RC_PROC_XIPC_PORE_INLINE_CTX_CREATE_ERROR_RC_LOCAL = 0x4a15051f,
    RC_MSS_MAINT_X4_SYMBOL_ON_READ_RANK = 0x48fd7c91,
    IO_FIR_SPARES_DEPLOYED_FIR_RC_SPARE_ERROR_REG = 0xf5b87e97,
    RC_PROC_SLWB_INPUT_IMAGE_SIZE_MESS_DATA_IMG_SIZE_INP = 0x1ff0ab00,
    RC_PROC_PBA_COHERENT_UTILS_PBA_FIR_ERR_ERRPT1_DATA = 0xa1b2c416,
    RC_MSS_NOT_ENOUGH_AVAILABLE_DIMM_POWER_FFDC_DATA_5 = 0xcf180fc0,
    RC_INITFILE_TGT_NUM_OUT_OF_RANGE_FFDC_IF_TGT_NUM = 0x41b2db47,
    RC_CEN_XIPC_RING_BLOCK_ALIGN_ERROR_DATA_RING_BLOCK_SIZEOFTHIS = 0x89f5fbdf,
    RC_PROCPM_ACTIVATE_CORES_TIMEOUT_SLWSTATUS = 0xe74100ea,
    RC_PROC_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR_NODE_ID = 0x8aef3017,
    IO_FIR_BUS_RX_PARITY_ERROR_RC_CHIP_TARGET = 0x3e98b984,
};

}



#endif
