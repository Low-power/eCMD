/* The following has been auto-generated by makedll.pl */
#ifndef ecmdDllCapi_H
#define ecmdDllCapi_H

#include <inttypes.h>
#include <vector>
#include <string>
#include <ecmdStructs.H>
#include <ecmdReturnCodes.H>
#include <ecmdDataBuffer.H>


extern "C" {

/* Dll Common load function - verifies version */
int dllLoadDll (const char * i_version, int debugLevel);
/* Dll Specific load function - used by Cronus/GFW to init variables/object models*/
int dllInitDll ();

/* Dll Common unload function */
int dllUnloadDll ();
/* Dll Specific unload function - deallocates variables/object models*/
int dllFreeDll();

/* Dll Common Command Line Args Function*/
int dllCommonCommandArgs(int*  io_argc, char** io_argv[]);
/* Dll Specific Command Line Args Function*/
int dllSpecificCommandArgs(int*  io_argc, char** io_argv[]);

int dllQueryDllInfo(ecmdDllInfo & o_dllInfo); 

int dllQueryConfig(ecmdChipTarget & i_target, ecmdQueryData & o_queryData, ecmdQueryDetail_t i_detail ); 

int dllQuerySelected(ecmdChipTarget & io_target, ecmdQueryData & o_queryData); 

int dllQueryRing(ecmdChipTarget & i_target, std::list<ecmdRingData> & o_queryData, const char * i_ringName ); 

int dllQueryArray(ecmdChipTarget & i_target, ecmdArrayData & o_queryData, const char * i_arrayName); 

int dllQuerySpy(ecmdChipTarget & i_target, ecmdSpyData & o_queryData, const char * i_spyName); 

int dllQueryFileLocation(ecmdChipTarget & i_target, ecmdFileType_t i_fileType, std::string & o_fileLocation); 

int dllGetRing(ecmdChipTarget & i_target, const char * i_ringName, ecmdDataBuffer & o_data); 

int dllPutRing(ecmdChipTarget & i_target, const char * i_ringName, ecmdDataBuffer & i_data); 

int dllGetScom(ecmdChipTarget & i_target, uint32_t i_address, ecmdDataBuffer & o_data); 

int dllPutScom(ecmdChipTarget & i_target, uint32_t i_address, ecmdDataBuffer & i_data); 

int dllSendCmd(ecmdChipTarget & i_target, uint32_t i_instruction, uint32_t i_modifier, ecmdDataBuffer & o_status); 

int dllGetSpy(ecmdChipTarget & i_target, const char * i_spyName, ecmdDataBuffer & o_data); 

int dllGetSpyEnum(ecmdChipTarget & i_target, const char * i_spyName, std::string & o_enumValue); 

int dllGetSpyEccGrouping(ecmdChipTarget & i_target, const char * i_spyEccGroupName, ecmdDataBuffer & o_groupData, ecmdDataBuffer & o_eccData, ecmdDataBuffer & o_eccErrorMask); 

int dllPutSpy(ecmdChipTarget & i_target, const char * i_spyName, ecmdDataBuffer & i_data); 

int dllPutSpyEnum(ecmdChipTarget & i_target, const char * i_spyName, const std::string i_enumValue); 

void dllEnableRingCache(); 

int dllDisableRingCache(); 

int dllFlushRingCache(); 

int dllGetArray(ecmdChipTarget & i_target, const char * i_arrayName, ecmdDataBuffer & i_address, ecmdDataBuffer & o_data); 

int dllGetArrayMultiple(ecmdChipTarget & i_target, const char * i_arrayName, std::list<ecmdArrayEntry> & io_entries); 

int dllPutArray(ecmdChipTarget & i_target, const char * i_arrayName, ecmdDataBuffer & i_address, ecmdDataBuffer & i_data); 

int dllPutArrayMultiple(ecmdChipTarget & i_target, const char * i_arrayName, std::list<ecmdArrayEntry> & i_entries); 

int dllFlushSys(); 

int dllIplSys(); 

int dllSimaet(const char* i_function); 

int dllSimcheckpoint(const char* i_checkpoint); 

int dllSimclock(int i_cycles); 

int dllSimecho(const char* i_message); 

int dllSimexit(); 

int dllSimEXPECTFAC(const char* i_facname, int i_bitlength, ecmdDataBuffer & i_expect, int i_row , int i_offset ); 

int dllSimexpecttcfac(const char* i_tcfacname, int i_bitlength, ecmdDataBuffer & i_expect, int i_row ); 

int dllSimgetcurrentcycle(int & o_cyclecount); 

int dllSimGETFAC(const char* i_facname, int i_bitlength, ecmdDataBuffer & o_data, int i_row , int i_offset ); 

int dllSimGETFACX(const char* i_facname, int i_bitlength, ecmdDataBuffer & o_data, int i_row , int i_offset ); 

int dllSimgettcfac(const char* i_tcfacname, ecmdDataBuffer & o_data, int i_row , int i_startbit , int i_bitlength ); 

int dllSiminit(const char* i_checkpoint); 

int dllSimPUTFAC(const char* i_facname, int i_bitlength, ecmdDataBuffer & i_data, int i_row , int i_offset ); 

int dllSimPUTFACX(const char* i_facname, int i_bitlength, ecmdDataBuffer & i_data, int i_row , int i_offset ); 

int dllSimputtcfac(const char* i_tcfacname, int i_bitlength, ecmdDataBuffer & i_data, int i_row , int i_numrows ); 

int dllSimrestart(const char* i_checkpoint); 

int dllSimSTKFAC(const char* i_facname, int i_bitlength, ecmdDataBuffer & i_data, int i_row , int i_offset ); 

int dllSimstktcfac(const char* i_tcfacname, int i_bitlength, ecmdDataBuffer & i_data, int i_row , int i_numrows ); 

int dllSimSUBCMD(const char* i_command); 

int dllSimtckinterval(int i_tckinterval); 

int dllSimUNSTICK(const char* i_facname, int i_bitlength, int i_row , int i_offset ); 

int dllSimunsticktcfac(const char* i_tcfacname, int i_bitlength, ecmdDataBuffer & i_data, int i_row , int i_numrows ); 

std::string dllGetErrorMsg(int i_errorCode); 

int dllRegisterErrorMsg(int i_errorCode, const char* i_whom, const char* i_message); 

void dllOutputError(const char* i_message); 

void dllOutputWarning(const char* i_message); 

void dllOutput(const char* i_message); 

int dllGetGlobalVar(ecmdGlobalVarType_t i_type); 

} //extern C

#endif
/* The previous has been auto-generated by makedll.pl */
