/* The following has been auto-generated by makedll.pl */
#ifndef ecmdDllCapi_H
#define ecmdDllCapi_H

#include <inttypes.h>
#include <vector>
#include <string>

#include <ecmdDefines.H>
#include <ecmdStructs.H>
#include <ecmdReturnCodes.H>
#include <ecmdDataBuffer.H>


extern "C" {

/* Dll Common load function - verifies version */
uint32_t dllLoadDll (const char * i_version, uint32_t debugLevel);
/* Dll Specific load function - used by Cronus/GFW to init variables/object models */
uint32_t dllInitDll ();

/* Dll Common unload function */
uint32_t dllUnloadDll ();
/* Dll Specific unload function - deallocates variables/object models */
uint32_t dllFreeDll();

/* Dll version check function */
uint32_t dllCheckDllVersion (const char* options);
/* Dll Common Command Line Args Function */
uint32_t dllCommonCommandArgs(int*  io_argc, char** io_argv[]);
/* Dll Specific Command Line Args Function */
uint32_t dllSpecificCommandArgs(int*  io_argc, char** io_argv[]);

/* Dll Specific Return Codes */
std::string dllSpecificParseReturnCode(uint32_t i_returnCode);

void dllLoadDllRecovery(std::string i_commandLine, uint32_t & io_rc); 

uint32_t dllLooperInit(ecmdChipTarget & io_target, ecmdLoopType_t i_looptype, ecmdLooperData& io_state, ecmdLoopMode_t i_mode); 

uint32_t dllConfigLooperInit(ecmdChipTarget & io_target, ecmdLoopType_t i_looptype, ecmdLooperData& io_state); 

uint32_t dllExistLooperInit(ecmdChipTarget & io_target, ecmdLoopType_t i_looptype, ecmdLooperData& io_state); 

uint32_t dllLooperNext(ecmdChipTarget & io_target, ecmdLooperData& io_state, ecmdLoopMode_t i_mode); 

uint32_t dllConfigLooperNext(ecmdChipTarget & io_target, ecmdLooperData& io_state); 

uint32_t dllExistLooperNext(ecmdChipTarget & io_target, ecmdLooperData& io_state); 

uint32_t dllQueryDllInfo(ecmdDllInfo & o_dllInfo); 

bool dllQueryVersionGreater(const char* version); 

uint32_t dllQueryConfig(ecmdChipTarget & i_target, ecmdQueryData & o_queryData, ecmdQueryDetail_t i_detail); 

uint32_t dllQueryExist(ecmdChipTarget & i_target, ecmdQueryData & o_queryData, ecmdQueryDetail_t i_detail); 

uint32_t dllQueryConfigSelected(ecmdChipTarget & io_target, ecmdQueryData & o_queryData, ecmdLoopType_t i_looptype); 

uint32_t dllQueryExistSelected(ecmdChipTarget & io_target, ecmdQueryData & o_queryData, ecmdLoopType_t i_looptype); 

uint32_t dllQueryRing(ecmdChipTarget & i_target, std::list<ecmdRingData> & o_queryData, const char * i_ringName, ecmdQueryDetail_t i_detail); 

#ifndef ECMD_REMOVE_LATCH_FUNCTIONS
uint32_t dllQueryLatch(ecmdChipTarget & i_target, std::list<ecmdLatchData> & o_queryData, ecmdLatchMode_t i_mode, const char * i_latchName, const char * i_ringName, ecmdQueryDetail_t i_detail); 

#endif // ECMD_REMOVE_LATCH_FUNCTIONS
#ifndef ECMD_REMOVE_ARRAY_FUNCTIONS
uint32_t dllQueryArray(ecmdChipTarget & i_target, std::list<ecmdArrayData> & o_queryData, const char * i_arrayName, ecmdQueryDetail_t i_detail); 

#endif // ECMD_REMOVE_ARRAY_FUNCTIONS
#ifndef ECMD_REMOVE_SPY_FUNCTIONS
uint32_t dllQuerySpy(ecmdChipTarget & i_target, std::list<ecmdSpyData> & o_queryData, const char * i_spyName, ecmdQueryDetail_t i_detail); 

#endif // ECMD_REMOVE_SPY_FUNCTIONS
uint32_t dllQueryScom(ecmdChipTarget & i_target, std::list<ecmdScomData> & o_queryData, uint32_t i_address, ecmdQueryDetail_t i_detail); 

uint32_t dllQueryScomHidden(ecmdChipTarget & i_target, std::list<ecmdScomDataHidden> & o_queryData, uint32_t i_address, ecmdQueryDetail_t i_detail); 

#ifndef ECMD_REMOVE_TRACEARRAY_FUNCTIONS
uint32_t dllQueryTraceArray(ecmdChipTarget & i_target, std::list<ecmdTraceArrayData> & o_queryData, const char * i_traceArrayName, ecmdQueryDetail_t i_detail); 

#endif // ECMD_REMOVE_TRACEARRAY_FUNCTIONS
#ifndef ECMD_REMOVE_FASTARRAY_FUNCTIONS
uint32_t dllQueryFastArray(ecmdChipTarget & i_target, std::list<ecmdFastArrayData> & o_queryData, const char * i_fastArrayName, ecmdQueryDetail_t i_detail); 

#endif // ECMD_REMOVE_FASTARRAY_FUNCTIONS
uint32_t dllQueryFileLocation(ecmdChipTarget & i_target, ecmdFileType_t i_fileType, std::string & o_fileLocation); 

bool dllQueryTargetConfigured(ecmdChipTarget i_target, ecmdQueryData * i_queryData); 

bool dllQueryTargetExist(ecmdChipTarget i_target, ecmdQueryData * i_queryData); 

uint32_t dllGetChipData(ecmdChipTarget & i_target, ecmdChipData & o_data); 

#ifndef ECMD_REMOVE_RING_FUNCTIONS
uint32_t dllGetRing(ecmdChipTarget & i_target, const char * i_ringName, ecmdDataBuffer & o_data); 

uint32_t dllPutRing(ecmdChipTarget & i_target, const char * i_ringName, ecmdDataBuffer & i_data); 

#endif // ECMD_REMOVE_RING_FUNCTIONS
#ifndef ECMD_REMOVE_LATCH_FUNCTIONS
uint32_t dllGetLatch(ecmdChipTarget & i_target, const char* i_ringName, const char * i_latchName, std::list<ecmdLatchEntry> & o_data, ecmdLatchMode_t i_mode); 

uint32_t dllPutLatch(ecmdChipTarget & i_target, const char* i_ringName, const char * i_latchName, ecmdDataBuffer & i_data, uint32_t i_startBit, uint32_t i_numBits, uint32_t & o_matchs, ecmdLatchMode_t i_mode); 

#endif // ECMD_REMOVE_LATCH_FUNCTIONS
#ifndef ECMD_REMOVE_RING_FUNCTIONS
uint32_t dllGetRingWithModifier(ecmdChipTarget & i_target, uint32_t i_address, uint32_t i_bitLength, ecmdDataBuffer & o_data); 

uint32_t dllPutRingWithModifier(ecmdChipTarget & i_target, uint32_t i_address, uint32_t i_bitLength, ecmdDataBuffer & i_data); 

#endif // ECMD_REMOVE_RING_FUNCTIONS
uint32_t dllGetScom(ecmdChipTarget & i_target, uint32_t i_address, ecmdDataBuffer & o_data); 

uint32_t dllPutScom(ecmdChipTarget & i_target, uint32_t i_address, ecmdDataBuffer & i_data); 

uint32_t dllPutScomUnderMask(ecmdChipTarget & i_target, uint32_t i_address, ecmdDataBuffer & i_data, ecmdDataBuffer & i_mask); 

uint32_t dllDoScomMultiple(ecmdChipTarget & i_target, std::list<ecmdScomEntry> & io_entries); 

uint32_t dllSendCmd(ecmdChipTarget & i_target, uint32_t i_instruction, uint32_t i_modifier, ecmdDataBuffer & o_status); 

uint32_t dllGetCfamRegister(ecmdChipTarget & i_target, uint32_t i_address, ecmdDataBuffer & o_data); 

uint32_t dllPutCfamRegister(ecmdChipTarget & i_target, uint32_t i_address, ecmdDataBuffer & i_data); 

#ifndef ECMD_REMOVE_SPY_FUNCTIONS
uint32_t dllGetSpy(ecmdChipTarget & i_target, const char * i_spyName, ecmdDataBuffer & o_data); 

uint32_t dllGetSpyEnum(ecmdChipTarget & i_target, const char * i_spyName, std::string & o_enumValue); 

uint32_t dllGetSpyEpCheckers(ecmdChipTarget & i_target, const char * i_spyEpCheckersName, ecmdDataBuffer & o_inLatchData, ecmdDataBuffer & o_outLatchData, ecmdDataBuffer & o_eccErrorMask); 

uint32_t dllGetSpyGroups(ecmdChipTarget & i_target, const char * i_spyName, std::list < ecmdSpyGroupData > & o_groups); 

uint32_t dllPutSpy(ecmdChipTarget & i_target, const char * i_spyName, ecmdDataBuffer & i_data); 

uint32_t dllPutSpyEnum(ecmdChipTarget & i_target, const char * i_spyName, const std::string i_enumValue); 

#endif // ECMD_REMOVE_SPY_FUNCTIONS
uint32_t dllEnableRingCache(ecmdChipTarget & i_target); 

uint32_t dllDisableRingCache(ecmdChipTarget & i_target); 

uint32_t dllFlushRingCache(ecmdChipTarget & i_target); 

bool dllIsRingCacheEnabled(ecmdChipTarget & i_target); 

#ifndef ECMD_REMOVE_ARRAY_FUNCTIONS
uint32_t dllGetArray(ecmdChipTarget & i_target, const char * i_arrayName, ecmdDataBuffer & i_address, ecmdDataBuffer & o_data); 

uint32_t dllGetArrayMultiple(ecmdChipTarget & i_target, const char * i_arrayName, std::list<ecmdArrayEntry> & io_entries); 

uint32_t dllPutArray(ecmdChipTarget & i_target, const char * i_arrayName, ecmdDataBuffer & i_address, ecmdDataBuffer & i_data); 

uint32_t dllPutArrayMultiple(ecmdChipTarget & i_target, const char * i_arrayName, std::list<ecmdArrayEntry> & i_entries); 

#endif // ECMD_REMOVE_ARRAY_FUNCTIONS
#ifndef ECMD_REMOVE_FASTARRAY_FUNCTIONS
uint32_t dllGetFastArrayMultiple(ecmdChipTarget & i_target, const char * i_fastArrayName, std::list<ecmdArrayEntry> & io_entries); 

#endif // ECMD_REMOVE_FASTARRAY_FUNCTIONS
#ifndef ECMD_REMOVE_CLOCK_FUNCTIONS
uint32_t dllQueryClockState(ecmdChipTarget & i_target, const char * i_clockDomain, ecmdClockState_t & o_clockState); 

uint32_t dllStartClocks(ecmdChipTarget & i_target, const char * i_clockDomain, bool i_forceState); 

uint32_t dllStopClocks(ecmdChipTarget & i_target, const char * i_clockDomain, bool i_forceState); 

#endif // ECMD_REMOVE_CLOCK_FUNCTIONS
#ifndef ECMD_REMOVE_REFCLOCK_FUNCTIONS
uint32_t dllGetClockSpeed(ecmdChipTarget & i_target, ecmdClockType_t i_type, ecmdClockSpeedType_t i_speedType, uint32_t & o_speed); 

uint32_t dllSetClockSpeed(ecmdChipTarget & i_target, ecmdClockType_t i_type, uint32_t i_speed, ecmdClockSpeedType_t i_speedType, ecmdClockSetMode_t i_mode, ecmdClockRange_t i_range); 

uint32_t dllSetClockMultDiv(ecmdChipTarget & i_target, ecmdClockType_t i_type, uint32_t i_multiplier, uint32_t i_divider); 

#endif // ECMD_REMOVE_REFCLOCK_FUNCTIONS
uint32_t dllIStepsByNumber(ecmdDataBuffer & i_steps); 

uint32_t dllIStepsByName(std::string i_stepName); 

uint32_t dllIStepsByNameMultiple(std::list< std::string > i_stepNames); 

uint32_t dllIStepsByNameRange(std::string  i_stepNameBegin, std::string  i_stepNameEnd); 

#ifndef ECMD_REMOVE_PROCESSOR_FUNCTIONS
uint32_t dllQueryProcRegisterInfo(ecmdChipTarget & i_target, const char* i_name, ecmdProcRegisterInfo & o_data); 

uint32_t dllGetSpr(ecmdChipTarget & i_target, const char * i_sprName, ecmdDataBuffer & o_data); 

uint32_t dllGetSprMultiple(ecmdChipTarget & i_target, std::list<ecmdNameEntry> & io_entries); 

uint32_t dllPutSpr(ecmdChipTarget & i_target, const char * i_sprName, ecmdDataBuffer & i_data); 

uint32_t dllPutSprMultiple(ecmdChipTarget & i_target, std::list<ecmdNameEntry> & i_entries); 

uint32_t dllGetGpr(ecmdChipTarget & i_target, uint32_t i_gprNum, ecmdDataBuffer & o_data); 

uint32_t dllGetGprMultiple(ecmdChipTarget & i_target, std::list<ecmdIndexEntry> & io_entries); 

uint32_t dllPutGpr(ecmdChipTarget & i_target, uint32_t i_gprNum, ecmdDataBuffer & i_data); 

uint32_t dllPutGprMultiple(ecmdChipTarget & i_target, std::list<ecmdIndexEntry> & i_entries); 

uint32_t dllGetFpr(ecmdChipTarget & i_target, uint32_t i_fprNum, ecmdDataBuffer & o_data); 

uint32_t dllGetFprMultiple(ecmdChipTarget & i_target, std::list<ecmdIndexEntry> & io_entries); 

uint32_t dllPutFpr(ecmdChipTarget & i_target, uint32_t i_fprNum, ecmdDataBuffer & i_data); 

uint32_t dllPutFprMultiple(ecmdChipTarget & i_target, std::list<ecmdIndexEntry> & i_entries); 

uint32_t dllGetSlb(ecmdChipTarget & i_target, uint32_t i_slbNum, ecmdDataBuffer & o_data); 

uint32_t dllGetSlbMultiple(ecmdChipTarget & i_target, std::list<ecmdIndexEntry> & io_entries); 

uint32_t dllPutSlb(ecmdChipTarget & i_target, uint32_t i_slbNum, ecmdDataBuffer & i_data); 

uint32_t dllPutSlbMultiple(ecmdChipTarget & i_target, std::list<ecmdIndexEntry> & i_entries); 

#endif // ECMD_REMOVE_PROCESSOR_FUNCTIONS
#ifndef ECMD_REMOVE_TRACEARRAY_FUNCTIONS
uint32_t dllGetTraceArray(ecmdChipTarget & i_target, const char* i_name, bool i_doTraceStopStart, std::vector <ecmdDataBuffer> & o_data); 

uint32_t dllGetTraceArrayMultiple(ecmdChipTarget & i_target, bool i_doTraceStopStart, std::list <ecmdNameVectorEntry> & o_data); 

#endif // ECMD_REMOVE_TRACEARRAY_FUNCTIONS
#ifndef ECMD_REMOVE_MEMORY_FUNCTIONS
uint32_t dllGetMemProc(ecmdChipTarget & i_target, uint64_t i_address, uint32_t i_bytes, ecmdDataBuffer & o_data); 

uint32_t dllPutMemProc(ecmdChipTarget & i_target, uint64_t i_address, uint32_t i_bytes, ecmdDataBuffer & i_data); 

uint32_t dllGetMemDma(ecmdChipTarget & i_target, uint64_t i_address, uint32_t i_bytes, ecmdDataBuffer & o_data); 

uint32_t dllPutMemDma(ecmdChipTarget & i_target, uint64_t i_address, uint32_t i_bytes, ecmdDataBuffer & i_data); 

uint32_t dllGetMemMemCtrl(ecmdChipTarget & i_target, uint64_t i_address, uint32_t i_bytes, ecmdDataBuffer & o_data); 

uint32_t dllPutMemMemCtrl(ecmdChipTarget & i_target, uint64_t i_address, uint32_t i_bytes, ecmdDataBuffer & i_data); 

uint32_t dllQueryCache(ecmdChipTarget & i_target, ecmdCacheType_t i_cacheType, ecmdCacheData & o_data); 

uint32_t dllCacheFlush(ecmdChipTarget & i_target, ecmdCacheType_t i_cacheType); 

#endif // ECMD_REMOVE_MEMORY_FUNCTIONS
std::string dllGetErrorMsg(uint32_t i_returnCode, bool i_parseReturnCode, bool i_deleteMessage, bool i_messageBorder); 

uint32_t dllRegisterErrorMsg(uint32_t i_returnCode, const char* i_whom, const char* i_message); 

uint32_t dllFlushRegisteredErrorMsgs(uint32_t i_returnCode); 

uint32_t dllGetErrorTarget(uint32_t i_returnCode, std::list<ecmdChipTarget> & o_errorTargets, bool i_deleteTarget); 

uint32_t dllRegisterErrorTarget(uint32_t i_returnCode, ecmdChipTarget & i_errorTarget); 

uint32_t dllFlushRegisteredErrorTargets(uint32_t i_returnCode); 

std::string dllParseReturnCode(uint32_t i_returnCode); 

void dllOutputError(const char* i_message); 

void dllOutputWarning(const char* i_message); 

void dllOutput(const char* i_message); 

uint32_t dllGetGpRegister(ecmdChipTarget & i_target, uint32_t i_gpRegister, ecmdDataBuffer & o_data); 

uint32_t dllPutGpRegister(ecmdChipTarget & i_target, uint32_t i_gpRegister, ecmdDataBuffer & i_data); 

uint32_t dllPutGpRegisterUnderMask(ecmdChipTarget & i_target, uint32_t i_gpRegister, ecmdDataBuffer & i_data, ecmdDataBuffer & i_mask); 

uint32_t dllGetGlobalVar(ecmdGlobalVarType_t i_type); 

uint32_t dllSetGlobalVar(ecmdGlobalVarType_t i_type, uint32_t i_value); 

void dllSetTraceMode(ecmdTraceType_t i_type, bool i_enable); 

bool dllQueryTraceMode(ecmdTraceType_t i_type); 

uint32_t dllDelay(uint32_t i_simCycles, uint32_t i_msDelay); 

uint32_t dllMakeSPSystemCall(ecmdChipTarget & i_target, const std::string & i_command, std::string & o_stdout); 

uint32_t dllGetConfiguration(ecmdChipTarget & i_target, std::string i_name, ecmdConfigValid_t & o_validOutput, std::string & o_valueAlpha, uint32_t & o_valueNumeric); 

uint32_t dllGetConfigurationComplex(ecmdChipTarget & i_target, std::string i_name, ecmdConfigData & o_configData); 

uint32_t dllSetConfiguration(ecmdChipTarget & i_target, std::string i_name, ecmdConfigValid_t i_validInput, std::string i_valueAlpha, uint32_t i_valueNumeric); 

uint32_t dllSetConfigurationComplex(ecmdChipTarget & i_target, std::string i_name, ecmdConfigData i_configData); 

uint32_t dllDeconfigureTarget(ecmdChipTarget & i_target); 

uint32_t dllConfigureTarget(ecmdChipTarget & i_target); 

uint32_t dllTargetToUnitId(ecmdChipTarget & io_target); 

uint32_t dllUnitIdStringToTarget(std::string i_unitId, std::list<ecmdChipTarget> & o_targetList); 

uint32_t dllUnitIdToTarget(uint32_t i_unitId, std::list<ecmdChipTarget> & o_targetList); 

uint32_t dllUnitIdToString(uint32_t i_unitId, std::string & o_unitIdStr); 

uint32_t dllGetUnitIdVersion(uint32_t & o_unitIdVersion); 

uint32_t dllSequenceIdToTarget(uint32_t i_core_seq_num, ecmdChipTarget & io_target, uint32_t i_thread_seq_num); 

uint32_t dllTargetToSequenceId(ecmdChipTarget i_target, uint32_t & o_core_seq_num, uint32_t & o_thread_seq_num); 

#ifndef ECMD_REMOVE_VPD_FUNCTIONS
uint32_t dllGetModuleVpdKeyword(ecmdChipTarget & i_target, const char * i_record_name, const char * i_keyword, uint32_t i_bytes, ecmdDataBuffer & o_data); 

uint32_t dllPutModuleVpdKeyword(ecmdChipTarget & i_target, const char * i_record_name, const char * i_keyword, ecmdDataBuffer & i_data); 

uint32_t dllGetModuleVpdImage(ecmdChipTarget & i_target, uint32_t i_bytes, ecmdDataBuffer & o_data); 

uint32_t dllPutModuleVpdImage(ecmdChipTarget & i_target, ecmdDataBuffer & i_data); 

uint32_t dllGetModuleVpdKeywordFromImage(ecmdChipTarget & i_target, const char * i_record_name, const char * i_keyword, ecmdDataBuffer & i_image_data, ecmdDataBuffer & o_keyword_data); 

uint32_t dllPutModuleVpdKeywordToImage(ecmdChipTarget & i_target, const char * i_record_name, const char * i_keyword, ecmdDataBuffer & io_image_data, ecmdDataBuffer & i_keyword_data); 

#endif // ECMD_REMOVE_VPD_FUNCTIONS
#ifndef ECMD_REMOVE_VPD_FUNCTIONS
uint32_t dllGetFruVpdKeyword(ecmdChipTarget & i_target, const char * i_record_name, const char * i_keyword, uint32_t i_bytes, ecmdDataBuffer & o_data); 

uint32_t dllPutFruVpdKeyword(ecmdChipTarget & i_target, const char * i_record_name, const char * i_keyword, ecmdDataBuffer & i_data); 

uint32_t dllGetFruVpdImage(ecmdChipTarget & i_target, uint32_t i_bytes, ecmdDataBuffer & o_data); 

uint32_t dllPutFruVpdImage(ecmdChipTarget & i_target, ecmdDataBuffer & i_data); 

#endif // ECMD_REMOVE_VPD_FUNCTIONS
#ifndef ECMD_REMOVE_I2C_FUNCTIONS
uint32_t dllI2cReset(ecmdChipTarget & i_target, uint32_t i_engineId, uint32_t i_port); 

uint32_t dllI2cRead(ecmdChipTarget & i_target, uint32_t i_engineId, uint32_t i_port, uint32_t i_slaveAddress, ecmdI2cBusSpeed_t i_busSpeed , uint32_t i_bytes, ecmdDataBuffer & o_data); 

uint32_t dllI2cReadOffset(ecmdChipTarget & i_target, uint32_t i_engineId, uint32_t i_port, uint32_t i_slaveAddress, ecmdI2cBusSpeed_t i_busSpeed , uint32_t i_offset, uint32_t i_offsetFieldSize, uint32_t i_bytes, ecmdDataBuffer & o_data); 

uint32_t dllI2cWrite(ecmdChipTarget & i_target, uint32_t i_engineId, uint32_t i_port, uint32_t i_slaveAddress, ecmdI2cBusSpeed_t i_busSpeed , ecmdDataBuffer & i_data); 

uint32_t dllI2cWriteOffset(ecmdChipTarget & i_target, uint32_t i_engineId, uint32_t i_port, uint32_t i_slaveAddress, ecmdI2cBusSpeed_t i_busSpeed , uint32_t i_offset, uint32_t i_offsetFieldSize, ecmdDataBuffer & i_data); 

uint32_t dllI2CMultipleCmds(ecmdChipTarget & i_target, std::list<ecmdI2CCmdEntry> & io_cmdsEntries); 

#endif /* ifndef ECMD_REMOVE_I2C_FUNCTIONS (this comment has to be here for makedll.pl to work */
#ifndef ECMD_REMOVE_GPIO_FUNCTIONS
uint32_t dllGpioConfigPin(ecmdChipTarget & i_target, uint32_t i_engineId, uint32_t i_pin, ecmdDioMode_t i_mode); 

uint32_t dllGpioReadPin(ecmdChipTarget & i_target, uint32_t i_engineId, uint32_t i_pin, uint32_t & o_state); 

uint32_t dllGpioReadLatch(ecmdChipTarget & i_target, uint32_t i_engineId, uint32_t i_pin, ecmdDioMode_t i_mode, uint32_t & o_state); 

uint32_t dllGpioWriteLatch(ecmdChipTarget & i_target, uint32_t i_engineId, uint32_t i_pin, ecmdDioMode_t i_mode, uint32_t i_state); 

uint32_t dllGpioReadPins(ecmdChipTarget & i_target, uint32_t i_engineId, uint32_t i_mask, uint32_t & o_value); 

uint32_t dllGpioWriteLatches(ecmdChipTarget & i_target, uint32_t i_engineId, ecmdDioMode_t i_mode, uint32_t i_mask, uint32_t i_value); 

uint32_t dllGpioReadConfigRegister(ecmdChipTarget & i_target, uint32_t & i_engineId, uint32_t i_configReg, uint32_t & o_value); 

uint32_t dllGpioWriteConfigRegister(ecmdChipTarget & i_target, uint32_t & i_engineId, ecmdGpioWriteMode_t i_mode, uint32_t i_configReg, uint32_t i_value); 

#endif // ECMD_REMOVE_GPIO_FUNCTIONS
#ifndef ECMD_REMOVE_POWER_FUNCTIONS
uint32_t dllSystemPowerOn(); 

uint32_t dllSystemPowerOff(); 

uint32_t dllFruPowerOn(ecmdChipTarget & i_target, bool i_smart); 

uint32_t dllFruPowerOff(ecmdChipTarget & i_target, bool i_smart); 

uint32_t dllBiasVoltage(ecmdChipTarget & i_target, uint32_t i_voltageLevel, ecmdVoltageType_t i_direction, uint32_t i_biasValue, bool i_wait); 

uint32_t dllQueryBiasState(ecmdChipTarget & i_target, uint32_t i_voltageLevel, uint32_t & o_currentVoltage, uint32_t & o_targetVoltage, uint32_t & o_timeValue); 

#endif // ECMD_REMOVE_POWER_FUNCTIONS
#ifndef ECMD_REMOVE_ADAL_FUNCTIONS
uint32_t dllAdalPsiInit(ecmdChipTarget & i_target, uint32_t i_psiPort); 

uint32_t dllAdalPsiLinkEnable(ecmdChipTarget & i_target, uint32_t i_psiPort, uint32_t i_enableState); 

uint32_t dllAdalPsiLinkVerify(ecmdChipTarget & i_target, uint32_t i_psiPort, uint32_t & o_enableState); 

uint32_t dllAdalPsiSetSpeed(ecmdChipTarget & i_target, uint32_t i_psiPort, uint32_t i_speed, uint32_t i_mode); 

#endif // ECMD_REMOVE_ADAL_FUNCTIONS
#ifndef REMOVE_SIM
uint32_t dllSimaet(const char* i_function); 

uint32_t dllSimcheckpoint(const char* i_checkpoint); 

uint32_t dllSimclock(uint32_t i_cycles); 

uint32_t dllSimecho(const char* i_message); 

uint32_t dllSimexit(uint32_t i_rc, const char* i_message); 

uint32_t dllSimEXPECTFAC(const char* i_facname, uint32_t i_bitlength, ecmdDataBuffer & i_expect, uint32_t i_row, uint32_t i_offset); 

uint32_t dllSimexpecttcfac(const char* i_tcfacname, uint32_t i_bitlength, ecmdDataBuffer & i_expect, uint32_t i_row); 

uint32_t dllSimgetcurrentcycle(uint64_t & o_cyclecount); 

uint32_t dllSimGETFAC(const char* i_facname, uint32_t i_bitlength, ecmdDataBuffer & o_data, uint32_t i_row, uint32_t i_offset); 

uint32_t dllSimGETFACX(const char* i_facname, uint32_t i_bitlength, ecmdDataBuffer & o_data, uint32_t i_row, uint32_t i_offset); 

uint32_t dllSimgettcfac(const char* i_tcfacname, ecmdDataBuffer & o_data, uint32_t i_row, uint32_t i_startbit, uint32_t i_bitlength); 

uint32_t dllSiminit(const char* i_checkpoint); 

uint32_t dllSimPOLLFAC(const char* i_facname, uint32_t i_bitlength, ecmdDataBuffer & i_expect, uint32_t i_row, uint32_t i_offset, uint32_t i_maxcycles, uint32_t i_pollinterval); 

uint32_t dllSimpolltcfac(const char* i_tcfacname, ecmdDataBuffer & i_expect, uint32_t i_row, uint32_t i_startbit, uint32_t i_bitlength, uint32_t i_maxcycles, uint32_t i_pollinterval); 

uint32_t dllSimPUTFAC(const char* i_facname, uint32_t i_bitlength, ecmdDataBuffer & i_data, uint32_t i_row, uint32_t i_offset); 

uint32_t dllSimPUTFACX(const char* i_facname, uint32_t i_bitlength, ecmdDataBuffer & i_data, uint32_t i_row, uint32_t i_offset); 

uint32_t dllSimputtcfac(const char* i_tcfacname, uint32_t i_bitlength, ecmdDataBuffer & i_data, uint32_t i_row, uint32_t i_numrows); 

uint32_t dllSimrestart(const char* i_checkpoint); 

uint32_t dllSimSTKFAC(const char* i_facname, uint32_t i_bitlength, ecmdDataBuffer & i_data, uint32_t i_row, uint32_t i_offset); 

uint32_t dllSimSTKFACX(const char* i_facname, uint32_t i_bitlength, ecmdDataBuffer & i_data, uint32_t i_row, uint32_t i_offset); 

uint32_t dllSimstktcfac(const char* i_tcfacname, uint32_t i_bitlength, ecmdDataBuffer & i_data, uint32_t i_row, uint32_t i_numrows); 

uint32_t dllSimSUBCMD(const char* i_command); 

uint32_t dllSimtckinterval(uint32_t i_tckinterval); 

uint32_t dllSimUNSTICK(const char* i_facname, uint32_t i_bitlength, uint32_t i_row, uint32_t i_offset); 

uint32_t dllSimunsticktcfac(const char* i_tcfacname, uint32_t i_bitlength, ecmdDataBuffer & i_data, uint32_t i_row, uint32_t i_numrows); 

uint32_t dllSimGetHierarchy(ecmdChipTarget & i_target, std::string & o_hierarchy); 

uint32_t dllSimGetFullFacName(ecmdChipTarget & i_target, std::string i_facName, std::string & o_fullFacName, bool i_hierarchyOnly); 

uint32_t dllQueryChipSimModelVersion(ecmdChipTarget & i_target, std::string & o_timestamp); 

uint32_t dllQueryChipScandefVersion(ecmdChipTarget & i_target, std::string & o_timestamp); 

std::string dllSimCallFusionCommand(const char* i_fusionObject, const char* i_replicaID, const char* i_command); 

uint32_t dllSimFusionRand32(uint32_t i_min, uint32_t i_max, const char* i_fusionRandObject); 

uint64_t dllSimFusionRand64(uint64_t i_min, uint64_t i_max, const char* i_fusionRandObject); 

uint32_t dllSimOutputFusionMessage(const char* i_header,  const char * i_message, ecmdFusionSeverity_t i_severity,  ecmdFusionMessageType_t i_type, const char* i_file, uint32_t i_line); 

void dllSimSetFusionMessageFormat( const char* i_format); 

uint32_t dllSimPutDial(const char* i_dialName, const std::string i_value); 

uint32_t dllSimGetDial(const char* i_dialName, std::string & o_value); 

uint32_t dllSimGetOutFile(const char* i_filename, std::string & o_absFilename); 

uint32_t dllSimGetInFile(const char* i_filename, std::string & o_absFilename); 

uint32_t dllSimGetEnvironment(const char* i_envName, std::string & o_envValue); 

uint32_t dllSimGetModelInfo(ecmdSimModelInfo& o_modelInfo); 

uint32_t dllSimWaitUntil(const char* i_facName, uint32_t i_bitNumber, uint32_t i_bitValue, uint64_t i_timeOut, bool i_passive); 

#endif /* ifndef REMOVE_SIM (this comment has to be here for makedll.pl to work */
void dllPushCommandArgs(); 

void dllPopCommandArgs(); 

uint32_t dllGetScandefOrder(ecmdChipTarget & i_target, uint32_t & o_mode); 

std::string dllGetCurrentCmdline(); 

void dllSetCurrentCmdline(int argc, char* argv[]); 

} //extern C

#endif
/* The previous has been auto-generated by makedll.pl */
