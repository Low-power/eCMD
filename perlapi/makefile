# $Header$
# Makefile for the ecmd Perl Module

# Base info and default build rules
SUBDIR     := perlapi/
include ../makefile.rules

VPATH        := ../capi:${SRCPATH}
INCLUDES     := ecmdClientCapi.H  ecmdDataBufferBase.H  ecmdDataBuffer.H ecmdReturnCodes.H ecmdStructs.H ecmdClientPerlapi.H ecmdBit64.H
SOURCE       := ecmdClientPerlapi.C ecmdClientPerlapiFunc.C ecmdBit64.C
# This is the source generated by makepm.pl
GENERATED_SOURCE   := ecmdClientPerlapiFunc.C
GENERATED_INCLUDES := ecmdClientPerlapiFunc.H ecmdClientPerlapiIterators.H
# This source is generated by swig below
SWIG_SOURCE  := ecmdClientPerlapiSwig.C
CFLAGS       := ${CFLAGS} -I../capi -I../dll -I${SRCPATH}
SWIGFLAGS    := ${SWIGFLAGS} -c++ -perl5 -exportall -const -I../capi -I../dll -I${SRCPATH} -DECMD_PERLAPI

# Ok, tack on all the extension stuff
VPATH        := ${VPATH}$(foreach ext, ${EXTENSIONS},:../ext/${ext}/capi:../ext/${ext}/perlapi)
VPATH        := $(subst ${space},,${VPATH})

INCLUDES     := ${INCLUDES} $(foreach ext, ${EXTENSIONS}, ${ext}ClientPerlapi.H ${ext}ClientCapi.H )
CFLAGS       := ${CFLAGS} $(foreach ext, ${EXTENSIONS},-I../ext/${ext}/capi -I../ext/${ext}/perlapi -DECMD_$(shell echo ${ext} | tr "a-zA-Z" "A-Za-z")_EXTENSION_SUPPORT)
SWIGFLAGS    := ${SWIGFLAGS} $(foreach ext, ${EXTENSIONS},-I../ext/${ext}/perlapi -I../ext/${ext}/capi -DECMD_$(shell echo ${ext} | tr "a-zA-Z" "A-Za-z")_EXTENSION_SUPPORT)
SOURCE       := ${SOURCE} $(foreach ext, ${EXTENSIONS}, ${ext}ClientPerlapi.C ${ext}ClientPerlapiFunc.C)
# Remove the fapiClientPerlapiFunc.C from the build, only will use fapiClientPerlapi.C which has the init extension
SOURCE       := $(subst fapi2ClientPerlapiFunc.C,,${SOURCE})
SOURCE       := $(subst fapiClientPerlapiFunc.C,,${SOURCE})

# *****************************************************************************
# The Common Setup stuff
# *****************************************************************************
PM_TARGET := ecmd.pm
SO_TARGET := ecmd.so
LINK_OBJS := ${LINK_OBJS} ${OBJROOT}/capi/${OBJDIR}/ecmdClientCapi.a
# remove fapi here and add initFapiExtention only
ifeq (fapi2,$(filter ${EXTENSIONS},fapi2))
  LINK_OBJS  := ${LINK_OBJS} ${OBJROOT}/ext/fapi2/capi/${OBJDIR}/fapi2ClientCapiInit.o
endif
ifeq (fapi,$(filter ${EXTENSIONS},fapi))
  LINK_OBJS  := ${LINK_OBJS} ${OBJROOT}/ext/fapi/capi/${OBJDIR}/fapiClientCapiInit.o
endif
LINK_EXTENSIONS := $(subst fapi2,,${EXTENSIONS})
LINK_EXTENSIONS := $(subst fapi,,${LINK_EXTENSIONS})
LINK_OBJS  := ${LINK_OBJS} $(foreach ext, ${LINK_EXTENSIONS}, ${OBJROOT}/ext/${ext}/capi/${OBJDIR}/${ext}ClientCapi.a)
VPATH      := ${VPATH}:${OBJPATH}
ifeq (${TARGET_ARCH},x86)
  SWIG     ?= /gsa/${GSACELL}/projects/e/ecmd/utils/swig-1.3.39/x86/bin/swig
else ifeq (${TARGET_ARCH},aix)
  SWIG     ?= /gsa/${GSACELL}/projects/e/ecmd/utils/swig-1.3.39/aix/bin/swig
else ifeq (${TARGET_ARCH},aix64)
  SWIG     ?= /gsa/${GSACELL}/projects/e/ecmd/utils/swig-1.3.39/aix/bin/swig
else
  SWIG     ?= /usr/bin/swig
endif
SWIGFLAGS := ${SWIGFLAGS} -I../perlapi

# *****************************************************************************
# The x86 Linux Setup stuff
# *****************************************************************************
ifeq (${TARGET_OS},x86)
  SLDFLAGS  := ${SLDFLAGS}
  LDLIBS    := ${LDLIBS} -L${OBJROOT}/capi/${OBJDIR} -lecmd
  ifeq (${TARGET_ARCH},x86)
    PERLINC ?= -I${CTEPATH}/tools/perl/5.8.1/lib/5.8.1/i386_linux24/CORE
  else
    PERLINC ?= -I${CTEPATH}/tools/perl/5.8.1/lib64/5.8.1/amd64_linux26_RH6-64/CORE
    # If the PERLINC above didn't get redefined and we're building using CTE, the extra define below is required
    # If we are building using the local install of perl (such as /usr/lib64/perl5/CORE), it's not needed
    ifneq ($(strip $(shell echo ${PERLINC} | grep amd64_linux26_RH6-64)),)
      DEFINES := ${DEFINES} -DHAS_MODFL_PROTO=1
    endif
  endif
endif

# *****************************************************************************
# The ppc Linux Setup stuff
# *****************************************************************************
ifeq (${TARGET_OS},ppc)
  CFLAGS    := ${CFLAGS} -mcmodel=medium
  SLDFLAGS  := ${SLDFLAGS}
  LDLIBS    := ${LDLIBS} -L${OBJROOT}/capi/${OBJDIR} -lecmd
  ifeq (${TARGET_ARCH},ppc)
    PERLINC ?= -I/usr/lib/perl5/CORE/
  else
    PERLINC ?= -I/usr/lib64/perl5/CORE/
  endif
endif

# *****************************************************************************
# The Aix Setup stuff
# *****************************************************************************
ifeq (${TARGET_OS},aix)
  ifeq (${TARGET_ARCH},aix64)
    SLDFLAGS  := ${SLDFLAGS} -lpthreads -Wl,-bbigtoc -Wl,-bI:${CTEPATH}/tools/perl/5.8.1/lib64/5.8.1/rs_aix53-64/CORE/perl.exp -L ${OBJROOT}/capi/${OBJDIR} -l ecmd -pthread
    CFLAGS    := ${CFLAGS} -mcmodel=large
    PERLINC   ?= -I${CTEPATH}/tools/perl/5.8.1/lib64/5.8.1/rs_aix53-64/CORE -pthread
  else
    SLDFLAGS  := ${SLDFLAGS} -lpthreads -bI:${CTEPATH}/tools/perl/5.8.1/lib/5.8.1/rs_aix53/CORE/perl.exp -L ${OBJROOT}/capi/${OBJDIR} -l ecmd
    PERLINC   ?= -I${CTEPATH}/tools/perl/5.8.1/lib/5.8.1/rs_aix53/CORE
  endif
  DEFINES   := ${DEFINES} -DHAS_BOOL=1
endif

# *****************************************************************************
# The Main Targets
# *****************************************************************************
all:
	@echo "Generating source ..."
	@${MAKE} gensource ${GMAKEFLAGS} --no-print-directory
	@echo "Calling swig ..."
	@${MAKE} swig ${GMAKEFLAGS} --no-print-directory
	@echo "Compiling source ..."
	@${MAKE} buildsource ${GMAKEFLAGS} --no-print-directory
	@echo "Testing build ..."
	@${MAKE} test ${GMAKEFLAGS} --no-print-directory
	@echo " "

swig: ${SWIG_SOURCE}

gensource: ${GENERATED_SOURCE} ${GENERATED_INCLUDES}

buildsource: ${SO_TARGET}

clean: objclean
	rm -f ${GENERATED_SOURCE}
	rm -f ${GENERATED_INCLUDES}

objclean:
	rm -rf ${OBJPATH}
	rm -rf ${SRCPATH}
	rm -f *.o

#Remove create_links after fair warning has been given to users to update paths
install: create_links
	@echo "Installing eCMD PerlApi to ${INSTALL_PATH}/${TARGET_ARCH}/perl ..."
	cp ${OBJPATH}${PM_TARGET} ${INSTALL_PATH}/${TARGET_ARCH}/perl/.
	cp ${OBJPATH}${SO_TARGET} ${INSTALL_PATH}/${TARGET_ARCH}/perl/.

create_links:
  ifeq (${TARGET_ARCH},$(filter ${TARGET_ARCH},x86 aix))
	@echo "Creating temporary symlinks for perl module and shared object"
	@mkdir -p ${INSTALL_PATH}/perlapi/`uname`/
	@ln -sf ../../${TARGET_ARCH}/perl/${PM_TARGET} ${INSTALL_PATH}/perlapi/`uname`/${PM_TARGET}
	@ln -sf ../../${TARGET_ARCH}/perl/${SO_TARGET} ${INSTALL_PATH}/perlapi/`uname`/${SO_TARGET}	
  endif

test: ${SO_TARGET}
        ifeq (${TARGET_OS},aix)
	@slibclean
        endif
	@echo "***** If you see perl load errors this build of the perl module is invalid, ignore ECMD_DLL_FILE errors ****"
	@ECMD_DLL_FILE=${OBJROOT}/dllStub/${OBJDIR}/stub.dll PERL5LIB=${OBJPATH} LD_LIBRARY_PATH=${OBJROOT}/capi/${OBJDIR} ECMD_ARCH=${TARGET_ARCH} ./testBuild.pl


# *****************************************************************************
# Object Build Targets
# *****************************************************************************
SOURCE_OBJS := $(basename ${SOURCE})
SOURCE_OBJS := $(addprefix ${OBJPATH}, ${SOURCE_OBJS})
SOURCE_OBJS := $(addsuffix .o, ${SOURCE_OBJS})
SWIG_OBJS   := $(basename ${SWIG_SOURCE})
SWIG_OBJS   := $(addprefix ${OBJPATH}, ${SWIG_OBJS})
SWIG_OBJS   := $(addsuffix .o, ${SWIG_OBJS})

# *****************************************************************************
# Create directories from order only dependencies
# *****************************************************************************
${SRCPATH} ${OBJPATH}:
	@mkdir -p $@

# *****************************************************************************
# Compile code for the common C++ objects if their respective
# code has been changed.  Or, compile everything if a header
# file has changed.
# *****************************************************************************
${SOURCE_OBJS}: ${OBJPATH}%.o : %.C ${INCLUDES} ${GENERATED_INCLUDES} | ${SRCPATH}
	${CC_R} -c ${CFLAGS} ${PERLINC} $< -o $@ ${DEFINES}

${SWIG_SOURCE}: ${INCLUDES} ${GENERATED_INCLUDES} ecmdClientPerlapi.i ecmdString.i ecmdVector.i ecmdList.i ecmdCommon.i ecmdClientPerlapi.pl | ${SRCPATH} ${OBJPATH}
	${SWIG} ${SWIGFLAGS} ${DEFINES} -o ${SRCPATH}/${SWIG_SOURCE} -outdir ${OBJPATH} ecmdClientPerlapi.i

${SWIG_OBJS}: ${OBJPATH}%.o : %.C ${SWIG_SOURCE} | ${SRCPATH}
	${CC_R} -c ${CFLAGS} ${PERLINC} $< -o $@ ${DEFINES}

# *****************************************************************************
# Create the Perl Shared Library
# *****************************************************************************
${SO_TARGET}: ${SOURCE_OBJS} ${SWIG_OBJS} ${LINK_OBJS}
	${LD_R} ${SLDFLAGS} $^ -o ${OBJPATH}${SO_TARGET} ${LDLIBS}


# *****************************************************************************
# Autogenerate the Perl Wrapper
# *****************************************************************************
# These have to be two separate targets because the generate include has to be there to build to generated source
${GENERATED_INCLUDES}: ${INCLUDES} makepm.pl 
	@echo "==== Auto Generating $@"
	@chmod 777 makepm.pl
	@./makepm.pl ecmd $@

${GENERATED_SOURCE}: ${GENERATED_INCLUDES} makepm.pl 
	@echo "==== Auto Generating $@"
	@chmod 777 makepm.pl
	@./makepm.pl ecmd $@

# *****************************************************************************
# Debug rule for any makefile testing 
# *****************************************************************************
debug:
	@echo ${ECMD_ROOT}
	@echo ${SUBDIR}
