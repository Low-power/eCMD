# Makefile for the ecmd Perl Module
# Written by Chris Engel

# $Header$

ECMD_ROOT    := ${PWD}/../
# The default build rules
include ${ECMD_ROOT}/makefile.rules

VPATH        := ../capi/export
INCLUDES     := ecmdClientCapi.H  ecmdDataBuffer.H  ecmdReturnCodes.H ecmdStructs.H ecmdClientPerlapi.H ecmdBit64.H
INT_INCLUDES := 
SOURCE       := ecmdClientPerlapi.C ecmdClientPerlapiFunc.C ecmdBit64.C
# This is the source generated by makepm.pl
GENERATED_SOURCE   := ecmdClientPerlapiFunc.C
GENERATED_INCLUDES := ecmdClientPerlapiFunc.H ecmdClientPerlapiIterators.H
DEFINES      := 
CFLAGS       := ${CFLAGS} -I../capi/export -I../dll
SWIGFLAGS    := ${SWIGFLAGS} -c++ -perl5 -exportall -const -I../capi/export -I../dll -DECMD_PERLAPI

# Ok, tack on all the extension stuff
VPATH        := ${VPATH}$(foreach ext, ${EXTENSIONS},:../ext/${ext}/capi/export:../ext/${ext}/perlapi)
#These are needed to define a space char for substitutions later on
empty :=
space := ${empty} ${empty}
VPATH := $(subst ${space},,${VPATH})

INCLUDES     := ${INCLUDES} $(foreach ext, ${EXTENSIONS}, ${ext}ClientPerlapi.H ${ext}ClientCapi.H )
ifeq (${OS},Linux_x86)
  LINK_OBJS  := $(foreach ext, ${EXTENSIONS}, ../ext/${ext}/capi/export/${ext}ClientCapi_x86.a)
endif
ifeq (${OS},Linux_ppc)
  LINK_OBJS  := $(foreach ext, ${EXTENSIONS}, ../ext/${ext}/capi/export/${ext}ClientCapi_ppc.a)
endif
ifeq (${OS},AIX)
  LINK_OBJS  := $(foreach ext, ${EXTENSIONS}, ../ext/${ext}/capi/export/${ext}ClientCapi_aix.a)
endif
CFLAGS       := ${CFLAGS} $(foreach ext, ${EXTENSIONS}, -I../ext/${ext}/capi/export -I../ext/${ext}/perlapi)
SWIGFLAGS    := ${SWIGFLAGS} $(foreach ext, ${EXTENSIONS}, -I../ext/${ext}/perlapi -I../ext/${ext}/capi/export)
SOURCE       := ${SOURCE} $(foreach ext, ${EXTENSIONS}, ${ext}ClientPerlapi.C ${ext}ClientPerlapiFunc.C)

# *****************************************************************************
# The x86 Linux Setup stuff
# *****************************************************************************
ifeq (${OS},Linux_x86)
  TARGET    := ecmd
  LDFLAGS   := -shared -L../capi/export -lecmd_x86
  LINK_OBJS := ${LINK_OBJS} ../capi/export/ecmdClientCapi_x86.a 
  #CFLAGS    := ${CFLAGS} -fPIC -ftemplate-depth-30 -Wall
  CFLAGS    := ${CFLAGS} -ftemplate-depth-30 -Wall
  ifeq ($(strip ${PERLINC}),)
    PERLINC   := -I${CTEPATH}/tools/perl/5.8.1/lib/5.8.1/i386_linux24/CORE
  endif
  ifeq ($(strip ${SWIG}),)
    SWIG      := ${CTEPATH}/tools/ecmd/utils/swig-1.3.31/bin/swig
  endif
  ifeq ($(strip ${SWIGDIR}),)
    SWIGFLAGS := ${SWIGFLAGS} -I${CTEPATH}/tools/ecmd/utils/swig-1.3.31/lib -I${CTEPATH}/tools/ecmd/utils/swig-1.3.31/lib/perl5
  else
    SWIGFLAGS := ${SWIGFLAGS} -I${SWIGDIR}/perl5 -I${SWIGDIR}
  endif
endif

# *****************************************************************************
# The ppc Linux Setup stuff
# *****************************************************************************
ifeq (${OS},Linux_ppc)
  TARGET    := ecmd
  LDFLAGS   := -shared -L../capi/export -lecmd_ppc
  LINK_OBJS := ${LINK_OBJS} ../capi/export/ecmdClientCapi_ppc.a 
  CFLAGS    := ${CFLAGS} -ftemplate-depth-30 -Wall
  ifeq ($(strip ${PERLINC}),)
    PERLINC   := -I${CTEPATH}/tools/perl/5.8.1/lib/5.8.1/i386_linux24/CORE
  endif
  ifeq ($(strip ${SWIG}),)
    SWIG      := ${CTEPATH}/tools/ecmd/utils/swig-1.3.31/bin/swig
  endif
  ifeq ($(strip ${SWIGDIR}),)
    SWIGFLAGS := ${SWIGFLAGS} -I${CTEPATH}/tools/ecmd/utils/swig-1.3.31/lib -I${CTEPATH}/tools/ecmd/utils/swig-1.3.31/lib/perl5
  else
    SWIGFLAGS := ${SWIGFLAGS} -I${SWIGDIR}/perl5 -I${SWIGDIR}
  endif
endif

# *****************************************************************************
# The Aix Setup stuff
# *****************************************************************************
ifeq (${OS},AIX)
  # We have to use the re-entrant version, so override the default setup in makefile.rules
  CC      := /afs/rchland.ibm.com/rs_aix53/lpp/vacpp.6008/usr/vacpp/bin/xlC_r.6008
  ifeq (${SITE},apd.pok.ibm.com)
    CC      := xlC_r
  endif
  ifeq (${SITE},awd.austin.ibm.com)
    CC      := xlC_r
  endif
  LD       := ${CC}

  TARGET    := ecmd
  LDFLAGS   := -qmkshrobj -brtl -lpthreads -bI:${CTEPATH}/tools/perl/5.8.1/lib/5.8.1/rs_aix53/CORE/perl.exp -L ../capi/export -l ecmd_aix
  LINK_OBJS := ${LINK_OBJS} ../capi/export/ecmdClientCapi_aix.a
  CFLAGS    := ${CFLAGS}  -qstaticinline -qnoinline -+
  ifeq ($(strip ${PERLINC}),)
    PERLINC   := -I${CTEPATH}/tools/perl/5.8.1/lib/5.8.1/rs_aix53/CORE
  endif
  ifeq ($(strip ${SWIG}),)
    SWIG      := ${CTEPATH}/tools/ecmd/utils/swig-1.3.31/bin/swig
  endif
  ifeq ($(strip ${SWIGDIR}),)
    SWIGFLAGS := ${SWIGFLAGS} -I${CTEPATH}/tools/ecmd/utils/swig-1.3.31/lib -I${CTEPATH}/tools/ecmd/utils/swig-1.3.31/lib/perl5
  else
    SWIGFLAGS := ${SWIGFLAGS} -I${SWIGDIR}/perl5 -I${SWIGDIR}
  endif
  DEFINES   := ${DEFINES} -DHAS_BOOL=1
endif

VPATH     := ${VPATH}:${SUBDIR}

# *****************************************************************************
# The Main Targets
# *****************************************************************************
all: dir ${TARGET}.so ${TARGET}.pm move test

move: ${TARGET}.so ${TARGET}.pm
	@touch t.o tecmd.so tecmd.pm t_wrap.c
	@mv *_wrap.c *.o *ecmd.so *ecmd.pm  ${SUBDIR}

clean: objclean exportclean
	rm -f *wrap*
	rm -f ${GENERATED_SOURCE}
	rm -f ${GENERATED_INCLUDES}

objclean:
	rm -rf ${SUBDIR}
	rm -f *.o
	rm -f ecmd.pm
	rm -f ecmd.so

exportclean:
       # Nothing to do

install:
	@echo "Installing eCMD PerlApi to ${INSTALL_PATH}/perlapi/`uname`/ ..."
	@mkdir -p ${INSTALL_PATH}/perlapi/`uname`/
	cp ${SUBDIR}${TARGET}.so ${INSTALL_PATH}/perlapi/`uname`/.
	cp ${SUBDIR}${TARGET}.pm ${INSTALL_PATH}/perlapi/`uname`/.

dir:
	@mkdir -p ${SUBDIR}

test: move
        ifeq (${OS},AIX)
	@slibclean
        endif
	@echo "***** If you see perl load errors this build of the perl module is invalid, ignore ECMD_DLL_FILE errors ****"
	@./testBuild.pl

# *****************************************************************************
# Object Build Targets
# *****************************************************************************
SOURCE_OBJS  = $(basename $(SOURCE))
SOURCE_OBJS := $(addsuffix .o, $(SOURCE_OBJS))

# *****************************************************************************
# Compile code for the common C++ objects if their respective
# code has been changed.  Or, compile everything if a header
# file has changed.
# *****************************************************************************
$(SOURCE_OBJS): %.o : %.C ${INCLUDES} ${INT_INCLUDES} ${GENERATED_INCLUDES}
	$(CC) -c $(CFLAGS) ${PERLINC} $< -o $@ $(DEFINES)

${TARGET}.pm ecmdClientPerlapi_wrap.c: ${INCLUDES} ecmdClientPerlapi.i ecmdString.i ecmdVector.i ecmdList.i ecmdCommon.i ecmdClientPerlapi.pl 
	${SWIG} ${SWIGFLAGS} -o ecmdClientPerlapi_wrap.c ecmdClientPerlapi.i
# This was not necessary after all.  The ecmdChipTarget is a union on the C side of the inteface.
# This means they share memory and we don't have to update the variables.  Special handling is only
# required in ecmdStructs.H to expose the core and chipUnitNum on the interface
# since union isn't supported there
# Tab this all back in and uncomment it if for some reason you need it
#${SWIG} ${SWIGFLAGS} -o ecmdClientPerlapi_wrap_prefix.c ecmdClientPerlapi.i
#@echo "==== Fixing wrap file so that a core access sets chipUnitNum as well"
#@sed "s/if (arg1) (arg1)->core = arg2/if (arg1) { (arg1)->core = arg2; (arg1)->chipUnitNum = arg2; }/g" ecmdClientPerlapi_wrap_prefix.c > ecmdClientPerlapi_wrap.c

ecmdClientPerlapi_wrap.o: ecmdClientPerlapi_wrap.c
	${CC} -c ${CFLAGS} ${PERLINC} $< -o $@ ${DEFINES}

# *****************************************************************************
# Create the Perl Shared Library
# *****************************************************************************
${TARGET}.so: ${SOURCE_OBJS}  ecmdClientPerlapi_wrap.o ${LINK_OBJS}
	${LD} ${LDFLAGS} $^ ${LINK_OBJS} -o $@ 


# *****************************************************************************
# Autogenerate the Perl Wrapper
# *****************************************************************************
# These have to be two separate targets because the generate include has to be there to build to generated source
${GENERATED_INCLUDES}: ${INCLUDES} makepm.pl 
	@echo "==== Auto Generating $@"
	@chmod 777 makepm.pl
	@./makepm.pl ecmd $@

${GENERATED_SOURCE}: ${GENERATED_INCLUDES} makepm.pl 
	@echo "==== Auto Generating $@"
	@chmod 777 makepm.pl
	@./makepm.pl ecmd $@

