# Makefile for the ecmd cmdline

# *****************************************************************************
# Define base info and include any global variables
# *****************************************************************************
SUBDIR     := cmd/
include ../../makefile.vars

### Includes
INCLUDES     := ecmdClientCapi.H  ecmdDataBuffer.H  ecmdDataBufferBase.H ecmdReturnCodes.H ecmdStructs.H ecmdUtils.H ecmdSharedUtils.H
INT_INCLUDES := ecmdInterpreter.H ecmdExtInterpreter.H ecmdCommandUtils.H

### Source
SOURCE       := ecmdInterpreter.C ecmdCommandUtils.C 
SOURCE       := ${SOURCE} ecmdScomUser.C ecmdRingUser.C ecmdQueryUser.C 
SOURCE       := ${SOURCE} ecmdSpyUser.C ecmdSimUser.C ecmdArrayUser.C ecmdJtagUser.C 
SOURCE       := ${SOURCE} ecmdProcUser.C ecmdMemUser.C ecmdIstepUser.C ecmdMiscUser.C 
SOURCE       := ${SOURCE} ecmdVpdUser.C ecmdI2cGpioUser.C ecmdPowerUser.C ecmdPsiUser.C

# This is broke out so it doesn't get included in the archive
MAIN_SOURCE  := ecmdMain.C

# The source file for ecmdVersion is a separate build from the rest
VER_SOURCE   := ecmdVersion.C

# This is the source generated by makeext.py
GENERATED_SOURCE := ecmdExtInterpreter.C

# Don't want to include the cmd extension
EXTENSIONS   := $(subst cmd,,${EXTENSIONS})
# Don't want to include the scand extension, there isn't one
EXTENSIONS   := $(subst scand,,${EXTENSIONS})
# Don't want to include the fapi extension, there isn't one
EXTENSIONS   := $(subst fapi2,,${EXTENSIONS})
EXTENSIONS   := $(subst fapi,,${EXTENSIONS})

### Concat variables together for the build
SOURCE   := ${GENERATED_SOURCE} ${SOURCE}
INCLUDES := ${INCLUDES} $(foreach ext, ${EXTENSIONS}, ${ext}Interpreter.H ${ext}ClientCapi.H ${ext}Structs.H)

### Setup our link objs
LINK_OBJS  := ${LINK_OBJS} ${OUTLIB}/ecmdClientCapi.a
LINK_OBJS  := ${LINK_OBJS} $(foreach ext, ${EXTENSIONS}, ${OUTLIB}/${ext}ClientCapi.a ${OUTLIB}/${ext}CmdInterpreter.a)

# Setup our CFLAGS and VPATH
VPATH        := ${VPATH}$(foreach ext, ${EXTENSIONS},:../ext/${ext}/cmd/:../ext/${ext}/capi/)
VPATH        := ${VPATH}:${OBJPATH}:${SRCPATH}:${ECMD_CORE}/capi

CFLAGS       := ${CFLAGS} -I${ECMD_CORE}/capi -I${ECMD_CORE}/dll -I${SRCPATH}
CFLAGS       := ${CFLAGS} $(foreach ext, ${EXTENSIONS},-I../ext/${ext}/cmd -I../ext/${ext}/capi -DECMD_$(shell echo ${ext} | tr "a-zA-Z" "A-Za-z")_EXTENSION_SUPPORT)

# *****************************************************************************
# Define our output files
# *****************************************************************************
TARGET     := ecmd
VER_TARGET := ecmdVersion
AR_TARGET  := ecmdClientCmd.a

# *****************************************************************************
# The x86 Linux Setup stuff
# *****************************************************************************
ifeq (${TARGET_OS},x86)
  ifeq (${TARGET_ARCH},x86)
    LDLIBS    := ${LDLIBS} -ldl -L${OUTLIB} -lecmd
  else
    LDLIBS    := ${LDLIBS} -ldl -L${OUTLIB} -lecmd -lz
  endif
endif

# *****************************************************************************
# The ppc Linux Setup stuff
# *****************************************************************************
ifeq (${TARGET_OS},ppc)
  LDLIBS    := ${LDLIBS} -ldl -L${OUTLIB} -lecmd
endif

# *****************************************************************************
# The Aix Setup stuff
# *****************************************************************************
ifeq (${TARGET_OS},aix)
  ifeq (${TARGET_ARCH},aix)
    LDLIBS    := -brtl -w -L${OUTLIB} -lecmd
  else
    ifeq (${TARGET_ARCH},aix64)
      LDLIBS    := -Wl,-brtl -L${OUTLIB} -lecmd -lz
	else
      LDLIBS    := -brtl -w -L${OUTLIB} -lecmd -lz
    endif
  endif
endif

# *****************************************************************************
# The Main Targets
# *****************************************************************************
# The run-all rule is defined in makefile.rules
all:
	${run-all}

generate: ${GENERATED_SOURCE}

build: ${TARGET} ${VER_TARGET} ${AR_TARGET}

test:
  # Do nothing

install:
	cp ${OBJPATH}/${TARGET} ${INSTALL_PATH}/${TARGET_ARCH}/bin/
	cp ${OBJPATH}/${VER_TARGET} ${INSTALL_PATH}/${TARGET_ARCH}/bin/

# Build the extensions
extensions:
	@echo " "
	@echo "Building Main Client Api ..."
	@cd ../capi;gmake
	@echo " "
	@echo "Building Extension Client Api's ..."
	@cd ../ext/template/capi;$(foreach ext, ${EXTENSIONS}, cd ../../${ext}/capi;gmake; echo " ";)
	@echo " "
	@echo "Building Extension Command Interpreters ..."
	@cd ../ext/template/cmd;$(foreach ext, ${EXTENSIONS}, cd ../../${ext}/cmd;gmake; echo " ";)
	@echo " "
	@echo "Building Main Command Interpreter ..."

# *****************************************************************************
# Object Build Targets
# *****************************************************************************
SOURCE_OBJS  = $(basename $(SOURCE))
SOURCE_OBJS := $(addprefix ${OBJPATH}, $(SOURCE_OBJS))
SOURCE_OBJS := $(addsuffix .o, $(SOURCE_OBJS))
VER_SOURCE_OBJS  = $(basename $(VER_SOURCE))
VER_SOURCE_OBJS := $(addprefix ${OBJPATH}, $(VER_SOURCE_OBJS))
VER_SOURCE_OBJS := $(addsuffix .o, $(VER_SOURCE_OBJS))
MAIN_SOURCE_OBJS  = $(basename $(MAIN_SOURCE))
MAIN_SOURCE_OBJS := $(addprefix ${OBJPATH}, $(MAIN_SOURCE_OBJS))
MAIN_SOURCE_OBJS := $(addsuffix .o, $(MAIN_SOURCE_OBJS))

# *****************************************************************************
# Compile code for the common C++ objects if their respective
# code has been changed.  Or, compile everything if a header
# file has changed.
# *****************************************************************************
$(SOURCE_OBJS) $(MAIN_SOURCE_OBJS) $(VER_SOURCE_OBJS): ${OBJPATH}%.o : %.C ${INCLUDES} ${INT_INCLUDES}
	@echo Compiling $<
	${VERBOSE}${CC} -c ${CFLAGS} $< -o $@ ${DEFINES}

# *****************************************************************************
# Create the Client 
# *****************************************************************************
${TARGET}: ${SOURCE_OBJS} ${MAIN_SOURCE_OBJS} ${LINK_OBJS}
	@echo Linking $@
	${VERBOSE}${LD} ${LDFLAGS} $^ -o ${OUTBIN}/${TARGET} ${LDLIBS}

${VER_TARGET}: ${VER_SOURCE_OBJS}
	@echo Linking $@
	${VERBOSE}${LD} ${LDFLAGS} $^ -o ${OUTBIN}/${VER_TARGET} ${LDLIBS}

${AR_TARGET}: ${SOURCE_OBJS}
	@echo Creating $@
	${VERBOSE}${AR} r ${OUTLIB}/${AR_TARGET} $^

# *****************************************************************************
# Autogenerate some of the extension source
# *****************************************************************************
${GENERATED_SOURCE}:
	@echo "Generating $@"
	@${ECMD_ROOT}/mkscripts/makeext.py cmd

# *****************************************************************************
# Include any global default rules
# *****************************************************************************
include ${ECMD_ROOT}/makefile.rules
