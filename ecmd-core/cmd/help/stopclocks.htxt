
Syntax: stopclocks                                   [-force] [-skip_iovalid]
        stopclocks -domain <ConvenienceClockDomain>] [-force] [-skip_iovalid]
        stopclocks <Chip[.ChipUnit]> [<ClockDomain>] [-force] [-skip_iovalid]
        [-quiet] [-quieterror] [-exist] [-coe] [-a#] [-k#] [-n#] [-s#] [-p#] [-c#]

        ECMD:           Core Common Function

        Function:       Stop clocks on a particular domain/chip or the whole system.

        Parameters:
        --------------------------------------------------------------------------------
        Chip            Specifies the chip to operate on.
        ChipUnit [opt]  If you are using ChipUnits, you also specify your ChipUnit
                        w/o  ChipUnit: pu
                        with ChipUnit: pu.mc

        ClockDomain     Clock domain to stop on chip target. Must specify with Chip
                        Names are documented in the scandef for the targetted chip.

        -domain         Specifies we are using a convenience clock domain.

        ConvenienceClockDomain The convenience clock domains are documented in the eCMD
                        System specific document for your system type. Must be specified
                        with -domain

        -force    [opt] Force clocks off regardless of current state
        -skip_iovalid   Skip calling iovalid code when stopclocks is invoked
                  [opt]

                        Run 'ecmdquery options' for a list of the global command line
                        options and their definitions
        --------------------------------------------------------------------------------

        Examples:       > stopclocks pu -k0 -n1 -p3
                        > stopclocks pu FBC_DOMAIN -k1 -n2
                        > stopclocks 
                        > stopclocks -domain ALL_PU_CHIPS

        P8S1 Specific Examples:
                        > stopclocks pu         # stops nest, ex, xbus, abus, pcie clocks
                        > stopclocks pu pcie    # stops pcie clock only 
                        > stopclocks pu xbus    # stops the xbus clocks only
                        > stopclocks pu abus    # stops the abus clocks only
                        > stopclocks pu nest    # stops the nest clocks only
                        > stopclocks pu.ex refr # stops ex and dram refresh clocks only
                        > stopclocks pu.ex dpll # stops ex and dpll clocks only
                        > stopclocks pu.ex ex   # stops ex clocks
                        > stopclocks pu.ex      # stops ex clocks
                        > stopclocks pu.ex -c4  # stops ex4 clocks only
                        > stopclocks pu perv    # stops pervasive/tp domain only

        P9 Specific Examples:
	               > stopclocks pu all      # stops all clocks except tp, pib, vitl
		       > stopclocks pu pcie     # stops pcie clock only
		       > stopclocks pu cachecore# stops cache & core clocks only
		       > stopclocks pu pervpib  # stops perv and pib only
		       > stopclocks pu vitl     # stops only vital clocks

			To skip the setting of the io valid bits for the X/A bus
			use -skip_iovalid
