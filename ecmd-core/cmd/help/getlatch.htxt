
Sytnax: getlatch <Chip[.ChipUnit]> [<RingName>] <LatchName> [<Start> <Numbits>] [-exact | -partial] 
                              [-sparse] [-exp <value>] [-o<format>] [-mcast<value>] [-set_pulse_cond] [-set_pulse_cond_all]
        [-quiet] [-quieterror] [-exist] [-coe] [-a#] [-k#] [-n#] [-s#] [-p#] [-c#]

        ECMD:           Core Common Function

        Function:       Gets values for specified latch names in a ring.  The 
                        latch names in the scandef file are searched for the
                        substring LatchName for a match.  Each register containing the
                        pattern-matched substring will be printed to the screen.  
                        
                        With the -exact option, eCMD searches for an exact match, and 
                        will return only the first latch that exactly matches (excluding
                        any parentheses). This option also enables searching the scandef
                        with a hash file which greatly increases performance.

                        The -nocompress flag turns off concatenation of all latches of 
                        a register in the scandef and displays on seperate lines as 
                        they appear in the scandef.

        Parameters:
        --------------------------------------------------------------------------------
        Chip                    Specifies the chip to operate on.
        ChipUnit [opt]          If you are using ChipUnits, you also specify your ChipUnit
                                w/o  ChipUnit: pu
                                with ChipUnit: pu.mc
        
        RingName  [opt]         Specifies chip ring to operate on.  For a list of available
                                rings, use the ecmdquery command.
                                NOTE : If not specified all rings in scandef are searched

                                Ex:  ecmdquery rings memctrl
                                     ecmdquery rings pu

        LatchName               Desired latch to find in the ring. (case sensitive)

        Start     [opt]         Starting bit position within the latch. Specify with Numbits. 
        Numbits   [opt]         Number of bits to get. Specify along with Start. If out of range,
                                and -exact not selected, prints a warning message instead of the
                                data. If -exact is selected, immediately returns an error.

        -exact    [opt]         No pattern matching. Instead, search for exact latch name. (default)

        -partial  [opt]         Use pattern matching to find latch name, can be considerably slower.

        -sparse   [opt]         Uses scan via scom sparse ring access to get the bits out of the ring.

        -exp [optional]         Provide an expected-value as the last argument. Returns error if
                                data miscompare, else nothing.
                                Format specified by -i<format>

        -o<format>[opt]         Specifies the format type of both the output and 
                                the expect-value
                                Defaults to 'b' for < 8 bits and 'xl' for >= 8 bits.
                                Run 'ecmdquery formats' to view available formats

        -i<format>[opt]         Specifies the format type of expect data
                                Run 'ecmdquery formats' to view available formats

        -mcast<value>           Creates a multicast scan address for the ring.
                                Value can be just multicast group number, or fully encoded first byte of address to use.

        -set_pulse_cond [opt]   Uses the ECMD_RING_MODE_SET_PULSE_SL flag for scan conditioning.

        -set_pulse_cond_all[opt]Uses the ECMD_RING_MODE_SET_PULSE_ALL flag for scan conditioning. 

                                Run 'ecmdquery options' for a list of the global command line
                                options and their definitions
        --------------------------------------------------------------------------------

        Examples:       getlatch pu cp_abist LATCH0
                        getlatch pu cp_fpu GCP.PFPU.FP_UNIT0.FP_REG -ox -exact -expect feed -ix
                        getlatch pu MYLATCH
