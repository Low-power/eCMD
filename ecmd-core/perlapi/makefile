# Makefile for the ecmd Perl Module

# Base info and default build rules
SUBDIR     := perlapi/
include ../../makefile.rules

ifeq (aix,${DISTRO})
  INC_DISTRO := ${DISTRO}
else
  INC_DISTRO := default
endif

VPATH        := ../capi:${SRCPATH}:distro/${INC_DISTRO}
INCLUDES     := ecmdClientCapi.H  ecmdDataBufferBase.H  ecmdDataBuffer.H ecmdReturnCodes.H ecmdStructs.H ecmdClientPerlapi.H ecmdBit64.H
SOURCE       := ecmdClientPerlapi.C ecmdClientPerlapiFunc.C ecmdBit64.C
# This is the source generated by makepm.pl
GENERATED_SOURCE   := ecmdClientPerlapiFunc.C
GENERATED_INCLUDES := ecmdClientPerlapiFunc.H ecmdClientPerlapiIterators.H
# This source is generated by swig below
SWIG_SOURCE  := ecmdClientPerlapiSwig.C
SWIG_INPUT   := ecmdClientPerlapi.i ecmdString.i ecmdVector.i ecmdList.i ecmdCommon.i ecmdClientPerlapi.pl ecmdExtIncludes.i ecmdExtInserts.i
CFLAGS       := ${CFLAGS} -I../capi -I../dll -I${SRCPATH}
SWIGFLAGS    := ${SWIGFLAGS} -c++ -perl5 -exportall -const -I../capi -I../dll -I${SRCPATH} -Idistro/${INC_DISTRO} -DECMD_PERLAPI -I../perlapi

# Ok, tack on all the extension stuff
VPATH        := ${VPATH}$(foreach ext, ${EXTENSIONS},:../ext/${ext}/capi:../ext/${ext}/perlapi)
VPATH        := $(subst ${space},,${VPATH})

# Files that are generated based on extensions for swig
GENERATED_SWIG_INPUT := ecmdExtIncludes.i ecmdExtInserts.i

INCLUDES     := ${INCLUDES} $(foreach ext, ${EXTENSIONS}, ${ext}ClientPerlapi.H ${ext}ClientCapi.H )
CFLAGS       := ${CFLAGS} $(foreach ext, ${EXTENSIONS},-I../ext/${ext}/capi -I../ext/${ext}/perlapi -DECMD_$(shell echo ${ext} | tr "a-zA-Z" "A-Za-z")_EXTENSION_SUPPORT)
SWIGFLAGS    := ${SWIGFLAGS} $(foreach ext, ${EXTENSIONS},-I../ext/${ext}/perlapi -I../ext/${ext}/capi -DECMD_$(shell echo ${ext} | tr "a-zA-Z" "A-Za-z")_EXTENSION_SUPPORT)
SOURCE       := ${SOURCE} $(foreach ext, ${EXTENSIONS}, ${ext}ClientPerlapi.C ${ext}ClientPerlapiFunc.C)
# Remove the fapiClientPerlapiFunc.C from the build, only will use fapiClientPerlapi.C which has the init extension
SOURCE       := $(subst fapi2ClientPerlapiFunc.C,,${SOURCE})
SOURCE       := $(subst fapiClientPerlapiFunc.C,,${SOURCE})

# *****************************************************************************
# The Common Setup stuff
# *****************************************************************************
PM_TARGET := ecmd.pm
SO_TARGET := ecmd.so
LINK_OBJS := ${LINK_OBJS} ${OUTLIB}/ecmdClientCapi.a
# remove fapi here and add initFapiExtention only
ifeq (fapi2,$(filter ${EXTENSIONS},fapi2))
  LINK_OBJS  := ${LINK_OBJS} ${OBJPATH}/fapi2ClientCapiInit.o
endif
ifeq (fapi,$(filter ${EXTENSIONS},fapi))
  LINK_OBJS  := ${LINK_OBJS} ${OBJPATH}/fapiClientCapiInit.o
endif
LINK_EXTENSIONS := $(subst fapi2,,${EXTENSIONS})
LINK_EXTENSIONS := $(subst fapi,,${LINK_EXTENSIONS})
LINK_OBJS  := ${LINK_OBJS} $(foreach ext, ${LINK_EXTENSIONS}, ${OUTLIB}/${ext}ClientCapi.a)
VPATH      := ${VPATH}:${OBJPATH}

# The reference to libecmd.so has to go at the end of the link in Ubuntu
# Make it it's own variable instead of a SLDFLAGS
LDLIBS    := ${LDLIBS} -L${OUTLIB} -lecmd

# *****************************************************************************
# The Main Targets
# *****************************************************************************
all:
	@echo "Generating source ..."
	@${MAKE} gensource ${GMAKEFLAGS} --no-print-directory
	@echo "Calling swig ..."
	@${MAKE} swig ${GMAKEFLAGS} --no-print-directory
	@echo "Compiling source ..."
	@${MAKE} buildsource ${GMAKEFLAGS} --no-print-directory
	@echo "Testing build ..."
	@${MAKE} test ${GMAKEFLAGS} --no-print-directory
	@echo " "

swig: ${SWIG_SOURCE}

gensource: ${GENERATED_SOURCE} ${GENERATED_INCLUDES}

buildsource: ${SO_TARGET}

clean: objclean
	rm -f ${GENERATED_SOURCE}
	rm -f ${GENERATED_INCLUDES}
	rm -f ${GENERATED_SWIG_INPUT}

objclean:
	rm -rf ${OBJPATH}
	rm -rf ${SRCPATH}
	rm -f *.o

install:
	@echo "Installing eCMD PerlApi to ${INSTALL_PATH}/${TARGET_ARCH}/perl ..."
	cp ${OBJPATH}${PM_TARGET} ${INSTALL_PATH}/${TARGET_ARCH}/perl/.
	cp ${OBJPATH}${SO_TARGET} ${INSTALL_PATH}/${TARGET_ARCH}/perl/.

test: ${SO_TARGET}
    # Only do the build test if enabled
    ifeq (${TEST_BUILD},yes)
        ifeq (${TARGET_OS},aix)
	@slibclean
        endif
	@echo "***** If you see perl load errors this build of the perl module is invalid, ignore ECMD_DLL_FILE errors ****"
	ECMD_DLL_FILE=${OUTLIB}/stub.dll PERL5LIB=${OUTPERL} LD_LIBRARY_PATH=${OUTLIB}:${OUTPERL} ECMD_ARCH=${TARGET_ARCH} ./testBuild.pl
    endif

# *****************************************************************************
# Object Build Targets
# *****************************************************************************
SOURCE_OBJS := $(basename ${SOURCE})
SOURCE_OBJS := $(addprefix ${OBJPATH}, ${SOURCE_OBJS})
SOURCE_OBJS := $(addsuffix .o, ${SOURCE_OBJS})
SWIG_OBJS   := $(basename ${SWIG_SOURCE})
SWIG_OBJS   := $(addprefix ${OBJPATH}, ${SWIG_OBJS})
SWIG_OBJS   := $(addsuffix .o, ${SWIG_OBJS})

# *****************************************************************************
# Create directories from order only dependencies
# *****************************************************************************
${SRCPATH} ${OBJPATH} ${OUTPERL}:
	@mkdir -p $@

# *****************************************************************************
# Compile code for the common C++ objects if their respective
# code has been changed.  Or, compile everything if a header
# file has changed.
# *****************************************************************************
${SOURCE_OBJS}: ${OBJPATH}%.o : %.C ${INCLUDES} ${GENERATED_INCLUDES} | ${SRCPATH}
	@echo Compiling $<
	${VERBOSE}${CC_R} -c ${CFLAGS} ${PERLCFLAGS} ${PERLINC} $< -o $@ ${DEFINES} ${PERLDEFINES}

${SWIG_SOURCE}: ${INCLUDES} ${GENERATED_INCLUDES} ${SWIG_INPUT} | ${SRCPATH} ${OBJPATH} ${OUTPERL}
	@echo Running swig
	${VERBOSE}${SWIG} ${SWIGFLAGS} ${DEFINES} ${PERLDEFINES} -o ${SRCPATH}/${SWIG_SOURCE} -outdir ${OUTPERL} ecmdClientPerlapi.i

${SWIG_OBJS}: ${OBJPATH}%.o : %.C ${SWIG_SOURCE} | ${SRCPATH}
	@echo Compiling $<
	${VERBOSE}${CC_R} -c ${CFLAGS} ${PERLCFLAGS} ${PERLINC} $< -o $@ ${DEFINES} ${PERLDEFINES}

# *****************************************************************************
# Create the Perl Shared Library
# *****************************************************************************
${SO_TARGET}: ${SOURCE_OBJS} ${SWIG_OBJS} ${LINK_OBJS}
	@echo Linking $<
	${VERBOSE}${LD_R} ${SLDFLAGS} ${PERLSLDFLAGS} $^ -o ${OUTPERL}/${SO_TARGET} ${LDLIBS}


# *****************************************************************************
# Autogenerate the Perl Wrapper
# *****************************************************************************
# These have to be two separate targets because the generate include has to be there to build to generated source
${GENERATED_INCLUDES}: ${INCLUDES} ${ECMD_ROOT}/mkscripts/makepm.pl 
	@echo "==== Auto Generating $@"
	@${ECMD_ROOT}/mkscripts/makepm.pl ecmd $@

${GENERATED_SOURCE}: ${GENERATED_INCLUDES} ${ECMD_ROOT}/mkscripts/makepm.pl 
	@echo "==== Auto Generating $@"
	@${ECMD_ROOT}/mkscripts/makepm.pl ecmd $@

# *****************************************************************************
# Autogenerate some of the extension swig
# *****************************************************************************
${GENERATED_SWIG_INPUT}:
	@echo "==== Auto Generating $@"
	@${ECMD_ROOT}/mkscripts/makeext.py perlapi

# *****************************************************************************
# Debug rule for any makefile testing 
# *****************************************************************************
debug:
	@echo ${ECMD_ROOT}
	@echo ${SUBDIR}
