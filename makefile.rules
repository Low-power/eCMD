# *****************************************************************************
# The basic rules that apply to a default eCMD build
# *****************************************************************************

ifeq (${MAKEFILE_RULES},)

MAKEFILE_RULES   := y

# Build all extension if not otherwise specified
ifeq ($(strip $(EXTENSIONS)),)
  EXTENSIONS := cro cip gip eip aip scand zse bml mbo cmd
  export EXTENSIONS
endif


# Figure out the OS
OS := $(shell uname)
# We need to do extra for Linux
ifeq (${OS},Linux)
  ifneq ($(strip $(shell uname -a |grep ppc)),)
    OS := ppc
  else
    OS := x86
  endif
else
    OS := aix
endif


######## Default things we need setup for every compile ########
# SUBDIR = where the objects are moved to after compile
# CC_VER = the version of the compiler we are using.  Used by the install rule to grab right shared lib versions
# CC = the compiler
# CC_R = the reentrant compiler, only different for AIX
# CFLAGS = flags to pass to the compiler
# LD = the linker
# LD_R = the reentrant linker, only different for AIX
# LDFLAGS = flags to pass to the linker when linking exe's
# SLDFLAGS = flags to pass to the linker when linking shared libs
# AR = the archive creator

######## Creating These defines for compiler so that we can track when they change ########
######## Please add dated comments whenever the compilers get updated and ########
######## comment out (not delete) the previous values  ########
# Linux x86
#  Added 03/09/09 - when section was created
#  CC_VER   := 3.4.6
#  CC       := ${CTEPATH}/tools/ecmd/utils/gcc-3.4.6-glibc-2.3.4/i686-pc-linux-gnu/bin/i686-pc-linux-gnu-g++
#  CC_R     := ${CC}
#  LD       := ${CC}
#  LD_R     := ${CC_R}
#  AR       := ${CTEPATH}/tools/ecmd/utils/gcc-3.4.6-glibc-2.3.4/i686-pc-linux-gnu/bin/i686-pc-linux-gnu-ar

# Linux ppc:
#  Added 03/09/09 - when section was created
#  CC       := g++
#  CC_R     := ${CC}
#  LD       := ${CC}
#  LD_R     := ${CC_R}
#  AR       := ar

# AIX:
#  Added 03/09/09 - when section was created
#  CC_VER  := 6.0.0.8
#  CC      := /gsa/rchgsa-p1/01/ecmd/utils/vacpp.6008/usr/vacpp/bin/xlC.6008
#  CC_R    := /gsa/rchgsa-p1/01/ecmd/utils/vacpp.6008/usr/vacpp/bin/xlC_r.6008
#  LD       := ${CC}
#  LD_R     := ${CC_R}
#  AR       := ar

# *****************************************************************************
# The Common Setup stuff
# *****************************************************************************
SUBDIR   := obj_${OS}/

# *****************************************************************************
# The x86 Linux Setup stuff
# *****************************************************************************
ifeq (${OS},x86)
  GSACELL  := $(shell cat /etc/ldap.conf | grep "host " | cut -d" " -f2 | cut -d. -f1)
  CC_VER   := 3.4.6
  CC       := /gsa/${GSACELL}/projects/e/ecmd/utils/gcc-3.4.6-glibc-2.3.4/i686-pc-linux-gnu/bin/i686-pc-linux-gnu-g++
  CC_R     := ${CC}
  CFLAGS   := -g -I.
  LD       := ${CC}
  LD_R     := ${CC_R}
  LDFLAGS  :=
  SLDFLAGS := -shared
  GPATH    := ${SUBDIR}
  AR       := /gsa/${GSACELL}/projects/e/ecmd/utils/gcc-3.4.6-glibc-2.3.4/i686-pc-linux-gnu/bin/i686-pc-linux-gnu-ar
endif

# *****************************************************************************
# The ppc Linux Setup stuff
# *****************************************************************************
ifeq (${OS},ppc)
  CC       := g++
  CC_R     := ${CC}
  CFLAGS   := -g -I. -fPIC
  LD       := ${CC}
  LD_R     := ${CC_R}
  LDFLAGS  :=
  SLDFLAGS := -shared
  GPATH    := ${SUBDIR}
  AR       := ar
endif

# *****************************************************************************
# The Aix Setup stuff
# *****************************************************************************
ifeq (${OS},aix)
  GSACELL  := $(shell cat /usr/gsa/etc/gsa.conf | grep cellname | cut -d" " -f2 | cut -d. -f1)
  CC_VER   := 6.0.0.8
  CC       := /gsa/${GSACELL}/projects/e/ecmd/utils/vacpp.6008/usr/vacpp/bin/xlC
  CC_R     := /gsa/${GSACELL}/projects/e/ecmd/utils/vacpp.6008/usr/vacpp/bin/xlC_r
  CFLAGS   := -g -I.
  LD       := ${CC}
  LD_R     := ${CC_R}
  LDFLAGS  :=
  SLDFLAGS := -qmkshrobj -brtl
  AR       := ar
endif

# Try and use distcc if it's available - JTA 03/24/09
ifeq ($(strip $(shell /usr/bin/ls /usr/bin/distcc 2>&1)),/usr/bin/distcc)
  CC       := distcc ${CC}
  CC_R     := distcc ${CC_R}
endif


# Include the makefile.confg if the config script was run, this will override anything above
-include ${ECMD_ROOT}/makefile.config

# Setup the install path if the user didn't specify one in the config
ifeq ($(strip $(INSTALL_PATH)),)
  INSTALL_PATH := $(shell pwd)
  INSTALL_PATH := ${INSTALL_PATH}/install
  export INSTALL_PATH
endif

# Figure out how many gmake threads to run
ifeq (${OS},aix)
  #GMAKEFLAGS := ${GMAKEFLAGS} -j$(shell /etc/lsdev -Cc processor | grep -c Processor)
  GMAKEFLAGS := ${GMAKEFLAGS} -j$(shell expr `/etc/lsdev -Cc processor | grep -c Processor` \* 2)
else
  #GMAKEFLAGS := ${GMAKEFLAGS} -j$(shell cat /proc/cpuinfo | grep -c processor)
  GMAKEFLAGS := ${GMAKEFLAGS} -j$(shell expr `cat /proc/cpuinfo | grep -c processor` \* 2)
endif

endif
