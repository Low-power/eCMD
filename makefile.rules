# *****************************************************************************
# The basic rules that apply to a default eCMD build
# *****************************************************************************

ifeq (${MAKEFILE_RULES},)

MAKEFILE_RULES := y

# Turn off implicit source checkout rules in gmake to speed it up
%: %,v
%: RCS/%,v
%: RCS/%
%: s.%
%: SCCS/s.%

# Setup the ECMD_ROOT
# Strip the subdir off the end of the path so it points to the root of the repository
ECMD_ROOT := $(shell echo ${PWD}/ | sed 's@${SUBDIR}$$@@')

#These are needed to define a space char for substitutions later on
empty :=
space := ${empty} ${empty}

# Figure out the OS
HOST_ARCH := $(shell ${ECMD_ROOT}/mkscripts/gethostarch.sh)

# The HOST_OS is the first 3 characters of the HOST_ARCH (just by luck)
HOST_OS := $(shell echo ${HOST_ARCH} | cut -c1-3)

# See if the TARGET_ARCH was passed in.  If not, use the HOST_ARCH
ifeq (${TARGET_ARCH},)
  TARGET_ARCH := ${HOST_ARCH}
endif

# Get the target size
TARGET_SIZE := $(shell ${ECMD_ROOT}/mkscripts/getsize.sh ${TARGET_ARCH})

# The TARGET_OS is the first 3 characters of the TARGET_ARCH (just by luck)
TARGET_OS := $(shell echo ${TARGET_ARCH} | cut -c1-3)

# Get the distro we are building on
DISTRO := $(shell ${ECMD_ROOT}/mkscripts/getdistro.sh)

######## Default things we need setup for every compile ########
# SUBDIR = where the objects are moved to after compile
# CC_VER = the version of the compiler we are using.  Used by the install rule to grab right shared lib versions
# CC = the compiler
# CC_R = the reentrant compiler, only different for AIX
# CFLAGS = flags to pass to the compiler
# LD = the linker
# LD_R = the reentrant linker, only different for AIX
# LDFLAGS = flags to pass to the linker when linking exe's
# SLDFLAGS = flags to pass to the linker when linking shared libs
# AR = the archive creator

# *****************************************************************************
# The Common Setup stuff
# *****************************************************************************
# If the user didn't give a dir to place the objects, just do it in their eCMD dirs
ifeq ($(strip ${OBJROOT}),)
  OBJROOT  := ${ECMD_ROOT}
endif
# Remove any trailing slashes at the end
OBJROOT   := $(shell echo ${OBJROOT} | sed 's@/*$$@@g')
OBJDIR    := obj_${TARGET_ARCH}
OBJPATH   := ${OBJROOT}/${SUBDIR}/${OBJDIR}/
# Cleanup multiple //'s in the path built above
OBJPATH   := $(shell echo ${OBJPATH} | sed 's@/\+@/@g')
# Now export it all so it can be used in scripts, etc..
export OBJROOT
export OBJDIR
export OBJPATH

# Right now the SRC paths are only used by Perl/Python SWIG
# It could be extended for the other generated source
# If the user didn't give a dir to place the generated source, just do it in their eCMD dirs
ifeq ($(strip ${SRCROOT}),)
  SRCROOT  := ${OBJROOT}
endif
# Remove any trailing slashes at the end
SRCROOT   := $(shell echo ${SRCROOT} | sed 's@/*$$@@g')
SRCDIR    := src_${TARGET_ARCH}
SRCPATH   := ${SRCROOT}/${SUBDIR}/${SRCDIR}/
# Cleanup multiple //'s in the path built above
SRCPATH   := $(shell echo ${SRCPATH} | sed 's@/\+@/@g')
# Now export it all so it can be used in scripts, etc..
export SRCROOT
export SRCDIR
export SRCPATH

# Common compile flags across any OS
CFLAGS    := -g -I.

# Setup common flags across an OS
ifeq (${TARGET_OS},$(filter ${TARGET_OS}, x86 ppc))
  DEFINES := ${DEFINES} -DLINUX
  GPATH    := ${OBJDIR}
  CFLAGS   := ${CFLAGS} -Wall
  ifeq (${TARGET_SIZE},64)
    CFLAGS   := ${CFLAGS} -m64 -fPIC
    LDFLAGS  := ${LDFLAGS} -m64 -fPIC
    SLDFLAGS := ${SLDFLAGS} -shared -m64 -fPIC
  else
    CFLAGS   := ${CFLAGS} -m32 -fPIC
    LDFLAGS  := ${LDFLAGS} -m32 -fPIC
    SLDFLAGS := ${SLDFLAGS} -shared -m32 -fPIC
  endif
else
  DEFINES := ${DEFINES} -DAIX
endif

# Build all extension if not otherwise specified
ifeq ($(strip ${EXTENSIONS}),)
  ifeq (${TARGET_ARCH},x86_64)
    EXTENSIONS := cro cip gip eip aip scand zse bml mbo cmd fapi fapi2
  else
    EXTENSIONS := cro cip gip eip aip scand zse bml mbo cmd fapi
  endif
  export EXTENSIONS
endif

# If building fapi2, this is required
ifneq (,$(findstring fapi2,${EXTENSIONS}))
  CFLAGS   := ${CFLAGS} -std=c++11
  LDFLAGS  := ${LDFLAGS} -std=c++11
  SLDFLAGS := ${SLDFLAGS} -std=c++11
endif

# Include the makefile for this build type
include ${ECMD_ROOT}mkconfigs/${DISTRO}/make-${HOST_ARCH}-${TARGET_ARCH}

# Include the makefile.config, this will override anything above
-include ${ECMD_ROOT}/makefile.config

# If not set in the included makefiles, set optimization level 3 for libecmd.so
OPT_LEVEL ?= -O3

# If not disabled in the included makefiles, enable build tests
TEST_BUILD ?= yes

# Try and use distcc if it's available - JTA 03/24/09
ifeq ($(strip ${NODISTCC}),)
  ifeq ($(strip $(shell /bin/ls /usr/bin/distcc 2>&1)),/usr/bin/distcc)
    CC       := distcc ${CC}
    CC_R     := distcc ${CC_R}
  endif
endif


# Setup the install path if the user didn't specify one in the config
ifeq ($(strip ${INSTALL_PATH}),)
  INSTALL_PATH := $(shell pwd)
  INSTALL_PATH := ${INSTALL_PATH}/install
  export INSTALL_PATH
endif

# Add any additional options you want added to a make go inside this conditional
# This is only done the first time make is invoked
# Any submakes invoked by the makefile don't execute this logic
# That is to prevent options from being repeated on the command line
# This is particularly troublesome for multiple -j options, which cause jobserver warnings
ifneq (${DIDGMAKEFLAGS},yes)

  # Figure out how many gmake threads to run
  ifeq (${TARGET_OS},aix)
    ifeq ($(strip $(shell /bin/ls /etc/lsdev 2>&1)),/etc/lsdev)
      #GMAKEFLAGS := ${GMAKEFLAGS} -j$(shell /etc/lsdev -Cc processor | grep -c Processor)
      GMAKEFLAGS := ${GMAKEFLAGS} -j$(shell expr `/etc/lsdev -Cc processor | grep -c Processor` \* 2)
    endif
  else
    #GMAKEFLAGS := ${GMAKEFLAGS} -j$(shell cat /proc/cpuinfo | grep -c processor)
    GMAKEFLAGS := ${GMAKEFLAGS} -j$(shell expr `cat /proc/cpuinfo | grep -c processor` \* 2)
  endif

  # All done with the flags.  Set a variable to indicate that and export it down to any submakes
  DIDGMAKEFLAGS := yes
  export DIDGMAKEFLAGS
endif

# Allows you to print any variable by doing this:
# make print-BUILD_TARGETS
print-%:
	@echo $*=$($*)

endif

