# *****************************************************************************
# The basic rules that apply to a default eCMD build
# *****************************************************************************

ifeq (${MAKEFILE_RULES},)

MAKEFILE_RULES := y

# Turn off implicit source checkout rules in gmake to speed it up
%: %,v
%: RCS/%,v
%: RCS/%
%: s.%
%: SCCS/s.%

# Build all extension if not otherwise specified
ifeq ($(strip ${EXTENSIONS}),)
  EXTENSIONS := cro cip gip eip aip scand zse bml mbo cmd fapi
  export EXTENSIONS
endif

# Figure out the OS
ifeq ($(shell uname),Linux)
  DEFINES := ${DEFINES} -DLINUX
  # It's linux, figure out the type and arch
  ifneq ($(strip $(shell uname -a |grep ppc)),)
    HOST_OS := ppc
    ifneq ($(strip $(shell uname -a |grep ppc64)),)
      HOST_ARCH := ppc64
    else
      HOST_ARCH := ppc
    endif
#  else ifneq ($(strip $(shell uname -a |grep x86)),)
  else
    HOST_OS := x86
    ifneq ($(strip $(shell uname -a |grep x86_64)),)
      HOST_ARCH := x86_64
    else
      HOST_ARCH := x86
    endif
  endif
else
    DEFINES := ${DEFINES} -DAIX
    HOST_OS := aix
    # It's AIX, just support 32 bit (for now)
    HOST_ARCH := aix
endif

# See if the TARGET_ARCH was passed in.  If not, use the HOST_ARCH
ifeq (${TARGET_ARCH},)
  TARGET_ARCH := ${HOST_ARCH}
endif

# The TARGET_OS is the first 3 characters of the TARGET_ARCH (just by luck)
TARGET_OS := $(shell echo ${TARGET_ARCH} | cut -c1-3)

# Logic should be put in here to check that the TARGET_ARCH is compatible with the HOST_ARCH
# For example, aix can't build ppc or x86 code.
# Leaving a TODO for now, JTA 06/24/2014

# Setup the ECMD_ROOT
# Strip the subdir off the end of the path so it points to the root of the repository
ECMD_ROOT := $(shell echo ${PWD}/ | sed 's@${SUBDIR}$$@@')

#These are needed to define a space char for substitutions later on
empty :=
space := ${empty} ${empty}

######## Default things we need setup for every compile ########
# SUBDIR = where the objects are moved to after compile
# CC_VER = the version of the compiler we are using.  Used by the install rule to grab right shared lib versions
# CC = the compiler
# CC_R = the reentrant compiler, only different for AIX
# CFLAGS = flags to pass to the compiler
# LD = the linker
# LD_R = the reentrant linker, only different for AIX
# LDFLAGS = flags to pass to the linker when linking exe's
# SLDFLAGS = flags to pass to the linker when linking shared libs
# AR = the archive creator

# *****************************************************************************
# The Common Setup stuff
# *****************************************************************************
# If the user didn't give a dir to place the objects, just do it in their eCMD dirs
ifeq ($(strip ${OBJROOT}),)
  OBJROOT  := ${ECMD_ROOT}
endif
# Remove any trailing slashes at the end
OBJROOT   := $(shell echo ${OBJROOT} | sed 's@/*$$@@g')
OBJDIR    := obj_${TARGET_ARCH}
OBJPATH   := ${OBJROOT}/${SUBDIR}/${OBJDIR}/
# Cleanup multiple //'s in the path built above
OBJPATH   := $(shell echo ${OBJPATH} | sed 's@/\+@/@g')
# Now export it all so it can be used in scripts, etc..
export OBJROOT
export OBJDIR
export OBJPATH

# Right now the SRC paths are only used by Perl/Python SWIG
# It could be extended for the other generated source
# If the user didn't give a dir to place the generated source, just do it in their eCMD dirs
ifeq ($(strip ${SRCROOT}),)
  SRCROOT  := ${OBJROOT}
endif
# Remove any trailing slashes at the end
SRCROOT   := $(shell echo ${SRCROOT} | sed 's@/*$$@@g')
SRCDIR    := src_${TARGET_ARCH}
SRCPATH   := ${SRCROOT}/${SUBDIR}/${SRCDIR}/
# Cleanup multiple //'s in the path built above
SRCPATH   := $(shell echo ${SRCPATH} | sed 's@/\+@/@g')
# Now export it all so it can be used in scripts, etc..
export SRCROOT
export SRCDIR
export SRCPATH

# Common compile flags
CFLAGS    := -g -I.

# *****************************************************************************
# The x86 linux setup stuff
# *****************************************************************************
ifeq (${TARGET_OS},x86)
  GPATH    := ${OBJDIR}
  CFLAGS   := ${CFLAGS} -ftemplate-depth-25 -Wall
  ifeq (${TARGET_ARCH},x86)
    CC_VER := $(shell gcc --version | cut -d " " -f 3 | grep "\.")
    ifeq (${CC_VER},4.1.2)
      GSACELL  := $(shell cat /etc/ldap.conf | grep "host " | cut -d" " -f2 | cut -d. -f1)
    else
      GSACELL  := $(shell cat /usr/gsa/etc/gsa.conf | grep cellname | cut -d" " -f2 | cut -d. -f1)
    endif
    CC       := /gsa/${GSACELL}/projects/e/ecmd/utils/gcc-4.1.2-glibc-2.3.2/i686-pc-linux-gnu/bin/i686-pc-linux-gnu-g++
    CC_R     := ${CC}
    LD       := ${CC}
    LD_R     := ${CC_R} 
    AR       := /gsa/${GSACELL}/projects/e/ecmd/utils/gcc-4.1.2-glibc-2.3.2/i686-pc-linux-gnu/bin/i686-pc-linux-gnu-ar
    CFLAGS   := ${CFLAGS} -m32 -fPIC -I/gsa/${GSACELL}/projects/e/ecmd/utils/x86/include
    LDFLAGS  := ${LDFLAGS} -m32 -fPIC
    SLDFLAGS := ${SLDFLAGS} -shared -m32 -fPIC
  else
    GSACELL  := $(shell cat /usr/gsa/etc/gsa.conf | grep cellname | cut -d" " -f2 | cut -d. -f1)
    CC       := /opt/rh/devtoolset-2/root/usr/bin/g++
    #CC       := /usr/bin/g++
    CC_R     := ${CC}
    LD       := ${CC}
    LD_R     := ${CC_R} 
    AR       := /opt/rh/devtoolset-2/root/usr/bin/ar
    #AR       := /usr/bin/ar
    CFLAGS   := ${CFLAGS} -m64 -fPIC
    LDFLAGS  := ${LDFLAGS} -m64 -fPIC
    SLDFLAGS := ${SLDFLAGS} -shared -m64 -fPIC
  endif
endif

# *****************************************************************************
# The ppc linux setup stuff
# *****************************************************************************
ifeq (${TARGET_OS},ppc)
  CC       := /usr/bin/g++
  CC_R     := ${CC}
  LD       := ${CC}
  LD_R     := ${CC_R} 
  AR       := /usr/bin/ar
  GPATH    := ${OBJDIR}
  CFLAGS   := ${CFLAGS} -ftemplate-depth-25 -Wall
  ifeq (${TARGET_ARCH},ppc)
    CFLAGS   := ${CFLAGS} -m32 -fPIC
    LDFLAGS  := ${LDFLAGS} -m32 -fPIC
    SLDFLAGS := ${SLDFLAGS} -shared -m32 -fPIC
  else
    CFLAGS   := ${CFLAGS} -m64 -fPIC
    LDFLAGS  := ${LDFLAGS} -m64 -fPIC
    SLDFLAGS := ${SLDFLAGS} -shared -m64 -fPIC
  endif
endif

# *****************************************************************************
# The aix setup stuff
# *****************************************************************************
ifeq (${TARGET_OS},aix)
  GSACELL  := $(shell cat /usr/gsa/etc/gsa.conf | grep cellname | cut -d" " -f2 | cut -d. -f1)
  ifeq (${TARGET_ARCH},aix64)
    CC       := /opt/xsite/cte/tools/simarama/gcc/bin/g++
    CC_R     := ${CC}
    LD       := ${CC}
    LD_R     := ${CC_R} 
    AR       := /opt/xsite/cte/tools/simarama/gcc/bin/ar -X64
    CFLAGS   := -g -I. -fPIC -ftemplate-depth-25 -Wall -maix64
    LDFLAGS  := ${LDFLAGS} -fPIC -maix64 -Wl,-brtl -Wl,-bexpall -Wl,-bhalt:5
    SLDFLAGS := -maix64 -fPIC -shared -Wl,-G -Wl,-bexpall -Wl,-bhalt:5
#    SLDFLAGS := -maix64 -fPIC -shared -Wl,-bexpfull -Wl,-brtl
  else
    CC       := /bin/xlC
    CC_R     := /bin/xlC_r
    CFLAGS   := ${CFLAGS} -+ -qstaticinline -qnoinline
    LD       := ${CC}
    LD_R     := ${CC_R}
    LDFLAGS  := ${LDFLAGS}
    SLDFLAGS := -qmkshrobj -brtl
    AR       := /usr/bin/ar
    CFLAGS   := ${CFLAGS} -I/gsa/${GSACELL}/projects/e/ecmd/utils/aix/include
  endif
endif

# Include the makefile.confg if the config script was run, this will override anything above
-include ${ECMD_ROOT}/makefile.config

# Try and use distcc if it's available - JTA 03/24/09
ifeq ($(strip ${NODISTCC}),)
  ifeq ($(strip $(shell /bin/ls /usr/bin/distcc 2>&1)),/usr/bin/distcc)
    CC       := distcc ${CC}
    CC_R     := distcc ${CC_R}
  endif
endif


# Setup the install path if the user didn't specify one in the config
ifeq ($(strip ${INSTALL_PATH}),)
  INSTALL_PATH := $(shell pwd)
  INSTALL_PATH := ${INSTALL_PATH}/install
  export INSTALL_PATH
endif

# Add any additional options you want added to a make go inside this conditional
# This is only done the first time make is invoked
# Any submakes invoked by the makefile don't execute this logic
# That is to prevent options from being repeated on the command line
# This is particularly troublesome for multiple -j options, which cause jobserver warnings
ifneq (${DIDGMAKEFLAGS},yes)

  # Figure out how many gmake threads to run
  ifeq (${TARGET_OS},aix)
    ifeq ($(strip $(shell /bin/ls /etc/lsdev 2>&1)),/etc/lsdev)
      #GMAKEFLAGS := ${GMAKEFLAGS} -j$(shell /etc/lsdev -Cc processor | grep -c Processor)
      GMAKEFLAGS := ${GMAKEFLAGS} -j$(shell expr `/etc/lsdev -Cc processor | grep -c Processor` \* 2)
    endif
  else
    #GMAKEFLAGS := ${GMAKEFLAGS} -j$(shell cat /proc/cpuinfo | grep -c processor)
    GMAKEFLAGS := ${GMAKEFLAGS} -j$(shell expr `cat /proc/cpuinfo | grep -c processor` \* 2)
  endif

  # All done with the flags.  Set a variable to indicate that and export it down to any submakes
  DIDGMAKEFLAGS := yes
  export DIDGMAKEFLAGS
endif

endif
